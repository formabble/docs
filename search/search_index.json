{"config":{"lang":["en"],"separator":"[\\s\\-\\.\\`]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the Formabble reference docs - your go-to source for all things API-related to our game development tools, including Formabble itself and Shards, our custom high-level programming language, designed for game development.</p> <p>Check our Formabble\u2019s beginner guide to get rolling with your first project and learn the ins and outs of using the platform.</p> <p>We are currently in closed alpha, and as things are constantly changing, some of the documentation may be slightly outdated or missing documentation for new features. We appreciate your understanding and invite everyone to provide feedback on the documentation and the platform itself.</p> <p>You can contribute through GitHub or chat with us on our Discord server, where we have a dedicated channel for reporting bugs and leaving feedback.</p> <p>We hope you find them helpful and we can't wait to see the incredible things you'll build with our APIs.</p> <p>Use the search box above if you're looking for something specific.</p> <p>Website</p> <p>Demo Video</p> <p>Discord</p> <p>X (Twitter)</p> <p> </p>"},{"location":"guide/1-introduction/","title":"Formabble Guide","text":""},{"location":"guide/1-introduction/#introduction","title":"Introduction","text":"<p>Welcome to Formabble, your all-in-one gateway tool into the world of game creation. This quick-start guide is designed to jumpstart your project by providing:</p> <ol> <li>A brief overview of why you should use Formabble</li> <li>Insights into its key concepts and methodologies</li> <li>A tutorial on how to utilize Formabble and its most useful functions</li> </ol> <p>Note: Formabble is currently in its early alpha stage, which is an exciting phase of development. However, some features are still under development, and encountering bugs or temporary limitations is possible. We value your patience and feedback during this period, as it is crucial in shaping Formabble into a robust and user-friendly game creation platform.</p>"},{"location":"guide/2-why-formabble/","title":"Why Formabble?","text":"<p>\"I wanted a game creation tool that would allow creators to create freely. Sad to say, I find that the current tools we have are too shackled by outdated technology to properly achieve this. It is my firm belief that by leveraging on modern technology and innovation to create a game-engine that is accessible, collaborative and unbounded, only then can we truly empower creators.\" ~ Giovanni Petrantoni</p> <p></p> <p>Here at Formabble we aim to unshackle our creators by making game creation Accessible, Collaborative and Unbounded. In this section we will go through how we achieve this by using current technology and innovations such as AI and real-time multiplayer editing.</p>"},{"location":"guide/2-why-formabble/#accessible","title":"Accessible","text":"<p>Many a projects sadly never come to fruition because game creation is a complex task. Coding logic in-of-itself is already a daunting task, but a creator has to design levels, create assets, test for bugs, optimize, ensure that everything runs smoothly on the desired platform and a slew of other tasks that are too long to list. Formabble alleviates the strain on our creators by making coding and optimization easy for our creators. We do this through AI and our proprietary programming language Shards.</p> <p>Shards is a dataflow visual-esque programming language that revolutionizes game development. With a syntax that is akin to placing blocks together, Shards is incredibly easy for beginner\u2019s to grasp. Furthermore, through its Wires &amp; Meshes, it allows creators to mulithread their programs by simply by plugging the correct Wires into the correct behavior. Creators also are able to run specific logic asynchronously when needed by using specific Wire Activators to activate specific parts of their logic. Furthermore, the simplicity of Shards, with its resemblance to natural language, allows AI models to learn it easily . Thus creators using Formabble\u2019s built-in AI assistant, can manipulate their projects solely through text-prompts, making Formabble truly, an Ai-powered creative playground. Moreover, in Formabble not only can you create games, but seamlessly publish them too. Once creators have brought their visions to life in Formabble with the support of our AI assistant, they can easily share their completed games with the world. Our platform acts as a springboard, enabling immediate publication and distribution of their work. This direct-to-platform publishing capability means that creators can rapidly transition from development to launch. This alongside players also being able to play games directly on Formabble, allows creators to gather feedback, build a community of players, and iterate their games all within the Formabble ecosystem. By reducing the barriers between creation and publication, we empower creators to focus on what they do best \u2013 crafting unique and engaging gaming experiences, while we handle the complexities of distribution and exposure.</p> <p>By simplifying both creation and publication, we lighten the creators' burden, allowing them to craft, iterate, and share their games unrestricted and unrestrained \u2013 truly encapsulating an end-to-end solution for game development and dissemination.</p>"},{"location":"guide/2-why-formabble/#collaborative","title":"Collaborative","text":"<p>As illustrated above, game development is not an easy task for one person to tackle alone. Here at Formabble we are resolute on collaborative game-design. Pioneering the way, Formabble is the Google docs of game creation systems, designed for creators to collaboratively edit games simultaneously.</p> <p>By synchronizing states, multiple creators can load into a Domain and promptly start editing and creating together. Envision a digital workspace where multiple creators come together, each with their own expertise and vision, working in unison on a single game project. One designer might sculpt landscapes, another programs NPC behavior, while a third fine-tunes the physics\u2014all crafting different facets of the same world in real-time. This not only accelerates the development process but also enriches it, allowing for a dynamic interplay of ideas. It's a fluid, organic approach to game creation, promoting an agile development culture where feedback is instant and iteration is constant. Think of it as a \u201cGoogle docs\u201d that provides a real-time multiplayer game building experience.</p> <p>By enabling creators to operate in parallel, Formabble dissolves the traditional bottlenecks of game development. It's a shared space where creativity thrives, unbound by the constraints of sequential workflows. Thus, Formabble doesn't just streamline the creation process\u2014it reinvents it.</p>"},{"location":"guide/2-why-formabble/#unbounded","title":"Unbounded","text":"<p>Most game engines were conceived in an era where game creation was confined to the desktop interface. We firmly believe that game creation has long past transcended being chained to the desktop screen. Recognizing this, Formabble shatters old paradigms, offering a truly unbounded game development experience. Unlike previous game-creation-tools, Formabble is purposly-built to be multi-platformed, not only at the runtime level, but at the editor level. It is designed to be compatible with a broad spectrum of platforms\u2014be it desktop, Mac, mobile phones, or tablets. Thus with Formabble one can edit their project at home, in the office, while on the commute, even on your toilet seat. With this cross-device capability, Formabble empowers you to create whenever and wherever creativity strikes.</p> <p>However, on top of this, Formabble looks ahead with anticipation. At Formabble, we are not just keeping pace with the present\u2014we are building for the future. We predict that game creation will also soon evolve beyond screen interfaces. And for that reason, Formabble is designed with the inevitability of VR and XR interfaces in mind. Evidently, Formabble is a current game-engine that is evolving for a scene that has already outgrown existing technology. This forward-thinking development is driven by our commitment to ensure that as the digital landscape evolves, so too will the tools we provide. With Formabble, you're not just keeping up with the current trends; you're stepping into a realm of endless possibilities, ready to define the next generation of game creation.</p>"},{"location":"guide/3-what-is-shards/","title":"What is Shards?","text":"<p>Shards syntax directly maps a visual model enabling efficient round-trip code generation during visual development. Shards powers an upcoming AI-powered game creation system where communities can play and collaborate in real time. While Shards is often not explicitly seen there, it is the language behind the AI-assisted visual interactions that will allow users to create games and experiences in a low to no-code environment. In Shards, every primitive is a shard, flowing from shard to shard, to build a computational graph that represents a visual model. Example:</p> <p><pre><code>[[1 2 3] [2 3 4] [3 4 5]] | Reduce(Math.Add($0)) | Assert.Is([6 9 12]) | Log\n;=&gt; [6 9 12]\n</code></pre> Even a literal is a shard. <code>[[1 2 3] [2 3 4] [3 4 5]]</code> is internally converted into <code>Const([[1 2 3] [2 3 4] [3 4 5]])</code> shard. Furthermore, each shard was programmed to guarantee the highest standards of performance, with low level optimizations in C++ and Rust.</p>"},{"location":"guide/3-what-is-shards/#goal","title":"Goal","text":"<p>Shards achieves zero-compromise on four goals: Reach, Accuracy, Performance, and Simplicity.</p>"},{"location":"guide/3-what-is-shards/#accessibility","title":"Accessibility","text":"<p>Reach to People</p> <p>Using visual development engines like Formabble, anyone can build complex applications like games, without prior coding skills.</p> <p>Reach of Platforms</p> <p>Shards is available in all major platforms: OS X, Windows, Mac, browser, IOS and Vision Pro</p> <p>Robust Reach</p> <p>Visual development powered by shards is suitable for solving a wide range of problems, from performance demanding games, to utility shell scripts, with batteries included: 550+ shards for all kinds of purposes.</p>"},{"location":"guide/3-what-is-shards/#accuracy","title":"Accuracy","text":"<p>Automatically inferred strong types, and inter-shard type compatibility validation based on the data flowing in and out from shards while building the computational graph.</p>"},{"location":"guide/3-what-is-shards/#performance","title":"Performance","text":"<p>Zero waste visual development</p> <p>Code is manipulated without any unnecessary waste. We achieved through the 1-to-1 direct translation from Shard\u2019s code to the final computational graph. This direct mapping ensures that changes made in one representation can seamlessly translate to the other, making the entire process efficient and error-free.</p> <p>Performant composition</p> <p>The straightforward architecture flow of shards allows for fast composition of the computational graph, which results in quick loading of programs.</p> <p>Performant runtime</p> <p>Inferring and validating types at compile time allows programs to run faster, as we no longer need to worry about types during runtime.</p> <p>Primitive performance</p> <p>Each primitive (Shard) in the computational graph was programmed to the highest standards of performance, using C++ and Rust.</p> <p>Parallel performance</p> <p>Built on top of co-routines. It\u2019s extremely easy to unleash parallelism while maintaining a low syscall count.</p>"},{"location":"guide/3-what-is-shards/#simplicity","title":"Simplicity","text":"<p>Shards is just shards flowing into shards, thus: - Is designed to be visual and easy to understand at a glance. - Trivial implementation and control of game loop code. - Extremely easy to debug and dissect due to the straight forward flow of shards. - Low learning curve to make changes to the code directly.</p> <p> Shards Article</p> <p>For a more in-depth article on the capabilities of Shards, visit: Shards: Coding Simplicity and Power</p> <p>Or check out the github repository</p>"},{"location":"guide/4-getting-started/","title":"Getting Started with the Formabble Interface","text":"<p>In this chapter we will guide you through the UI in Formabble. From creating your domain, to importing your first asset, we will guide you through the essential steps required to get started on making your first game!</p> Creating a Domain <p>After Logging in, you will be greeted with the Main Menu window. To create a domain you can either click on the New Domain button or the Import Domain button.</p> <p>The first method, change the domains category drop down to My Domains. Then upon clicking New Domain, a fresh empty domain will be immediately created. Your domain will be given a randomly generated name and be automatically saved.</p> <p></p> <p>The second method, change the domains category drop down to My Domains. Then, upon clicking the Import Domain, your file explorer window will pop-up, for you to import an .fdb file.</p> <p></p> <p></p> <p>From the file explorer window, you can either import an existing file or type a file name and click save to create a new domain with the specified name.</p> Importing Assets <p>Assets are the lifeblood of any domain. To import assets, either click on the Import button from your Domain Inventory window or simply drag the asset from your file explorer into the Domain Inventory window.</p> <p></p> <p>If the Import button was been clicked, the file explorer window will pop up for you to import your asset. Certain asset categories can accept multiple file extensions. Remember to click on the correct file extension.</p> File Category Extension Type Scripts .shs Textures .jpg .png Meshes .glb Audio .ogg .mp3 <p>Once an asset has been selected, or has been dragged in the Import Asset window will appear. Click on Import button to import the asset.</p> <p></p> <p>Once imported, it will appear in the Domain Inventory. (Click on the Category dropdown to change the category of the assets currently being shown in the inventory. Change it accordingly if you don't see your asset.)</p> <p></p> <p></p> <p>Congratulations! You have imported your first asset!</p> Adding References to an asset <p>It is not uncommon for your scripts to reference an asset. You can do this at two points. When you are importing an asset and after it has been imported. Let\u2019s try referencing the apple that we have just imported.</p> <p>In this example, we are importing a script that will render our apple 3d model. To do that it needs to reference our apple.</p> <p></p> <p>The first method, to reference our apple, with the Import Asset window open, drag the apple from the Domain Inventory into the References section in the Import Asset window.</p> <p></p> <p>Once the asset has been added it will appear under References in the Edit Asset window.</p> <p></p> <p>The second way to do it is after you have imported the script. From the Domain Inventory window, click on the Asset Options button.</p> <p></p> <p>Once the Asset Options button has been clicked, the Asset Options window will appear.</p> <p></p> <p>From the Assets Options Window, click on Edit Button to bring up the Edit Asset Window.</p> <p>From the Edit Asset Window click on the References drop down toggle to see all of the asset's current references.</p> <p></p> <p>From here, simply drag the asset you want to reference from the Domain Inventory into the References category in the Edit Asset Window.</p> <p></p> <p>Lastly click on Save to sve your changes.</p> <p></p> <p>If you accidentally add the wrong reference, you can also remove it. First click on the reference to remove from the References list, thenSimply click on the Delete button next to the referenced asset in the Edit Asset Reference List.</p> <p></p> <p>Once removed, the asset will disappear from the References list. Lastly, click on Save to save your changes.</p> Formalizing Assets <p>Now that you have your assets uploaded, the next step is to add them into your domain. To do this, from the Asset Options Window, click on the Formalize button.</p> <p></p> <p>Alternatively, simply drag the asset from Domain Inventory to the domain.You should see your form in your domain! Do note that if your scripts has errors or if it does not have the requires references, it will not formalize. Formabble also can\u2019t formalize images or 3d models as they are. They have to be referenced in a script and then formalized. To see how to create such a script, refer to the \u201cload-3d-asset\u201d and \u201cload-2d-asset\u201d samples from the samples domain.</p> <p></p> Form Gizmos <p>With your assets formalized inside your domain, the next step to creating your game is to manipulate these assets. The Formabble gizmos will help you in this task. When you click on your 3d form, you will see the form gizmo pop-up. (The Form Gizmo will not pop-up for non-3D forms, such as UI elements).</p> <p></p> <p>Now I will guide you through what each of the buttons in the form gizmo will do. The button on the top right will put the gizmo into translation mode. In translation mode , you will see arrows on your forms. Click on the appropriate arrow to change the form\u2019s X, Y and Z translation. To put it simply, it is the \"move\" button.</p> <p></p> <p>You can also click on the plane square\u2019s to move the form freely along the plane. Clicking on the blue square for example will move the form freely along the XY plane.</p> <p></p> <p>Next, clicking on the center button on the top row will put the gizmo into rotation mode. In rotation mode, you will see multiple rings around your forms. Click on the appropriate rings and drag your mouse pointer to change the rotation of your form.</p> <p></p> <p>Lastly clicking on the button on the top right will put the gizmo into scaling mode. In scaling mode, click on the appropriate cubes and drag your mouse to change the X,Y and Z scale of your form.</p> <p></p> <p>Moving on to the bottom row of buttons, the button on the left will delete your form.</p> <p></p> <p>The second button from the left, will duplicate your form.</p> <p></p> <p>The button after that does nothing for now. TODO</p> <p>The button after that also does nothing for now TODO</p> <p>The button on the most right will hide all the other buttons on the gizmo. Click it again unhide them.</p> <p></p> Domain Side Menu <p>In a domain you will find a Side menu. The buttons in this side menu each have different functionality that will help with your navigation and workflow effeciency.</p> <p></p> <p>This section will get you up to speed on what each button does. The first button is the menu button. Upon clicking the menu button, you will see a list of buttons that each correspond to a window in your domain.</p> <p></p> <p></p> Editing Asset Code <p>Formabble supports an all in one experience and thus allows creators to edit their code within Formabble itself. To do this, from the Domain Inventory window, click on the asset's Option button and from the Asset Options menu, click on Edit.</p> <p></p> <p>Then from the Edit Asset window, edit the asset's code in the Code Editor section.</p> <p></p> <p>Remember to click on Save to save your changes</p> <p></p> <p>Should you wish, you can also edit your code using your preferred Code Editor. To do this, from the Edit Asset window, click on Open Locally. This will open your file explorer to the location of the selected file. From here you can open this file using your preferred code editor. Saving your changes on your code editor will automatically update the asset in Formabble for a seemless experience.</p> <p></p> Deleting Assets <p>Sometimes we might accidentally add an asset or have an asset that is now redundant much later on in development. To delete an click on the asset in the Domain Inventory window. and click on Asset Options button.</p> <p></p> <p>Once the Update Asset Window is open, click on Delete(permanently) to delete the asset from your Domain Inventory. Warning! Deleting an asset will delete it from all objects that are referencing it. This might kill your forms and leave them as dead forms. Remember to check through all your assets before deleting them.</p> <p>Asset Delete Button</p> Editor Settings <p>In the Settings window, you will find useful settings to tune your Formabble interface to your needs.</p> <p>Settings Menu</p> <p>Show world grid - checking/unchecking this box will hide/show the world grid</p> <p>World Grid Step Size - Changing this value would increas/decrease the size of your world grid.</p> <p>World Grid Size - Changing this value will increase/decrease how far spread is your world grid in your domain.</p> <p>World Grid Opacity - This value controls how opaque/transparent the lines on your world grid are.</p> <p>Editor Camera field of View - Will increase/decrease how zoomed in your field of view is.</p> <p>Editor UI Scale - will increase/decrease how large/small the Formabble UI panels will appear on your screen.</p>"},{"location":"guide/4-getting-started/#domain","title":"Domain","text":"<p>Functionality tbd</p> <p></p>"},{"location":"guide/4-getting-started/#settings","title":"Settings","text":"<p>The Settings button either hide/show the Settings Menu where you can edit your Editor Settings.</p> <p></p> <p></p>"},{"location":"guide/4-getting-started/#publish","title":"Publish","text":"<p>Functionality tbd</p> <p></p>"},{"location":"guide/4-getting-started/#members","title":"Members","text":"<p>The Members button will either hide/show the Domain Sharing Window, which houses all the options regarding to Domain Sharing.</p> <p></p> <p></p>"},{"location":"guide/4-getting-started/#chat","title":"Chat","text":"<p>The Chat button will either hide/show the Chat Window which can be used to chat with other members in your domain or be used to display your Domain Log.</p> <p></p> <p></p>"},{"location":"guide/4-getting-started/#reload","title":"Reload","text":"<p>Functionality tbd</p> <p></p> <p>The next button in the side menu is the Things button.</p> <p></p> <p>The Things button will reveal buttons that handle assets and forms in your domain.</p> <p></p>"},{"location":"guide/4-getting-started/#ola","title":"OLA","text":"<p>The OLA button will either hide/show the Open Library of Assets window, which is where you can download or purchase assets that have been uploaded by other users into our library of open assets.</p> <p></p> <p></p>"},{"location":"guide/4-getting-started/#inventory","title":"Inventory","text":"<p>The Inventory button will either hide/show the Inventory Window which houses all the assets and forms that have been imported into your domain.</p> <p></p> <p></p>"},{"location":"guide/4-getting-started/#forms","title":"Forms","text":"<p>The Forms button will either hide/show the Forms Details window where you can find information on the Form currently selected.</p> <p></p> <p></p> <p>The next button in the Side Menu is the Camera button. The Camera button will recenter your camera back to the camera origin.</p> <p></p> <p>The button following this is the Hide/Unhide button. This button will either hide or reveal all open Formabble windows and UI in the scene.</p> <p></p> <p>The last buttons in the Side Menu are the Undo and Redo buttons. Undo will undo your last action while Redo will enact the last action that has been undone. It is important to note that Undo and Redo is only limited to actions done by you and not your members.</p> <p></p>"},{"location":"guide/5-my-first-level/","title":"My First Level Tutorial","text":"<p>The fastest way to learn a new tool is to get your hands dirty and try out yourself. In this chapter we will dive headfirst into Formabble, applying everything the guide has taught you thus far and create your own playable platformer level. Lets get to it!</p>"},{"location":"guide/5-my-first-level/#step-1-creating-your-domain","title":"Step 1 - Creating Your Domain","text":"<p>To create your domain, from the Main Menu, click on New Domain.</p> <p></p> <p>After a few seconds, you should be greeted by a fresh empty domain. Congratulations you have created your first domain!</p> <p></p>"},{"location":"guide/5-my-first-level/#step-2-importing-assets","title":"Step 2 - Importing Assets","text":"<p>Assets are the pieces to the jigsaw that is a level. Thus before we start creating our level, we have to get our pieces ready. You can find all the assets that will be required and are to be imported here. The first asset we will import is the \u201cmain-brain\u201d. This asset will act as the control center for our level, coordinating and linking all the other pieces. To import the \"main-brain\", first, drag your asset from your file explorer into your Domain Inventory window. The Import Asset window will appear. Next, click on Import.</p> <p></p> <p>Change the Domain Inventory category to Scripts.</p> <p></p> <p>You should see the \u201cmain-brain.shs\u201d inside your Domain Inventory now.</p> <p></p> <p>Next, formalize the main-brain by clicking on the Formalize Button.</p> <p></p> <p>Some in-game UI will appear on your screen. This is because main-brain is a form that has some ui-behavior. You should also see the main-brain form on your Domain Forms list.</p> <p></p> <p></p> <p>Well done! You have just inserted your first piece. The next step is to import all the other assets that we will need for our level.</p>"},{"location":"guide/5-my-first-level/#step-3-adding-assets-with-references","title":"Step 3 - Adding Assets with References","text":"<p>The next pieces to import would be the floor tiles which will act as platforms for our game. Let\u2019s start with floor-tile-1-START.</p> <p>Similar to how we imported the main-brain , click on import and import floor-tile-1-START from the folder.</p> <p>Once you have imported floor-tile-1-START and try to formalize it, you will realize that something is wrong.</p> <p></p> <p>Notice that it is formalized as a failed form. This means that there is something wrong with the asset\u2019s script and it did not formalize properly. Specifically for this case, floor-tile-1-START has a reference that we have not added yet.</p> <p>In floor-tile-1-START, we are accessing the global variables set by main-brain. To access these global variables , we need to ensure that the floor-tile-1-START asset is referencing the main-brain asset properly. To fix this, we have to add main-brain as a reference.</p> <p>First click on floor-tile-1-START in the Domain Inventory Window and then click on Edit.</p> <p></p> <p>Upon clicking on Edit, you will be greeted with the Edit Asset window.</p> <p></p> <p>From floor-tile-1-START \u2019s Edit Asset window, click on the References toggle to see all the assets that floor-tile-1-START \u2018s references.</p> <p></p> <p>Currently, the References list is empty. To populate it, drag the main-brain asset from the Domain Inventory into the References list.</p> <p></p> <p>You should see that floor-tile-1-START asset is now referencing main-brain.</p> <p>Lastly, click on the Save button, to save your changes.</p> <p></p> <p>Now try to Formalize floor-tile-1-START again. You should see a green tile!.</p> <p></p> <p>The next asset that we are going to import is floor-tile-2-END. First click on Import.</p> <p></p> <p>Next from the File Manager window, navigate to where your assets were downloaded and click on Open.</p> <p></p> <p>floor-tile-2-END is similar to floor-tile-1-START, in that floor-tile-2-END too also has to be fixed before it can be formalized properly. Like floor-tile-1-START, it also references main-brain. We can also add references to scripts from the Import Asset window which should have popped up on the screen.</p> <p>From this window, we can drag assets into the References list to add references. Drag the main-brain asset into the floor-tile-2-END reference list and click on Import.</p> <p></p> <p>Click on Formalize and you should see red tile!</p> <p></p> <p>The rest of the pieces need to have their references added similar to how floor-tile-1-START and floor-tile-2-END were fixed (with minor variations). Try to fix them yourself, or if you need help, click on the appropriate toggles below to view the proper steps for each asset.</p> floor-tile-3-DESTROYABLE <p>floor-tile-3-DESTROYABLE also references main-brain and needs its short ids fixed.</p> <ol> <li> <p>From the Domain Inventory window click on import and import in floor-tile-3-DESTROYABLE</p> </li> <li> <p>From the Import Assets window, add main-brain into the reference list and click on Import.</p> </li> <li> <p>Click on Save.</p> </li> </ol> <p></p> floor-tile-4-UNDESTROYABLE <p>floor-tile-4-UNDESTROYABLE does not reference main-brain, however it still dispatches information to tiself and thus needs its short-Ids fixed.</p> <ol> <li> <p>From the Domain Inventory window click on import and import in floor-tile-4-UNDESTROYABLE</p> </li> <li> <p>From the Import Assets window, click on Import.</p> </li> <li> <p>Click on Save.</p> </li> </ol> <p></p> cubeFace1 <p>cubeFace1 is a glb mesh that will be referenced in player-1</p> <ol> <li> <p>From the Domain Inventory window click on import and import in cubeFace1</p> </li> <li> <p>From the Import Assets window, click on Import.</p> </li> </ol> cubeFace2 <p>cubeFace2 is a glb mesh that will be referenced in player-2</p> <ol> <li> <p>From the Domain Inventory window click on Import and import in cubeFace2.glb</p> </li> <li> <p>From the Import Assets window, click on Import.</p> </li> </ol> player-1 <p>player-1 references cubeFace1.</p> <ol> <li> <p>From the Domain Inventory window click on Import and import in player-1</p> </li> <li> <p>From the Import Assets window, add cubeFace1 into the reference list and click on Import.</p> </li> <li> <p>Click on Save.</p> </li> </ol> <p></p> player-2 <p>player-2 references cubeFace2 and also dispatches information to the different behaviors in itself.</p> <ol> <li> <p>From the Domain Inventory window click on import and import in player-2</p> </li> <li> <p>From the Import Assets window, add cubeFace2 into the reference list and click on import.</p> </li> <li> <p>Click on Save.</p> </li> </ol> <p></p> <p>Congratulations! You have successfully imported all your assets!</p>"},{"location":"guide/5-my-first-level/#step-4-making-your-level","title":"Step 4 - Making your level.","text":"<p>Now that you have all your pieces, we can start designing our level. Before we start creating our architectural masterpieces, lets start small first, to see how the different pieces work. main-brain should have already been formalized, if it is not formalized, formalize main-brain first.</p> <p>1- First formalize floor-tile-4-UNDESTROYABLE.</p> <p></p> <p>2- Next click on the freshly formalized form to bring up its Form Details window.</p> <p></p> <p>3- From the Form Details window, you can manipulate the form\u2019s transformations and also its exposed variables. Change the form\u2019s X translation to 2. You can do this either through the Form Details window or through the form\u2019s Translation Gizmo.</p> <p></p> <p>4- From the Form Gizmo, click on the Duplicate Icon to duplicate the form.</p> <p></p> <p>5- Give the duplicated form a -2 X-axis translation. These two platforms will serve as the starting point for our player-1 and player-2 cubes.</p> <p></p> <p>6- Now formalize floor-tile-1-START.</p> <p></p> <p>7- Give this formalize floor-tile-1-START an xyz translation of (2 0 -2).</p> <p></p> <p>8- Duplicate floor-tile-1-START and give it a xyz translation of (-2 0 -2)</p> <p></p> <p>9- Next, formalize floor-tile-3-DESTROYABLE and give it an xyz translation (2 0 -4)</p> <p></p> <p>10- Duplicate floor-tile-3-DESTROYABLE and give it an xyz translation of (-2 0 -4)</p> <p></p> <p>11- Next formalize floor-tile-4-END and give it a translation of (-2 0 -6)</p> <p></p> <p>12- Next duplicate floor-tile-4-END and give it a translation of (-2 0 -6)</p> <p></p> <p>13- Under Physics Subsystem on the Form Details window, edit the mode of all the tiles on the left to 2. (The way the tiles are coded is that their modes dictate whether they will register collisions from player-1 or player-2. Thus the tiles on the left will be for player-2.)</p> <p></p> <p>14- Click Play (the button on the top right) and you will see both player-1 and player-2 spawn.</p> <p></p> <p></p> <p>15- player-1 is controlled by using the arrow keys while player-2 can be controlled by using WASD keys. Move player-1 and player-2 onto the green floor-tile-1-START tile. Upon collision with the floor-tile-1-START tile, the timer will start counting.</p> <p></p> <p>16- Now move player-1 and player-2 to the floor-tile-2-END tiles. You will see firstly, the time counter will stop counting. Secondly, there will be a High Score listed on the High Score window. And lastly, you will see the two floor-tile-3-DESTROYABLE tiles slowly disappear.</p> <p></p> <p>17-  Now click reset to reset the player\u2019s positions, the tiles, the time and the high score.</p> <p>Great! Now that we know what all the pieces do, you can start making the level!</p>"},{"location":"guide/5-my-first-level/#step-5-making-your-level","title":"Step 5- Making your level","text":"<p>With the basic pieces in place, you can manipulate and duplicate these pieces to create your very own level! Unleash your creativity and go wild! Below you will see how we have decided to design our level. The way it is to be played is for one player to control both player-1 and player-2 and try to get them from the start tiles to the end tiles in the shortest amount of time possible.</p> <p></p>"},{"location":"guide/6-useful-shards/","title":"Useful FBL Shards","text":"<p>Welcome to the comprehensive guide to Formabble's suite of Formabble specific Shards\u2014your essential resource for unlocking the full potential of our game creation system. Whether you're a seasoned developer or just starting your journey into game design, this documentation is designed to provide you with a detailed understanding of the powerful tools at your disposal. Through clear and concise definitions and code examples, our aim is to help you understand the context and application of these shards, so that you can integrate them into your projects effectively. Let's dive into the different Formabble specific shards that can help shape your imagination, into reality!</p>"},{"location":"guide/6-useful-shards/#fbl-formalize","title":"Fbl Formalize","text":"<p>The first step of creating any game is to place your meticulously created pieces into the domain. Normally, you can easily do this using the convenient Formalize button, however you can also do this in-script using <code>Fbl.Formalize</code>.</p> Input/Output/Parameter Data Type Description Input Table Takes in a table that includes a variable that is to be dispatched and the specific behavior to dispatch to. Example table: Parameter - FormID: String Takes in the long id or name of the form that you want to formalize as a string. The form long id can be found in the Domain Inventory Window. Parameter - Wait Boolean Dictates whether the the program will wait for the form to fully formalize before resuming. Output Int16 Returns the formalized form\u2019s UUID as an Int16 <p></p> <p>Example</p> <pre><code>{Graphics: {\"anIIEJZ5Z/direction\": 1}}\nFbl.Formalize(\"ndnkXDDGZkYOruIIEJZ5Z\" Wait: true)\n= form-uuid\n</code></pre> <p>In this example, direction is being assigned a value of 1 and then is then set in the form \"ndnkXDDGZkYOruIIEJZ5Z\" that is being formalized. The program then waits for the form to be fully formalized, before updating the variable form-uuid with the output of <code>Fbl.Formalize</code>. (If Wait is set to false, it will update form-uuid before the new form is fully formalized. There are many scenarios where you would want a script to formalize forms into the domain instead of using the formalize button. Having a mob spawner to spawn mobs into the map for example, or having a tower spawn fireballs to strike at the players.</p>"},{"location":"guide/6-useful-shards/#fbldeform","title":"Fbl.Deform","text":"<p>Like two sides of a coin, the ability to create also comes with the ability to destroy. Similar to formalizing, while there are convenient buttons to easily delete forms, you can also delete forms in-script using <code>Fbl.Deform</code>.</p> Input/Output/Parameter Data Type Description Input Int16 Takes in the form UUID of form to be destroyed as an int16. If input is none, the form with the script attached will be the one to be deformed. Parameter - FormID: tbd tbd Parameter - Wait Boolean Dictates whether the the program will wait for the form to fully formalize before resuming. Output Int16 Returns the formalized form\u2019s UUID as an Int16 <p></p> <p>Example</p> <pre><code>form-uuid | Fbl.Deform\n</code></pre> <p>Continuing from the example in Fbl.Formalize, this example is deleting the form with the Form UUID stored in the variable form-uuid. In other words this example would delete the form formalized in the example in Fbl.Formalize.</p> <p>Similarly, there are also numerous scenarios where you would want to delete a form in-script. Using <code>Fbl.Deform</code> to delete a monster when its health reaches zero or deleting a bullet once it has made contact for example.</p> <p>fbl/pose</p> <p>Naturally, just placing forms into a scene does not make a game. <code>fbl/pose</code> gives creators the ability to manipulate the translation, rotation and the scale of a form. <code>fbl/pose</code> in essence is a table with the transform, rotation and scale keys. To control the object\u2019s transformation, one simply has to grab the appropriate values from the respective keys. Instead of using <code>fbl/pose | Take(scale)</code>, you can instead use <code>fbl/scale</code> to directly take the form\u2019s scale. <code>fbl/rotation</code>and <code>fbl/translation</code> can be used the same way . Do note that <code>fbl/pose</code> is only available in Graphics behavior.</p> <p>Example</p> <pre><code>fbl/rotation | Math.Rotation &gt;  rot-mat\nfbl/translation | Math.Translation &gt; tsl-mat\nfbl/scale | Math.Scaling &gt; scl-mat\n\ntsl-mat | Math.MatMul(rot-mat) | Math.MatMul(scl-mat) &gt; transform-matrix\n\ntransform-matrix\nGFX.glTF(Copy: asset/r0)\n@fbl/draw([])\n</code></pre> <p>In this example, we are taking rotation, translation and scale from <code>fbl/pose</code> directly by using <code>fbl/rotation</code>, <code>fbl/translation</code> and <code>fbl/scale</code> respectively. We are then using <code>Math.Rotation</code>, <code>Math.Translation</code> and <code>Math.Scaling</code> to create a rotation matrix (rot-mat), a translation matrix (tsl-mat) and a scale matrix (scl-mat). These matrixes are then put together using <code>Math.Mul</code> to create a transformation matrix (transform-matrix) which is in-turn fed into GFX.glTF to render the a 3D asset. Using <code>fbl/pose</code> to control the transformation of a form is good practice as it enables one to control said transformation using the form gizmos.</p>"},{"location":"guide/6-useful-shards/#fblfetch","title":"Fbl.Fetch","text":"<p>Forms in Formabble are not isolated individuals that exist in a void. They can interact with each other seamlessly. One way to have forms interact is through <code>Fbl.Fetch</code>. It allows a form to grab variables from another behavior within the same form or from another form. Do note that <code>Fbl.Fetch</code>, the first time it is called, it will suspend the program momentarily till the variable is successfully fetched , subsequently it will return the most recent value.</p> Input/Output/Parameter Data Type Description Input Int16 If the form wants to fetch a variable from another form, place the Form UUID of the form to take the variable from as an Int16 as input. If you are fetching from another behavior in the same form, use none as input. Parameter - Behavior: WirePoolType::Enum The behavior to grab the variable from. Eg. WirePoolType::UI, WirePoolType::Logic, WirePoolType::Graphics, WirePoolType::Physics Parameter - Name: String short id of the form/name of the variable to fetch Parameter - Key: String Optional parameter for if the variable being fetched is a table Parameter - NoCache: Boolean Cache or not to cache variable states. Parameter - Silent: Boolean To Ignore or not Ignore failures without logging Output Any Outputs the variable being fetched. <p></p> <p>Example</p> <pre><code>none\nFbl.Fetch(Behavior: WirePoolType::UI Name: \"aZmg4RodY/equipment-index\")\nExpectInt &gt; equipment-index\n</code></pre> <p>In this example, we are fetching the variable equipment-index from the form aZmg4RodY from UI behavior. Since the output of the <code>Fbl.Fetch</code> is type Any, we need an <code>ExpectInt</code> shard before pushing it into the variable equipment-index. If the variable being fetched from is housed in another form, replace none with the Form UUID of the form that hosts said variable. <code>Fbl.Fetch</code> can be used useful when there is a main form that acts as a logic center where every other form in the level can fetch data from.</p> <p>Creating Namespaces</p> <p>It is immportant to note that by creating a name space for a variable. It eliminates the need for a short id to use <code>Fbl.Fetch</code></p> <p>Example</p> <pre><code>@wire(main-graphics-wire {\n  Once({\n    10 &gt;= translation\n  })\n\n  none\n  Fbl.Fetch(Behavior: WirePoolType::Physics Name: \"physics/translation\")\n\n  &gt; translation | Log(\"translation\")\n})\n\n@wire(main-physics-wire {\n  Once({\n    0 &gt;= physics/translation\n  })\n})\n</code></pre> <p>This way, we will not have to replace the short-id's every single time we want to use our assets that use <code>Fbl.Fetch</code> making them versatile and re-usable.</p>"},{"location":"guide/6-useful-shards/#fbldispatch","title":"Fbl.Dispatch","text":"<p>On the flipside, <code>Fbl.Dispatch</code> can be used to send variables from a behavior in a form to another behavior in the same from or another form. Similarly, like <code>Fbl.Fetch</code>, <code>Fbl.Dispatch</code>, the first time it is called, will suspend the program momentarily till the variable is successfully dispatched, subsequently it will return the most recent value.</p> Input/Output/Parameter Data Type Description Input Any Variable to be dispatched Parameter - Form: Int16/Int Form UUID or Enitty Id of the form to dispatch to. Form UUID can be found in the Form Details window or by using Fbl.FormId. Omit this parameter if sending variable to different behavior within the same form. Parameter - Behaviour: WirePoolType::Enum The behavior to dispatch the variable to. Eg. WirePoolType::UI, WirePoolType::Logic, WirePoolType::Graphics, WirePoolType::Physics Parameter - Name: String The variable name in the dispatch destination to update. Parameter - NoCache: Boolean Cache or not to cache variable states. Output none none <p></p> <p>Example</p> <pre><code>direction | \nFbl.Dispatch (Form: form-uuid Behavior: WirePoolType::Graphics Name:\"anIIEJZ5Z/direction\")\n</code></pre> <p>Here, we are dispatching the variable direction to the form with a Form UUID stored in the variable form-uuid. It is updating the variable direction in Graphics behavior. Continuing from the example in <code>Fbl.Formalize</code>, this example will send the variable direction to the form that has just been formalized. If you are sending variables from different behaviors within the same form, omit the <code>Form:</code> parameter. <code>Fbl.Dispatch</code> is especially when sending transformation-matrixes from Graphics behavior to Physics behavior as a psuedo way of making <code>fbl/pose</code> available in Physics behavior.</p> <p>Creating Namespaces</p> <p>It is immportant to note that by creating a name space for a variable. It eliminates the need for a short id to use <code>Fbl.Dispatch</code></p> <p>Example</p> <pre><code>@wire(main-graphics-wire {\n  Once({\n    10 &gt;= translation\n  })\n  translation\n  Fbl.Dispatch(Behavior: WirePoolType::Physics Name: \"physics/translation\")\n})\n\n@wire(main-physics-wire {\n  Once({\n    0 &gt;= physics/translation\n  })\n\n  physics/translation | Log(\"physics/translation\")\n})\n</code></pre> <p>This way, we will not have to replace the short-id's every single time we want to use our assets that use <code>Fbl.Dispatch</code> making them versatile and re-usable.</p>"},{"location":"guide/6-useful-shards/#fblformid","title":"Fbl.FormId","text":"<p><code>Fbl.FormId</code> will return the Form UUID of the form that it is called from. Needless to say, the Form UUID is useful when used in conjunction with the other shards demonstrated above.</p>"},{"location":"guide/7-fbl-samples/","title":"Formabble Samples","text":"<p>Upon loading Formabble, you will see a Sample Domain that has been shared with. This Domain provides a selection of sample forms, each designed to highlight the functionalities and versatility of different Shards within the Formabble environment. These samples however, are more than just demonstrations\u2014they are also practical tools for game creation. We encourage you to interact with these samples. Experimenting with them will offer you a clearer perspective on the potential of Formabble and its Shards. Feel free to also adopt and adapt these samples into your own domain for your creations. This page will provide a summary of what each form demonstrates.</p>"},{"location":"guide/7-fbl-samples/#3d-collision-character","title":"3d-collision-character","text":"<p>This sample renders a 3d-character model and gives it a rigid body that can interact and collide with other rigid bodies using <code>Physics.Cuboid</code>and <code>Physics.Dynamicbody</code>. These shards allows the 3d model to respond to gravity and other forces. We then relay the information provided by the rigid-body from physics-behavior to graphics behavior using fbl-dispatch to update the position of the rendered 3d-model. Formalize \"3d-collision-floor\" and \"3d-collision-dynamic-cube\" along with this sample,to see the different physics bodies interacting with each other.</p>"},{"location":"guide/7-fbl-samples/#3d-collision-dynamic-cube","title":"3d-collision-dynamic-cube","text":"<p>This sample renders a cube and gives it a rigid body that can interact and collide with other rigid bodies using <code>Physics.Cuboid</code> and <code>Physics.Dynamicbody</code>. These shards allows the 3d cube to respond to gravity and other forces. We then relay the information provided by the rigid body from physics-behavior to graphics behavior using <code>Fbl.Dispatch</code> to update the position of the rendered cube. Formalize \"3d-collision-floor\" and \"3d-collision-character\" along with this sample, to see the different physics bodies interacting with each other.</p>"},{"location":"guide/7-fbl-samples/#3d-collision-floor","title":"3d-collision-floor","text":"<p>This sample renders render a flat cube to act as a floor and gives it a rigid body using <code>Physics.Cuboid</code> and <code>Physics.StaticBody</code>. This allows it to affect other <code>Physics.Dynamic</code> bodies in the scene. Use <code>Physics.KinematicBody</code> instead if you want the floor to be moveable. Formalize \"3d-collision-character\" and \"3d-collision-dynamic-cube\" along with this sample to see the different physics bodies interacting with each other.</p>"},{"location":"guide/7-fbl-samples/#angle-movement-sample","title":"angle-movement-sample","text":"<p>This sample formalizes a 2D-ship. This ship moves with acceleration and its movement is influenced by the ship's rotation using trigonometry shards such as <code>Math.Cos</code> and <code>Math.Sin</code>.</p>"},{"location":"guide/7-fbl-samples/#animation-2d-sample","title":"animation-2d-sample","text":"<p>In this sample, we demonstrate how to create a 2d-animation. We do this, by placing the different frames of our 2d-animation into a sequence and cycling through the image that is rendered using <code>UI.Image</code>.</p>"},{"location":"guide/7-fbl-samples/#animation-3d-sample","title":"animation-3d-sample","text":"<p>In this sample, we render a 3d model with animations. To do this, we take the different animations that are present in the gltf file and tell the AnimationController in <code>GFX.glTF</code> whih specific animation to play.</p>"},{"location":"guide/7-fbl-samples/#button-input-sample","title":"button-input-sample","text":"<p>This sample we demonstrates how a 2d animated character can be made to move using button inputs. We do this by using <code>Input.KeyDown</code> and <code>Input.KeyUp</code> shards to change the state of our character. We then dispatch this information from input-behavior which governs input to ui-behavior which governs rendering our image.</p>"},{"location":"guide/7-fbl-samples/#conditionals-sample","title":"conditionals-sample","text":"<p>This sample explores how conditionals can be created using <code>If</code> and When shards alongside comparison shards like <code>Is</code>, <code>IsMore</code>, <code>IsLess</code>, <code>IsLessEqual</code>, <code>IsMoreEqual</code>. Conditionals are the bread and butter to controlling game behavior.</p>"},{"location":"guide/7-fbl-samples/#dispatch-communication-between-behavior","title":"dispatch-communication-between-behavior","text":"<p>This sample demonstrates how we can establish a two-way communication between ui-behavior and logic-behavior using <code>Fbl.Dispatch</code> and <code>Fbl.Fetch</code>. This allows ui-behavior to communicate with logic-behavior to control the equipment table shown on screen. <code>Fbl.Dispatch</code> is a shard that sends information to a specific behavior within the same form or another form. <code>Fbl.Fetch</code> on the other hand is a shard that retrieves information from another behavior within the same form or another form.</p>"},{"location":"guide/7-fbl-samples/#dispatchvsspawn","title":"DispatchVsSpawn","text":"<p>This sample demonstrates the differences between <code>Detach</code> and <code>Spawn</code> shards. Both of these shards provide the means to run wires asynchronously from the main parent wire. Both <code>Detach</code> and <code>Spawn</code> will attach its specified wire in the same mesh and behavior as it's parent wire. The key difference is that only one unique wire can be detached at any given time. If the same wire were to be detached again, the shard will be ignored. In contrast, <code>Spawn</code> will and can create an number number of unique copies of the specified wire.</p>"},{"location":"guide/7-fbl-samples/#dovsstepsample","title":"DoVsStepSample","text":"<p>This sample demonstrates the differences between <code>Do</code> and <code>Step</code> shards. Both <code>Do</code> and <code>Step</code> shards will execute a specified wire. However, <code>Do</code> will execute a shard to its completion, even if there are <code>Pause</code> shards within the wire it is executing. <code>Step</code> on the otherhand, will execute the specified wire, but will relinquish control back to the parent wire if it was paused. When the wire is stepped again, its state is progressed by continuing the wire from where it was last left.</p>"},{"location":"guide/7-fbl-samples/#fbl-formalize","title":"fbl-formalize","text":"<p>This sample demonstrates how we can have a form that formalizes other forms using <code>Fbl.Formalize</code>.</p>"},{"location":"guide/7-fbl-samples/#fbl-formalize-mascot","title":"fbl-formalize-mascot","text":"<p>This is the sample that \"fbl-formalize\" uses to demonstrate formalizing other forms using <code>Fbl.Formalize</code>. It is a 3-character with animations that will move left or right when the left or right directional keys are pressed.</p>"},{"location":"guide/7-fbl-samples/#forms-interaction-1","title":"forms-interaction-1","text":"<p>In this sample we demonstrate how \"forms-interaction-1\" interacts and sends instructions to \"forms-interaction-2\". We achieve this by using the output from <code>Fbl.Formalize</code> to obtain the form uuid, and subsequently using this uuid as input for <code>Fbl.Dispatch</code> to send instructions to that specific form. We also use this uuid in <code>Fbl.Fetch</code> to set up a two way communication between the two forms.</p>"},{"location":"guide/7-fbl-samples/#forms-interaction-2","title":"forms-interaction-2","text":"<p>In this sample we are showcasing how \"forms-interaction-1\" can interact and send instructions to \"forms-interaction-2\". \"forms-interaction-2\" is a 3D character that receives the instructions from \"forms-interaction-1\". It will move left, or right or stand still depending on the instruction received from \"forms-interaction-1\".</p>"},{"location":"guide/7-fbl-samples/#load-2d-asset","title":"load-2d-asset","text":"<p>This sample demonstrates how to render 2D assets using the <code>UI.Image</code> shard in ui-behavior.</p>"},{"location":"guide/7-fbl-samples/#load-3d-asset","title":"load-3d-asset","text":"<p>In this sample, we render a 3D model using the <code>GFX.glTF</code> shard. <code>GFX.glTF</code> requires a transformation matrix to render the 3d model. To create this  transformation matrix, we use <code>fbl/translation</code>, <code>fbl/rotation</code> and <code>fbl/scale</code> to provide the translation, rotation and scale values required.</p>"},{"location":"guide/7-fbl-samples/#load-other-forms-assets","title":"load-other-forms-assets","text":"<p>This sample demonstrates how a form can reference other forms. Here, we reference \"form-to-load-defense\" and \"form-to-load-attack\" to have our character attack and defend accordingly. We do this by setting up a namespaces for our <code>@template</code> and <code>@define</code> in \"form-to-load-defense\" and \"form-to-load-attack\". Ensure that \"form-to-load-defense\" and \"form-to-load-attack\" are added to the reference list of this form. You now can call any template, definitions and wires from the referenced forms.  Splitting up your code into different forms that reference each other is a good way to organize your code, especially for bigger and more complex projects.</p>"},{"location":"guide/7-fbl-samples/#matrix-transformation-sample","title":"matrix-transformation-sample","text":"<p>This sample we demonstrates how we can move a 3d model by changing the translation, rotation or scale of its transformation matrix.</p>"},{"location":"guide/7-fbl-samples/#resume-wire-sample","title":"resume-wire-sample","text":"<p>This sample shows how we can pause and resume the state of a wire using the <code>Suspend</code> and <code>Resume</code> shards. Do note that Restart can also be used in place of <code>Resume</code>. However unlike <code>Resume</code>, which resumes the wire from its current suspended state, Restart runs the wire from the beginning.</p>"},{"location":"guide/7-fbl-samples/#scene-management","title":"scene-management","text":"<p>In this sample we use <code>Detach</code> and <code>Stop</code> to create a scene management system. When a wire is detached, it is detached in the same behavior as the wire it is being detached from. This <code>Detach</code> and <code>Stop</code> combo is useful for making levels and map management systems. It is important to note however, that the since the previous wire is stopped, its state is not preserved. To preserve the state of a wire before switching, one can use <code>SwitchTo</code> instead, which suspends the current wire before switching to the wire specified. Also note, when stopping a wire, remember not to <code>Stop</code> the parent wire where the detached wire is detached from. Stopping the parent wire will deformalize the form and stop all detached wires.</p>"},{"location":"guide/7-fbl-samples/#form-to-load-defense","title":"form-to-load-defense","text":"<p>This form is used and referenced in \"load-other-forms-assets\". It contains a definition that is set up using <code>@define</code> and called in \"load-other-forms-assets\".</p>"},{"location":"guide/7-fbl-samples/#form-to-load-attack","title":"form-to-load-attack","text":"<p>This form is used and referenced in \"load-other-forms-assets\".  It contains a template that is set up using <code>@template</code> and called in \"load-other-forms-assets\".</p>"},{"location":"guide/7-fbl-samples/#spawn-sample","title":"spawn-sample","text":"<p>This sample uses <code>Spawn</code> to schedule multiple bullet wires. Similar to <code>Detach</code>, <code>Spawn</code> presents a way for a wire to be run asynchronously. But unlike <code>Detach</code>, where only one wire can be detached, an unlimited number of bullet wires can be spawned using <code>Spawn</code>. It is also worth noting that spawning wires within a single form is more memory-efficient compared to formalizing multiple forms using <code>Fbl.Formalize</code>.</p>"},{"location":"guide/7-fbl-samples/#step-sample","title":"step-sample","text":"<p>In this sample we are using <code>Step</code> to execute wires \"monster-1\", \"monster-2\" and \"monster-3\". Step will progress the state of the stepped wires before relinquishing control back to the parent wire.</p>"},{"location":"guide/7-fbl-samples/#ui-sample","title":"ui-sample","text":"<p>This sample showcases the different UI shards that are available for use. Do note that most UI shards require being wrapped in a UI Parent shard like <code>UI.Window</code> and <code>UI.Area</code> to function.</p>"},{"location":"guide/8-fbl-glossary/","title":"Formabble Glossary","text":"<p>In this page you will find the definitions of common Fbl terminology. Alongside its description, you will also find correlations with its counterparts in other popular game creation tools. This is to help new users transition into using the Formabble lingo more easily.</p> <p>Asset: The resources necessary to build a game. Assets have to be imported into the domain. Assets can either be a texture, mesh, script or an audio.</p> <p>Audio: Sound or music assets. Formats accepted- .mp3 , .ogg. Deform/Delete/Destroy: To remove a form from a domain.</p> <p>Domain: The world space where creators build their game. Similar to Unity or Unreal Engine\u2019s scene.</p> <p>Domain Inventory: A list of assets that have been imported into a domain.</p> <p>Entity ID: The id of a form on the Domain Form list Form: An asset that has been formalized into a domain</p> <p>Fbl: Short for Formabble</p> <p>Formalize: Do add a script into a domain.</p> <p>Form UUID: The unique constant Id of a form. Is a an Int16 data type </p> <p>Long Id: The unique id of an asset that has been uploaded to a domain. The Id is unique to the domain. Has a String data type.</p> <p>Mesh: A 3D asset. Formats accepted - .gltf , .glb</p> <p>Reform: To momentarily deform and get formalized again right after. Usually happens when an asset is updated.</p> <p>References: Other assets that an asset refers to in its code.</p> <p>References List: A list of references that an asset refers to in its code. Can be found in the Edit Asset Window.</p> <p>Scripts: Coded assets that dictate game mechanics, behaviors, and interactive elements. Formats accepted - .shs</p> <p>Short Id: The abbreviated id of an asset that has been uploaded to a domain. The id is unique to the domain. Has a String data type.</p> <p>Texture: A 2d Asset. Format accepted- .jpg, .png</p> <p>Update Asset: Clicking the Update button found in the Edit Asset window  updates an asset. This causes all forms using that asset to reform.</p>"},{"location":"shards/enums/Anchor/","title":"Anchor","text":"Value Description <code>TopLeft</code> Top left corner. <code>Left</code> Middle left. <code>BottomLeft</code> Bottom left corner. <code>Top</code> Top middle. <code>Center</code> Center. <code>Bottom</code> Bottom middle. <code>TopRight</code> Top right corner. <code>Right</code> Middle right. <code>BottomRight</code> Bottom right corner."},{"location":"shards/enums/BPP/","title":"BPP","text":"Value Description <code>u8</code> <code>u16</code> <code>f32</code>"},{"location":"shards/enums/BindGroupId/","title":"BindGroupId","text":"Value Description <code>View</code> <code>Draw</code>"},{"location":"shards/enums/BlendFactor/","title":"BlendFactor","text":"Value Description <code>Zero</code> <code>One</code> <code>Src</code> <code>OneMinusSrc</code> <code>SrcAlpha</code> <code>OneMinusSrcAlpha</code> <code>Dst</code> <code>OneMinusDst</code> <code>DstAlpha</code> <code>OneMinusDstAlpha</code> <code>SrcAlphaSaturated</code> <code>Constant</code> <code>OneMinusConstant</code>"},{"location":"shards/enums/BlendOperation/","title":"BlendOperation","text":"Value Description <code>Add</code> <code>Subtract</code> <code>ReverseSubtract</code> <code>Min</code> <code>Max</code>"},{"location":"shards/enums/BranchFailure/","title":"BranchFailure","text":"Value Description <code>Everything</code> <code>Known</code> <code>Ignore</code>"},{"location":"shards/enums/BufferAddressSpace/","title":"BufferAddressSpace","text":"Value Description <code>Uniform</code> <code>Storage</code> <code>StorageRW</code>"},{"location":"shards/enums/BuiltinFeatureId/","title":"BuiltinFeatureId","text":"Value Description <code>Transform</code> Add basic world/view/projection transform <code>BaseColor</code> Add basic color from vertex color and (optional) color texture <code>VertexColorFromNormal</code> Outputs color from vertex color <code>Wireframe</code> Modifies the main color to visualize vertex edges <code>Velocity</code> Outputs object velocity into the velocity global &amp; output <code>AlphaBlend</code> Simple feature that enables alpha blending"},{"location":"shards/enums/BuiltinMeshType/","title":"BuiltinMeshType","text":"Value Description <code>Cube</code> <code>Sphere</code> <code>Plane</code>"},{"location":"shards/enums/ColorMask/","title":"ColorMask","text":"Value Description <code>None</code> <code>Red</code> <code>Green</code> <code>Blue</code> <code>Alpha</code> <code>All</code>"},{"location":"shards/enums/CompareFunction/","title":"CompareFunction","text":"Value Description <code>Undefined</code> <code>Never</code> <code>Less</code> <code>LessEqual</code> <code>Greater</code> <code>GreaterEqual</code> <code>Equal</code> <code>NotEqual</code> <code>Always</code>"},{"location":"shards/enums/DependencyType/","title":"DependencyType","text":"Value Description <code>Before</code> <code>After</code>"},{"location":"shards/enums/DomainRunMode/","title":"DomainRunMode","text":"Value Description <code>Edit</code> Indicates the domain is in edit mode <code>PlayExclusive</code> Indicates the domain is in exclusive play mode <code>PlayLocal</code> Indicates the domain is in local play mode <code>PlayRemote</code> Indicates the domain is in remote play mode"},{"location":"shards/enums/FilterMode/","title":"FilterMode","text":"Value Description <code>Nearest</code> <code>Linear</code>"},{"location":"shards/enums/FontFamily/","title":"FontFamily","text":"Value Description <code>Proportional</code> <code>Monospace</code>"},{"location":"shards/enums/IfExists/","title":"IfExists","text":"Value Description <code>Fail</code> <code>Skip</code> <code>Overwrite</code> <code>Update</code>"},{"location":"shards/enums/Interpolation/","title":"Interpolation","text":"Value Description <code>Linear</code> <code>Step</code> <code>Cubic</code>"},{"location":"shards/enums/LayoutAlign/","title":"LayoutAlign","text":"Value Description <code>Min</code> Left or top alignment for e.g. anchors and layouts. <code>Left</code> Left alignment for e.g. anchors and layouts. <code>Top</code> Top alignment for e.g. anchors and layouts. <code>Center</code> Horizontal or vertical center alignment for e.g. anchors and layouts. <code>Max</code> Right or bottom center alignment for e.g. anchors and layouts. <code>Right</code> Right alignment for e.g. anchors and layouts. <code>Bottom</code> Bottom center alignment for e.g. anchors and layouts."},{"location":"shards/enums/LayoutDirection/","title":"LayoutDirection","text":"Value Description <code>LeftToRight</code> Describes a horizontal layout where its contents are arranged from the left to the right. <code>RightToLeft</code> Describes a horizontal layout where its contents are arranged from the right to the left. <code>TopDown</code> Describes a vertical layout where its contents are arranged from the top to the bottom. <code>BottomUp</code> Describes a vertical layout where its contents are arranged from the bottom to the top."},{"location":"shards/enums/LayoutFrame/","title":"LayoutFrame","text":"Value Description <code>Widgets</code> Use the frame styling for grouping widgets together. <code>SideTopPanel</code> Use the frame styling for a side top panel. <code>CentralPanel</code> Use the frame styling for the central panel. <code>Window</code> Use the frame styling for a window. <code>Menu</code> Use the frame styling for a menu. <code>Popup</code> Use the frame styling for a popup. <code>Canvas</code> Use the frame styling for a canvas to draw on. <code>DarkCanvas</code> Use the frame styling for a dark canvas to draw on."},{"location":"shards/enums/LogLevel/","title":"LogLevel","text":"Value Description <code>Trace</code> <code>Debug</code> <code>Info</code> <code>Warning</code> <code>Error</code>"},{"location":"shards/enums/MarkerShape/","title":"MarkerShape","text":"Value Description <code>Circle</code> Display a point as a circle. <code>Diamond</code> Display a point as a diamond. <code>Square</code> Display a point as a square. <code>Cross</code> Display a point as a cross. <code>Plus</code> Display a point as a plus sign. <code>Up</code> Display a point as an arrow pointing upwards. <code>Down</code> Display a point as an arrow pointing downwards. <code>Left</code> Display a point as an arrow pointing to the left. <code>Right</code> Display a point as an arrow pointing to the right. <code>Asterisk</code> Display a point as an asterisk."},{"location":"shards/enums/Mean/","title":"Mean","text":"Value Description <code>Arithmetic</code> <code>Geometric</code> <code>Harmonic</code>"},{"location":"shards/enums/ModifierKey/","title":"ModifierKey","text":"Value Description <code>None</code> <code>Shift</code> <code>Alt</code> <code>Primary</code> <code>Secondary</code>"},{"location":"shards/enums/Order/","title":"Order","text":"Value Description <code>Background</code> Painted behind all floating windows. <code>PanelResizeLine</code> Special layer between panels and windows. <code>Middle</code> Normal moveable windows that you reorder by click. <code>Foreground</code> Popups, menus etc that should always be painted on top of windows. Foreground objects can also have tooltips. <code>Tooltip</code> Things floating on top of everything else, like tooltips. You cannot interact with these. <code>Debug</code> Debug layer, always painted last / on top."},{"location":"shards/enums/OrthographicSizeType/","title":"OrthographicSizeType","text":"Value Description <code>Horizontal</code> <code>Vertical</code> <code>PixelScale</code>"},{"location":"shards/enums/PopupLocation/","title":"PopupLocation","text":"Value Description <code>Below</code> Below. <code>Above</code> Above."},{"location":"shards/enums/ProgrammableGraphicsStage/","title":"ProgrammableGraphicsStage","text":"Value Description <code>Vertex</code> <code>Fragment</code>"},{"location":"shards/enums/RequiredAttributes/","title":"RequiredAttributes","text":"Value Description <code>Tangent</code> Require mesh tangents to be available"},{"location":"shards/enums/RunWireMode/","title":"RunWireMode","text":"Value Description <code>Inline</code> <code>Async</code> <code>Stepped</code>"},{"location":"shards/enums/ScrollVisibility/","title":"ScrollVisibility","text":"Value Description <code>AlwaysVisible</code> The scroll bars will always be visible. <code>VisibleWhenNeeded</code> The scroll bars will only be visible when needed <code>AlwaysHidden</code> The scroll bars will always be hidden."},{"location":"shards/enums/ShaderFieldBaseType/","title":"ShaderFieldBaseType","text":"Value Description <code>Bool</code> <code>UInt8</code> <code>Int8</code> <code>UInt16</code> <code>Int16</code> <code>UInt32</code> <code>Int32</code> <code>Float16</code> <code>Float32</code>"},{"location":"shards/enums/ShaderLiteralType/","title":"ShaderLiteralType","text":"Value Description <code>Inline</code> Insert shader code directly into current scope <code>Header</code> Insert shader code into header, where it is defined before all shards shader code"},{"location":"shards/enums/SortMode/","title":"SortMode","text":"Value Description <code>Queue</code> <code>Batch</code> <code>BackToFront</code>"},{"location":"shards/enums/TextStyle/","title":"TextStyle","text":"Value Description <code>Small</code> Used when small text is needed. <code>Body</code> Normal labels. Easily readable, doesn't take up too much space. <code>Monospace</code> Same size as [<code>Self::Body</code>], but used when monospace is important (for code snippets, aligning numbers, etc). <code>Button</code> Buttons. Maybe slightly bigger than [<code>Self::Body</code>]. <code>Heading</code> Heading. Probably larger than [<code>Self::Body</code>]."},{"location":"shards/enums/TextureAddressing/","title":"TextureAddressing","text":"Value Description <code>Repeat</code> <code>MirrorRepeat</code> <code>ClampToEdge</code>"},{"location":"shards/enums/TextureDimension/","title":"TextureDimension","text":"Value Description <code>D1</code> <code>D2</code> <code>Cube</code>"},{"location":"shards/enums/TextureFiltering/","title":"TextureFiltering","text":"Value Description <code>Nearest</code> <code>Linear</code>"},{"location":"shards/enums/TextureFormat/","title":"TextureFormat","text":"Value Description <code>R8Unorm</code> <code>R8Snorm</code> <code>R8Uint</code> <code>R8Sint</code> <code>R16Uint</code> <code>R16Sint</code> <code>R16Float</code> <code>RG8Unorm</code> <code>RG8Snorm</code> <code>RG8Uint</code> <code>RG8Sint</code> <code>R32Float</code> <code>R32Uint</code> <code>R32Sint</code> <code>RG16Uint</code> <code>RG16Sint</code> <code>RG16Float</code> <code>RGBA8Unorm</code> <code>RGBA8UnormSrgb</code> <code>RGBA8Snorm</code> <code>RGBA8Uint</code> <code>RGBA8Sint</code> <code>BGRA8Unorm</code> <code>BGRA8UnormSrgb</code> <code>RGB10A2Unorm</code> <code>RG11B10Ufloat</code> <code>RGB9E5Ufloat</code> <code>RG32Float</code> <code>RG32Uint</code> <code>RG32Sint</code> <code>RGBA16Uint</code> <code>RGBA16Sint</code> <code>RGBA16Float</code> <code>RGBA32Float</code> <code>RGBA32Uint</code> <code>RGBA32Sint</code> <code>Stencil8</code> <code>Depth16Unorm</code> <code>Depth24Plus</code> <code>Depth24PlusStencil8</code> <code>Depth32Float</code> <code>Depth32FloatStencil8</code>"},{"location":"shards/enums/TextureSampleType/","title":"TextureSampleType","text":"Value Description <code>Int</code> <code>UInt</code> <code>Float</code> <code>UnfilterableFloat</code> <code>Depth</code>"},{"location":"shards/enums/TextureType/","title":"TextureType","text":"Value Description <code>Default</code> <code>Int</code> <code>UInt</code> <code>UNorm</code> <code>UNormSRGB</code> <code>SNorm</code> <code>Float</code>"},{"location":"shards/enums/Tint/","title":"Tint","text":"Value Description <code>Transparent</code> Transparent color. RGBA(0, 0, 0, 0) <code>Black</code> Black color. RGB(0, 0, 0) <code>LightGray</code> Light Gray color. RGB(220, 220, 220) <code>Gray</code> Gray color. RGB(160, 160, 160) <code>White</code> White color. RGB(255, 255, 255) <code>Red</code> Red color. RGB(255, 0, 0) <code>Green</code> Green color. RGB(0, 255, 0) <code>Blue</code> Blue color. RGB(0, 0, 255)"},{"location":"shards/enums/Type/","title":"Type","text":"Value Description <code>None</code> <code>Any</code> <code>Bool</code> <code>Int</code> <code>Int2</code> <code>Int3</code> <code>Int4</code> <code>Int8</code> <code>Int16</code> <code>Float</code> <code>Float2</code> <code>Float3</code> <code>Float4</code> <code>Color</code> <code>Wire</code> <code>Shard</code> <code>Bytes</code> <code>String</code> <code>Image</code> <code>Audio</code>"},{"location":"shards/enums/UIProperty/","title":"UIProperty","text":"Value Description <code>RemainingSpace</code> Return the remaining space within an UI widget. (float4) <code>ScreenSize</code> The screen size of the UI. (float2) <code>PixelsPerPoint</code> The amounts of pixels that correspond to 1 UI point. (float) <code>IsAnythingBeingDragged</code> Returns true when anything is being dragged. (bool) <code>CursorPosition</code> The position of the UI cursor <code>IsHovered</code> True if the current UI area is being hovered over. (bool)"},{"location":"shards/enums/WaitUntil/","title":"WaitUntil","text":"Value Description <code>FirstSuccess</code> Will wait until the first success and stop any other pending operation <code>AllSuccess</code> Will wait until all complete, will stop and fail on any failure <code>SomeSuccess</code> Will wait until all complete but won't fail if some of the wires failed"},{"location":"shards/enums/Waveform/","title":"Waveform","text":"Value Description <code>Sine</code> <code>Square</code> <code>Triangle</code> <code>Sawtooth</code>"},{"location":"shards/enums/WindingOrder/","title":"WindingOrder","text":"Value Description <code>CW</code> <code>CCW</code>"},{"location":"shards/enums/WindowFlags/","title":"WindowFlags","text":"Value Description <code>NoTitleBar</code> Do not display the title bar. <code>NoResize</code> Do not allow resizing the window. <code>Scrollbars</code> Display scrollbars. <code>NoCollapse</code> Do not display the collapse button. <code>Immovable</code> Do not allow window movement."},{"location":"shards/enums/WirePoolType/","title":"WirePoolType","text":"Value Description <code>Graphics</code> Graphics sub-system <code>FX</code> FX sub-system <code>UI</code> UI sub-system <code>Logic</code> Logic sub-system <code>Physics</code> Physics sub-system <code>Background</code> Background sub-system <code>Input</code> Input sub-system <code>Network</code> Network sub-system <code>Audio</code> Audio sub-system"},{"location":"shards/shards/","title":"Shards","text":"<p>This section contains a reference for all the shards distributed with Shards.</p>"},{"location":"shards/shards/#how-to-read","title":"How to read","text":"<p>Let's look at the description for <code>String.Join</code> as an example:</p> Name - Description Default Type <code>&lt;input&gt;</code> A sequence of string values that will be joined together. <code>[\u00a0String\u00a0]</code> <code>&lt;output&gt;</code> A string consisting of all the elements of the sequence delimited by the separator. <code>String</code> <code>Separator</code> The string to use as a separator. <code>\"\"</code> <code>String</code> <p>The first thing you will see on every shard page is this table.</p> <p>The first two entries in the table describe what inputs a shard will accept and what kind of values it will output.</p>"},{"location":"shards/shards/#input","title":"&lt;input&gt;","text":"<p>In this case, the <code>String.Join</code> shard accepts a sequence of <code>Strings</code> as an input - written as <code>[String]</code>. A sequence is identified by its enclosing square brackets.</p>"},{"location":"shards/shards/#output","title":"&lt;output&gt;","text":"<p>The output will be a single <code>String</code>.</p>"},{"location":"shards/shards/#parameters","title":"Parameters","text":"<p>After the input and output of the shard, the parameters are listed. The <code>String.Join</code> shard requires a <code>Separator</code> parameter that is a <code>String</code>. When the parameter is not specified, the default value will be <code>\"\"</code>.</p>"},{"location":"shards/shards/#optional-parameters","title":"Optional parameters","text":"Name - Description Default Type <code>Window</code> None or a window variable we wish to use as a relative origin. <code>None</code> <code>Object</code> <p>Occasionally you will see a  icon next to a parameter. This means that the parameter is optional and its value can be left unset.</p> <p>When a variable is not optional and its default value is not <code>None</code>, you should set the parameter on the shard.</p>"},{"location":"shards/shards/#type-descriptions","title":"Type descriptions","text":"<p>The type column shows the expected types for input, output, or parameter:</p> Name Type <code>Values</code> <code>String Float</code> <code>Sequence</code> <code>[ String Float ]</code> <code>Table</code> <code>{ String Float }</code> <code>Variables</code> <code>&amp;String &amp;Float</code> <code>SequenceVariable</code> <code>&amp;[ Float4 ]</code> <p>Multiple different types in a row indicate that any of the types listed are accepted.</p> <p>When placed within <code>[ square brackets ]</code>, this means that a Sequence of those types is accepted.</p> <p>When placed within <code>{ curly brackets }</code>, this means that a Table of those types as values is accepted.</p> <p>When a value is prefixed with an <code>&amp;ampersand</code>, this means that a variable / ContextVar of that type is accepted.</p>"},{"location":"shards/shards/#further-reading","title":"Further reading","text":"<p>See the Types page for more information about types.</p> <p>When placed within <code>{ curly brackets }</code>, this means that a Table of those types as values is accepted.</p> <p>When a value is prefixed with an <code>&amp;ampersand</code>, this means that a variable / ContextVar of that type is accepted.</p> <p> </p>"},{"location":"shards/shards/types/","title":"Types","text":"<p>This section documents all the valid data types that are accepted by various shards either as their input value or as a parameter value. These data types also apply to the output created by any shard.</p> <p>Valid data types for every shard are listed under the <code>Type</code> column of their Parameters, Input, and Output sections (types are enclosed within parentheses and if multiple types apply then they are separated by a space).</p> Compound types <p>While this section lists the simple (or primitive) data types, you can combine these to create compound data types. For example, combining <code>Int</code>, <code>String</code>, and <code>Seq</code>, can give you a sequence of sequences <code>[ [ Any ] ]</code>, a sequence of integers and strings <code>[Int String ]</code>, and so on.</p> Why types? <p>Types are helpful as they reduce errors in programming. They are also very useful in visual programming as type-matching can be used to reduce the dropdown options when prompting a user on what shard to use next (depending on which shard's input type matches with the current shard's output type).</p> <p>Note</p> <p>While all the following types are available internally to various shards, only a few are currently accessible in the Shards scripting environment. Consequently, only these types have keywords/aliases.</p>"},{"location":"shards/shards/types/#any","title":"Any","text":"<p>Type Any indicates that all data types are allowed.</p> <p>For example, Any as the allowed data type for input and <code>Value:</code> parameter of shard <code>All</code> means that <code>All</code> accepts and compares across all data types.</p> <pre><code>[1]\nAll(Value: [(Any)])\n</code></pre> <p><code>All</code> compares the input and <code>Value:</code> parameter values and returns <code>true</code> only if both the value and data type of these entities is equal/same.</p> Code <pre><code>[4 5 6] | All(Value: [4 5 6])\nLog   ;; value and type match =&gt; true\n\n\"I'm a string\" = var1\n\"I'm a string\" = var2\nvar1 | All(Value: var2)\nLog   ;; value and type match =&gt; true\n\n\"I'm a string\" = var3\n\"I'm a different string\" = var4\nvar3 | All(Value: var4)\nLog   ;; value mismatch =&gt; false\n\n4.0 = var5\n4 = var6\nvar5 | All(Value: var6)\nLog   ;; type mismatch =&gt; false\n</code></pre> Output <pre><code>[info] [2023-07-22 13:05:25.848] [T-18072] [logging.cpp::55] [mywire] true\n[info] [2023-07-22 13:05:25.861] [T-18072] [logging.cpp::55] [mywire] true\n[info] [2023-07-22 13:05:25.862] [T-18072] [logging.cpp::55] [mywire] false\n[info] [2023-07-22 13:05:25.864] [T-18072] [logging.cpp::55] [mywire] false\n</code></pre>"},{"location":"shards/shards/types/#sequence","title":"Sequence","text":"<p>Type Sequence is a collection of values that can be accessed directly via indexes (since items are indexed by contiguous integers).</p> <p>It is also called a vector or an array. A Sequence's items are accessible by index. Example of a Sequence type would be: <code>[43 6 1]</code>.</p>"},{"location":"shards/shards/types/#audio","title":"Audio","text":"<p>Type Audio is uncompressed audio data.</p> <p>Examples of shards that use this type are <code>Audio.Oscillator</code>, <code>Audio.ReadFile</code>, and <code>Audio.WriteFile</code> all of which generate Audio type data as their output.</p> Supported formats <p>Shards supports the audio formats WAV, MP3, OGG, and FLAC.</p>"},{"location":"shards/shards/types/#bool","title":"Bool","text":"<p>Type Bool allows only two values - <code>true</code> or <code>false</code>. In that sense, it can be thought of as a special case of an Enum data type.</p> <p>Consider the shard <code>Is</code>. This shard compares its input and the value in the <code>Value:</code> parameter for equality and returns <code>true</code> if values are equal, otherwise <code>false</code> if values are not equal. Examples:</p> Code <pre><code>100 | Is(Value: (* 10 10))\nLog   ;; Is equal =&gt; true\n\n[20] | Is(Value: 20)\nLog   ;; Is not equal =&gt; false\n</code></pre> Output <pre><code>[info] [2023-07-22 18:38:24.383] [T-25360] [logging.cpp::55] [mywire] true\n[info] [2023-07-22 18:38:24.395] [T-25360] [logging.cpp::55] [mywire] false\n</code></pre>"},{"location":"shards/shards/types/#bytes","title":"Bytes","text":"<p>Type Bytes represents binary data.</p> <p>Note</p> <p>Has keyword <code>bytes</code> and alias <code>Bytes</code>.</p> <p>A byte is made up of 8 bits (for example, <code>10111010</code>) and a Bytes type is an sequence of such bytes: <code>[11110001 10110111 10000111]</code></p> Bits and Bytes <p>Bits are how data is stored in a computer at the level of electrical circuits. A bit can have only two values (1 or 0, representing the circuit is on or off) - hence the name binary data. A group of eight bits make a byte: <code>11111111</code>, <code>10101010</code>, etc. Since a bit can have only two values, a Byte can represent a total of 256 numbers (2^8): 0 to 255.</p> <p>Shards like <code>ToBytes</code>,  <code>BytesToString</code>, <code>BytesToInts</code>, etc, all use the type Bytes either for their input or their output.</p>"},{"location":"shards/shards/types/#color","title":"Color","text":"<p>Type Color represents an RGBA color format and is constructed from four unsigned 8 bit integers (one each for the R, G, B, and A values).</p> <p>Note</p> <p>Has keyword <code>color</code> and alias <code>Color</code>.</p> <p>Each of the R, G, B, and A values range from 0 to 255. R, G, and B stand for red, blue, and green components of the color. A represents the alpha channel property (how opaqe a pixel is - 0 is fully transparent, 255 is fully opaque).</p> <p>The shard <code>ToColor</code> converts its input into a Color type.</p> Code <pre><code>@color(0xFFFFFFFF)\nLog ;; Logs: (255 255 255 255)\n\n@color(0xFF)\nLog ;; Logs: (255 0 0 255)\n\n@color(130 140 150 200)\nLog ;; Logs: (130 140 150 200)\n\n@i4(130 140 150 200) | ToColor\nLog ;; Logs: (130 140 150 200)\n</code></pre> Output <pre><code>[info] [2024-01-15 13:58:17.428] [T-25672] [logging.cpp::71] [main-wire] (255 255 255 255)\n[info] [2024-01-15 13:58:17.429] [T-25672] [logging.cpp::71] [main-wire] (255 0 0 255)\n[info] [2024-01-15 13:58:17.429] [T-25672] [logging.cpp::71] [main-wire] (130 140 150 200)\n[info] [2024-01-15 13:58:17.429] [T-25672] [logging.cpp::71] [main-wire] (130 140 150 200)\n</code></pre>"},{"location":"shards/shards/types/#contextvar","title":"ContextVar","text":"<p>Type ContextVar represents a contextual variable (i.e., a variable that is in scope for the shard processing this data).</p> <p>Note</p> <p>Has keyword <code>context-var</code> and alias <code>ContextVar</code>.</p> <p>The shard <code>Math.Inc</code> accepts only ContextVar type numeric data (i.e., a variable that holds numeric data) into its <code>Value:</code> parameter, and increments it by 1.</p> Code <pre><code>11 &gt;= intvar  ;; intvar is of type `ContextVar`\nMath.Inc(intvar)\nintvar | Log ;; =&gt; 12\n\n@f2(4.5 5.7) &gt;= floatvar ;; floatvar is of type `ContextVar`\nMath.Inc(floatvar)\nfloatvar | Log ;; =&gt; (5.5, 6.7)\n</code></pre> Output <pre><code>[info] [2023-07-26 19:30:22.837] [T-27800] [logging.cpp::55] [mywire] 12\n[info] [2023-07-26 19:30:22.843] [T-27800] [logging.cpp::55] [mywire] (5.5, 6.7)\n</code></pre>"},{"location":"shards/shards/types/#enum","title":"Enum","text":"<p>Enum stands for enumerated data type.</p> <p>Note</p> <p>Has keyword <code>enum</code> and alias <code>Enum</code>.</p> <p>The value that you pass to an enumerated variable can only take certain 'states' or named constant values.</p> <p>For an overview of all enums and valid values check the Enums page</p> <p>For example, in <code>Math.Mean</code> the value for <code>Kind:</code> parameter needs to be of type Mean.</p> <pre><code>Math.Mean(Kind: Mean)\n</code></pre> <p><code>Math.Mean</code> computes the mean of a sequence of floating-point numbers. But there are three kinds of means - Arithmetic mean, Geometric mean, and Harmonic mean.</p> <p>So the parameter <code>Kind:</code> is defined as an enum variable with these three fixed states : <code>Kind: = {Arithmtic mean, Geometric mean, Harmonic mean}</code></p> <p>And hence <code>Kind:</code> expects a value that matches one of its possible states. In other words the value you pass in for <code>Kind:</code> needs to be an enumerated data type.</p> <p>In simple terms it just means that you pass in one of the allowed named constant values. Anything else will fail validation.</p> Code <pre><code>[2.0 10.0]\nMath.Mean(Kind: Mean::Arithmetic)\nLog ; ; AM =&gt; 6\n\n[2.0 10.0]\nMath.Mean(Kind: Mean::Geometric)\nLog ; ; GM =&gt; 4.47214\n\n[2.0 10.0]\nMath.Mean(Kind: Mean::Harmonic)\nLog ; ; HM =&gt; 3.33333\n\n[2.0 10.0]\nMath.Mean\nLog\n</code></pre> Output <pre><code>[info] [2023-07-22 15:35:00.868] [T-15316] [logging.cpp::55] [mywire] 6\n[info] [2023-07-22 15:35:00.881] [T-15316] [logging.cpp::55] [mywire] 4.47214\n[info] [2023-07-22 15:35:00.882] [T-15316] [logging.cpp::55] [mywire] 3.33333\n[info] [2023-07-22 15:35:00.883] [T-15316] [logging.cpp::55] [mywire] 6\n</code></pre>"},{"location":"shards/shards/types/#float","title":"Float","text":"<p>Type Float defines a 64-bit signed floating point number.</p> <p>Note</p> <p>Has keyword <code>float</code> and alias <code>Float</code>.</p> <p>Floating point means it has the capability to store a decimal point and hence supports decimal numbers.</p> <p>64 bits of memory allows this data type to support a very large range of positive and negative decimal numbers (16 significant decimal digits and an exponent range of \u2212383 to +384).</p> <p>A Float value looks like this: <code>2.53</code>.</p> <p><code>Math.Add</code> is an example of a shard that uses this data type for its input, output, and <code>Operand:</code> parameter.</p> Code <pre><code>2.4 | Math.Add(1.43)\nLog   ;; float output =&gt; 3.83\n</code></pre> Output <pre><code>[info] [2023-07-22 22:06:32.856] [T-20204] [logging.cpp::55] [mywire] 3.83\n[info] [2023-07-22 22:06:32.873] [T-20204] [logging.cpp::55] [mywire] 3.83\n</code></pre>"},{"location":"shards/shards/types/#float2","title":"Float2","text":"<p>Type Float2 defines a vector of two Float type numbers.</p> <p>Note</p> <p>Has keyword <code>float2</code> and alias <code>Float2</code>.</p> <p>A vector can be thought of as a group or list of items that are considered together for processing.</p> <p>A Float2 type value looks like this: <code>@f2(3.4 -5.0)</code>.</p> <p><code>Math.Add</code> is an example of a shard that uses this data type for its input, output, and <code>Operand:</code> parameter.</p> Code <pre><code>@f2(4.1 5.0) | Math.Add(@f2(6.3 9.2))\nLog  ;; float2 output =&gt; (10.4 14.2)\n</code></pre> Output <pre><code>[info] [2023-07-22 22:10:00.688] [T-24616] [logging.cpp::55] [mywire] (10.4 14.2)\n</code></pre>"},{"location":"shards/shards/types/#float3","title":"Float3","text":"<p>Type Float3 defines a vector of three 32-bit signed floating point numbers.</p> <p>Note</p> <p>Has keyword <code>float3</code> and alias <code>Float3</code>.</p> <p>Floating point means it has the capability to store a decimal point and hence supports decimal numbers.</p> <p>32 bits of memory allows this data type to support a large range of positive and negative decimal numbers (7 significant decimal digits and an exponent range of \u2212101 to +90).</p> <p>A Float3 type value looks like this: <code>@f3(2.9 -4.23 7.83)</code>.</p> <p><code>Math.Add</code> is an example of a shard that uses this data type for its input, output, and <code>Operand:</code> parameter.</p> Code <pre><code>@f3(1.2 3.4 5.6) | Math.Add(@f3(6.5 4.3 2.1))\nLog ;; float3 output =&gt; (7.7 7.7 7.7)\n</code></pre> Output <pre><code>[info] [2023-07-22 22:19:36.923] [T-16128] [logging.cpp::55] [mywire] (7.7 7.7 7.7)\n</code></pre>"},{"location":"shards/shards/types/#float4","title":"Float4","text":"<p>Type Float4 is like type Float3 but is a vector of four 32-bit signed floating point numbers instead.</p> <p>Note</p> <p>Has keyword <code>float4</code> and alias <code>Float4</code>.</p> <p>A Float4 type value looks like this: <code>@f4(-8.84 38.2 4.7 0.4)</code>.</p> <p><code>Math.Add</code> is an example of a shard that uses this data type for its input, output, and <code>Operand:</code> parameter.</p> Code <pre><code>@f4(3.1 6.4 9.2 4.6)\nMath.Add (@f4(6.8 3.5 0.9 5.3))\nLog   ;; Int4 output =&gt; (9.9, 9.9, 9.9, 9.9)\n</code></pre> Output <pre><code>[info] [2023-07-22 22:23:24.076] [T-25152] [logging.cpp::55] [mywire] (9.9 9.9 10.1 9.9)\n</code></pre>"},{"location":"shards/shards/types/#image","title":"Image","text":"<p>Type Image is uncompressed image data.</p> <p>A shard that uses this type is <code>StripAlpha</code>. This takes an Image type input, strips out its alpha (transparency) channel, and outputs an Image type (transformed image).</p> Supported formats <p>Shards supports the image formats PNG and SVG.</p>"},{"location":"shards/shards/types/#int","title":"Int","text":"<p>Type Int defines a 64-bit signed integer.</p> <p>Note</p> <p>Has keyword <code>int</code> and alias <code>Int</code>.</p> <p>64 bits of memory allows this data type to store integer values ranging from -9,223,372,036,854,775,808 to +9,223,372,036,854,775,807 (no decimals).</p> <p>An Int value looks like this: <code>2</code>.</p> <p><code>Math.Add</code> is an example of a shard that uses this data type for its input, output, and <code>Operand:</code> parameter.</p> Code <pre><code>3 | Math.Add(2)\nLog   ;; int output =&gt; 5\n</code></pre> Output <pre><code>[info] [2023-07-22 21:20:18.771] [T-4568] [logging.cpp::55] [mywire] 5\n[info] [2023-07-22 21:20:18.782] [T-4568] [logging.cpp::55] [mywire] 5\n</code></pre>"},{"location":"shards/shards/types/#int2","title":"Int2","text":"<p>Type Int2 defines a vector of two Int type numbers.</p> <p>Note</p> <p>Has keyword <code>int2</code> and alias <code>Int2</code>.</p> <p>A vector can be thought of as a group or list of items that are considered together for processing.</p> <p>An Int2 type value looks like this: <code>@i2(3 -5)</code>.</p> <p><code>Math.Add</code> is an example of a shard that uses this data type for its input, output, and <code>Operand:</code> parameter.</p> Code <pre><code>@i2(4 5) | Math.Add(@i2(6 9))\nLog   ;; int2 output =&gt; (10, 14)\n</code></pre> Output <pre><code>[info] [2023-07-22 21:22:26.381] [T-17748] [logging.cpp::55] [mywire] (10, 14)\n</code></pre>"},{"location":"shards/shards/types/#int3","title":"Int3","text":"<p>Type Int3 defines a vector of three 32-bit signed integers.</p> <p>Note</p> <p>Has keyword <code>int3</code> and alias <code>Int3</code>.</p> <p>32 bits of memory for each number allows this data type to store integer values ranging from -2147483648 to +2147483647 (no decimals).</p> <p>An Int3 type value looks like this: <code>@i3(2 4 -4)</code>.</p> <p><code>Math.Add</code> is an example of a shard that uses this data type for its input, output, and <code>Operand:</code> parameter.</p> Code <pre><code>@i3(1 10 99) | Math.Add( @i3(99 90 1))\nLog   ;; int3 output =&gt; (100, 100, 100)\n</code></pre> Output <pre><code>[info] [2023-07-22 21:24:38.132] [T-25580] [logging.cpp::55] [mywire] (100, 100, 100)\n</code></pre>"},{"location":"shards/shards/types/#int4","title":"Int4","text":"<p>Type Int4 is like type Int3 but is a vector of four 32-bit signed integers instead.</p> <p>Note</p> <p>Has keyword <code>int4</code> and alias <code>Int4</code>.</p> <p>An Int4 type value looks like this: <code>@i4(1 -4 0 3)</code>.</p> <p><code>Math.Add</code> is an example of a shard that uses this data type for its input, output, and <code>Operand:</code> parameter.</p> Code <pre><code>@i4(3 6 9 4)\nMath.Add(@i4(6 3 0 5))\nLog   ;; int4 output =&gt; (9 9 9 9)\n</code></pre> Output <pre><code>[info] [2023-07-22 21:27:58.115] [T-20884] [logging.cpp::55] [mywire] (9 9 9 9)\n</code></pre>"},{"location":"shards/shards/types/#int8","title":"Int8","text":"<p>Type Int8 defines a vector of eight 16-bit signed integers.</p> <p>16 bits of memory for each number allows this data type to store integer values ranging from \u221232,768 to +32,767 (no decimals).</p> <p>The shard <code>Math.Add</code> accepts Int8 as input and as its <code>Operand:</code>. The shard adds these up outputs the sum as another vector of 8 integers or Int8 data type.</p>"},{"location":"shards/shards/types/#int16","title":"Int16","text":"<p>Type Int16 defines a vector of sixteen 8-bit signed integers.</p> <p>8 bits of memory for each number allows this data type to store integer values ranging from \u2212128 to +127 (no decimals).</p> <p>The shard <code>Math.Add</code> accepts Int16 as input and as its <code>Operand:</code>. The shard adds these up outputs the sum as another vector of 16 integers or Int16 data type.</p>"},{"location":"shards/shards/types/#none","title":"None","text":"<p>Type None indicates that no data type is expected. This implies that no value is expected.</p> <p>For example, None as one of the valid data types for <code>Max:</code> parameter in shard <code>RandomInt</code> means that setting a value for this parameter is not mandatory.</p> <pre><code>RandomInt(Max: none)\nLog ;; Will log a random int\n</code></pre> <p><code>RandomInt</code> generates a random integer and the <code>Max:</code> parameter is the upper limit (not inclusive) of the value that can be generated. So it makes sense to have None as one of the valid types for this <code>Max:</code> parameter for cases when you do not want an upper limit on the random integer (though in this case the system will inherently set the upper limit to the maximum value a 64-bit signed integer can hold: 9,223,372,036,854,775,807).</p> Code <pre><code>RandomInt(8)\nLog   ;; max int that can be generated is 7\n\nRandomInt\nLog   ;; now upper limit subject to max capacity of a 64-bit signed integer\n</code></pre> Output <pre><code>[info] [2023-07-22 13:45:03.282] [T-19992] [logging.cpp::55] [mywire] 4\n[info] [2023-07-22 13:45:03.293] [T-19992] [logging.cpp::55] [mywire] 311828859\n</code></pre>"},{"location":"shards/shards/types/#object","title":"Object","text":"<p>Type Object is an opaque data type in Shards.</p> <p>Opacity in a data type means that the structure of this kind of data is not defined in an interface and is visible only to shards that use this type. What this also implies is that the internal structure of this data type will vary from shard to shard.</p> <p>For example, the <code>Socket:</code> parameter object of <code>WS.ReadString</code> is different from the output object of <code>GFX.DrawQueue</code>, even though both are of type Object.</p>"},{"location":"shards/shards/types/#path","title":"Path","text":"<p>Type Path is String type data that is expected to contain a valid path (your operating system or local machine) for loading resources like script files, images, audio files etc.</p> <p>Note</p> <p>Has keyword <code>path</code> and alias <code>Path</code>.</p> <p>A valid Path type data string would look like this: <code>\"../../external/sample-models/Avocado.glb\"</code></p> <p>Note</p> <p>For shards this type is the same as String type as far as type validations are concerned (when you execute your script Shards first checks the types before running your code). However, if the path-string passed is invalid, malformed, or missing the resource to be loaded, the shard will complain with an error message at runtime (i.e., when your code actually runs).</p> <p>A shard that uses this type is <code>Process.Run</code>. This shard takes a Path type in its <code>Executable:</code> parameter.</p>"},{"location":"shards/shards/types/#set","title":"Set","text":"<p>Type Set is a collection of unique values.</p> <p>It's different from other collections like Seq and Sequence, both of which can contain non-unique or duplicate items.</p> <p>An example of a Set type data would be <code>(22 3 378 4)</code>.</p>"},{"location":"shards/shards/types/#seq","title":"Seq","text":"<p>Type Seq is a collection of values that can be accessed sequentially (i.e., they're iterable).</p> <p>Note</p> <p>Has keyword <code>seq</code>.</p> <p>Also called a sequence. An example of Seq type would be <code>[7 2 54 42]</code>.</p> <p>The shard <code>Take</code> works on this type. This shard can access Seq elements by their position.</p> Code <pre><code>[7 2 54 42] | Take(2)\nLog   ;; print the 2nd element =&gt; 54\n</code></pre> Output <pre><code>[info] [2023-07-26 22:24:48.918] [T-20928] [logging.cpp::55] [mywire] 54\n</code></pre>"},{"location":"shards/shards/types/#shard","title":"Shard","text":"<p>The type Shard (also called ShardRef) represents a shard being passed as data.</p> <p>This type is an important aspect of the homoiconicity feature (i.e., code/data interchangeability) in Shards.</p> <p>Note</p> <p>What's a <code>shard</code>?</p> <p>The shard <code>ForEach</code> expects a value with the type Shard for its <code>Apply:</code> parameter (the other option being a sequence of Shard type values, i.e., a <code>Wire</code> type).</p> <p><code>ForEach</code> then applies this shard (or sequence of shards) on its input to transform it into its output.</p>"},{"location":"shards/shards/types/#shard_1","title":"[ Shard ]","text":"<p>When more that one shard is accepted it is indicated as a sequence of shards, any description can be turned into a sequence of shards by wrapping it with <code>{}</code>, for example:</p> <pre><code>[1 2 3 4 5]\nForEach({ ;; ForEach will apply the following shards to each element of the sequence\n    Math.Add(1)\n    Math.Multiply(2)\n    Math.Subtract(3)\n    Log(\"Result\")\n})\n</code></pre> Output <pre><code>[info] [2024-01-15 14:12:04.509] [T-25980] [logging.cpp::65] [main-wire] Result: 1\n[info] [2024-01-15 14:12:04.509] [T-25980] [logging.cpp::65] [main-wire] Result: 3\n[info] [2024-01-15 14:12:04.509] [T-25980] [logging.cpp::65] [main-wire] Result: 5\n[info] [2024-01-15 14:12:04.509] [T-25980] [logging.cpp::65] [main-wire] Result: 7\n[info] [2024-01-15 14:12:04.510] [T-25980] [logging.cpp::65] [main-wire] Result: 9\n</code></pre>"},{"location":"shards/shards/types/#string","title":"String","text":"<p>Type String represents string data (any data enclosed within double quotes).</p> <p>Note</p> <p>Has keyword <code>string</code> and alias <code>String</code>.</p> <p>A String value looks like this: <code>\"Hello @Tom!\"</code>.</p> <p>An example of a shard that processes String type data is <code>String.ToUpper</code>. This shard takes a String and converts it into its upper case version.</p> Code <pre><code>\"Hello World!\" | String.ToUpper\nLog   ;; upper case version =&gt; HELLO WORLD!\n\n\"Bye Universe!\" | String.ToUpper\nLog   ;; upper case version =&gt; BYE UNIVERSE!\n</code></pre> Output <pre><code>[info] [2023-07-26 19:38:14.813] [T-18168] [logging.cpp::55] [mywire] Bytes: 0x20440058720 size: 11\n</code></pre>"},{"location":"shards/shards/types/#table","title":"Table","text":"<p>Type Table is a collection of key/value pairs.</p> <p>Its also known as map, data dictionary, or associative array. An example of a Table type would be: <code>{key1: \"Hello\" key2: \"World\"}</code>.</p> Code <pre><code>{k1: 123} = tabvar ;;tabvar is now of type table\ntabvar | Take(\"k1\")\nLog  ;; Logs: 123\n</code></pre> Output <pre><code>[info] [2024-01-15 14:09:18.386] [T-27756] [logging.cpp::71] [main-wire] 123\n</code></pre>"},{"location":"shards/shards/types/#wire","title":"Wire","text":"<p>Type Wire represents a wire being passed as data.</p> <p>Note</p> <p>Has keyword <code>Wire</code>.</p> <p>A Wire type thus consists of a sequence of shards (which make up the wire), their shared state (memory) context, name of the wire, and other properties that enable operations on the wire like scheduling it on a mesh, starting/stopping/pausing the wire, etc.</p> <p>Note</p> <p>What's a <code>wire</code>?</p> <p>For example, the shard <code>Stop</code> accepts Wire type data in its <code>:Wire</code> parameter and stops that wire's execution if its currently running.</p> <p> </p>"},{"location":"shards/shards/Animation/Duration/","title":"Animation.Duration","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[{Path: [String] Frames: [{Time: Float Value: Any None: Any}]}]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float</code> <p>Outputs the duration of an animation, in seconds</p> <p> </p>"},{"location":"shards/shards/Animation/Interpolated/","title":"Animation.Interpolated","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code> <code>Duration</code>  No Duration of interpolation <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <p>Outputs the duration of an animation, in seconds</p> <p> </p>"},{"location":"shards/shards/Animation/Play/","title":"Animation.Play","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The position in the animation to play <code>Float</code> <code>Output \u27a1\ufe0f</code> The interpolated frame data <code>[{Path: [String] Value: Any}]</code> <code>Animation</code>  Yes The animation to play <code>None</code> <code>&amp;[{Path: [String] Frames: [{Time: Float Value: Any None: Any}]}]</code><code>[{Path: [String] Frames: [{Time: Float Value: Any None: Any}]}]</code> <p>Outputs the duration of an animation, in seconds</p> <p> </p>"},{"location":"shards/shards/Animation/Timer/","title":"Animation.Timer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float</code> <code>Animation</code>  No The to take the duration from <code>None</code> <code>&amp;[{Path: [String] Frames: [{Time: Float Value: Any None: Any}]}]</code><code>[{Path: [String] Frames: [{Time: Float Value: Any None: Any}]}]</code><code>None</code> <code>Duration</code>  No The duration of the timer, the timer will loop or stop after reaching this value <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>Looped</code>  No Loop the timer after reaching the target time <code>true</code> <code>None</code><code>Bool</code><code>&amp;Bool</code> <code>Rate</code>  No The playback rate <code>1</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>Offset</code>  No Timer offset <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>Action</code>  No The action to evaluate after the given Duration <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Variable</code>  No The variable to store the result in <code>None</code> <code>None</code><code>&amp;Float</code> <p>Keeps track of an animation timer, based on the given animation</p> <p> </p>"},{"location":"shards/shards/Assert/Is/","title":"Assert.Is","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input can be of any type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output will be the input (passthrough). <code>Any</code> <code>Value</code>  Yes The value to test against for equality. <code>None</code> <code>Any</code> <code>Break</code>  No If we should trigger a debug breakpoint on failure. <code>false</code> <code>Bool</code> <p>This assertion is used to check whether the input is equal to a given value.</p>"},{"location":"shards/shards/Assert/Is/#details","title":"Details","text":"<p>If the assertion is satisfied (i.e., the input is equal to or same as the <code>Value:</code> parameter) the program will is allowed to continue (control passes to the next shard), irrespective of the <code>Break:</code> parameter .</p> <p>However, if the assertion fails, the program - aborts with an error dump if the <code>Break:</code> parameter is set to <code>true</code> - logs an assertion validation error but continues running (control passes to the next wire scheduled on the mesh).</p> <p>Since this shard can precisely control the conditions under which a program is allowed to run or is to be aborted, it's effective for writing (inline) unit test cases with it.</p> <p>See also</p> <ul> <li><code>Assert.IsAlmost</code></li> <li><code>Assert.IsNot</code></li> </ul>"},{"location":"shards/shards/Assert/Is/#examples","title":"Examples","text":"Code <pre><code>;; Break = `true`, assertion true\n;; =&gt; log no errors and don't abort program\n8\nAssert.Is(Value: 8 Break: false)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Assert/IsAlmost/","title":"Assert.IsAlmost","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input can be of any number type or a sequence of such types. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The output will be the input (passthrough). <code>Any</code> <code>Value</code>  Yes The value to test against for almost equality. <code>None</code> <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>[Any]</code><code>&amp;(Float Float2 Float3 Float4 Int Int2 Int3 Int4 Int8 Int16 [Any])</code> <code>Abort</code>  No If we should abort the process on failure. <code>false</code> <code>Bool</code> <code>Threshold</code>  No The smallest difference to be considered equal. Should be greater than zero. <code>1.19209e-07</code> <code>Float</code><code>Int</code> <p>This assertion is used to check whether the input is almost equal to a given value.</p>"},{"location":"shards/shards/Assert/IsAlmost/#details","title":"Details","text":"<p>For non-decimal values (e.g. <code>Int</code>), <code>Epsilon:</code> is ignored and this shard acts as <code>Assert.Is</code>.</p> <p>See also</p> <ul> <li><code>Assert.Is</code></li> <li><code>Assert.IsNot</code></li> </ul>"},{"location":"shards/shards/Assert/IsAlmost/#examples","title":"Examples","text":"Code <pre><code>; Break = `false`, assertion false\n; =&gt; log assertion error but don't abort program\n8.0\nMaybe(\nAssert.IsAlmost(Value: 7.999 Break: false Epsilon: 0.0001))\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Break = `false`, assertion true\n; =&gt; log no errors and don't abort program\n8.0\nAssert.IsAlmost(Value: 8.0 Break: false)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>;; Break = `true`, assertion true\n;; =&gt; log no errors and don't abort program\n8\nAssert.IsAlmost(Value: 7 Break:true Epsilon: 1)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Assert/IsNot/","title":"Assert.IsNot","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input can be of any type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output will be the input (passthrough). <code>Any</code> <code>Value</code>  Yes The value to test against for equality. <code>None</code> <code>Any</code> <code>Break</code>  No If we should trigger a debug breakpoint on failure. <code>false</code> <code>Bool</code> <p>This assertion is used to check whether the input is different from a given value.</p>"},{"location":"shards/shards/Assert/IsNot/#details","title":"Details","text":"<p>In this shard it's the inequality that's asserted. This means the assertion is considered successful if input to this shard does not match the <code>Value:</code> parameter of this shard.</p> <p>The rest of behaviour of this shard (including the impact of the value of the <code>Break:</code> parameter) is identical to <code>Assert.Is</code>.</p> <p>Just like <code>Assert.Is</code>, this shard too can be used for writing (inline) unit test cases.</p> <p>See also</p> <ul> <li><code>Assert.Is</code></li> <li><code>Assert.IsAlmost</code></li> </ul>"},{"location":"shards/shards/Assert/IsNot/#examples","title":"Examples","text":"Code <pre><code>; Break = `false`, assertion true\n; =&gt; log no errors and don't abort program\n8\nAssert.IsNot(Value: 16 Break: false)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Assert/IsStatic/","title":"Assert.IsStatic","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Value</code>  Yes Any value to check for being static (non-var) <code>None</code> <code>Any</code> <p>Asserts that a value is static at run-time</p> <p> </p>"},{"location":"shards/shards/Assert/IsVariable/","title":"Assert.IsVariable","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Value</code>  Yes Any value to check for being a variable <code>None</code> <code>Any</code> <p>Asserts that a value is a variable at run-time</p> <p> </p>"},{"location":"shards/shards/Audio/Channel/","title":"Audio.Channel","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>InputBus</code>  No The input bus number, 0 is the audio device ADC. <code>0</code> <code>Int</code> <code>InputChannels</code>  No The list of input channels to pass as input to Shards. <code>[0 1]</code> <code>[Int]</code> <code>OutputBus</code>  No The output bus number, 0 is the audio device DAC. <code>0</code> <code>Int</code> <code>OutputChannels</code>  No The list of output channels to write from Shards's output. <code>[0 1]</code> <code>[Int]</code> <code>Volume</code>  No The volume of this channel. <code>0.7</code> <code>Float</code><code>&amp;Float</code> <code>Shards</code>  No The shards that will process audio data. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>Experimental/unstable</p> <p>This API is experimental and might produce unexpected results or crash.</p> <p> </p>"},{"location":"shards/shards/Audio/Oscillator/","title":"Audio.Oscillator","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Audio</code> <code>Type</code>  No The waveform type to oscillate. <code>Waveform::Sine</code> <code>Waveform</code> <code>Amplitude</code>  No The waveform amplitude. <code>0.4</code> <code>Float</code><code>&amp;Float</code> <code>Channels</code>  No The number of desired output audio channels. <code>2</code> <code>Int</code> <code>SampleRate</code>  No The desired output sampling rate. Ignored if inside an Audio.Channel. <code>44100</code> <code>Int</code> <code>Samples</code>  No The desired number of samples in the output. Ignored if inside an Audio.Channel. <code>1024</code> <code>Int</code> <p>Experimental/unstable</p> <p>This API is experimental and might produce unexpected results or crash.</p> <p> </p>"},{"location":"shards/shards/Audio/ReadFile/","title":"Audio.ReadFile","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Audio</code> <code>File</code>  Yes The audio file to read from (wav,ogg,mp3,flac). <code>None</code> <code>String</code><code>&amp;String</code> <code>Channels</code>  No The number of desired output audio channels. <code>2</code> <code>Int</code> <code>SampleRate</code>  No The desired output sampling rate. Ignored if inside an Audio.Channel. <code>44100</code> <code>Int</code> <code>Samples</code>  No The desired number of samples in the output. Ignored if inside an Audio.Channel. <code>1024</code> <code>Int</code> <code>Looped</code>  No If the file should be played in loop or should stop the wire when it ends. <code>false</code> <code>Bool</code> <code>From</code>  No The starting time in seconds. <code>None</code> <code>Float</code><code>&amp;Float</code><code>None</code> <code>To</code>  No The end time in seconds. <code>None</code> <code>Float</code><code>&amp;Float</code><code>None</code> <p>Experimental/unstable</p> <p>This API is experimental and might produce unexpected results or crash.</p> <p> </p>"},{"location":"shards/shards/Audio/WriteFile/","title":"Audio.WriteFile","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Audio</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Audio</code> <code>File</code>  Yes The audio file to read from (wav,ogg,mp3,flac). <code>None</code> <code>String</code><code>&amp;String</code> <code>Channels</code>  No The number of desired output audio channels. <code>2</code> <code>Int</code> <code>SampleRate</code>  No The desired output sampling rate. <code>44100</code> <code>Int</code> <p>Experimental/unstable</p> <p>This API is experimental and might produce unexpected results or crash.</p> <p> </p>"},{"location":"shards/shards/BigInt/Abs/","title":"BigInt.Abs","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Big integer represented as bytes. <code>Bytes</code> <p>Computes the absolute value of a big integer.</p>"},{"location":"shards/shards/BigInt/Abs/#examples","title":"Examples","text":"Code <pre><code>@wire(main-wire {\n  1 | BigInt = expected\n\n  -1 | BigInt\n  BigInt.Abs\n  BigInt.Is(expected) | Assert.Is(true true)\n} Looped: true)\n\n{logic-behavior: main-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Add/","title":"BigInt.Add","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The bytes variable representing the operand <code>0</code> <code>&amp;Bytes</code><code>&amp;[Bytes]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/BigInt/Add/#examples","title":"Examples","text":"Code <pre><code>7 | BigInt = expected\n4 | BigInt = operand\n\n3 | BigInt\nBigInt.Add(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/And/","title":"BigInt.And","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The bytes variable representing the operand <code>0</code> <code>&amp;Bytes</code><code>&amp;[Bytes]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/BigInt/And/#examples","title":"Examples","text":"Code <pre><code>2 | BigInt = expected\n3 | BigInt = operand\n\n6 | BigInt\nBigInt.And(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Divide/","title":"BigInt.Divide","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The bytes variable representing the operand <code>0</code> <code>&amp;Bytes</code><code>&amp;[Bytes]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/BigInt/Divide/#examples","title":"Examples","text":"Code <pre><code>4 | BigInt = expected\n2 | BigInt = operand\n\n8 | BigInt\nBigInt.Divide(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/FromFloat/","title":"BigInt.FromFloat","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Floating point number. <code>Float</code> <code>Output \u27a1\ufe0f</code> Big integer represented as bytes. <code>Bytes</code> <code>ShiftedBy</code>  No The shift is of the decimal point, i.e. of powers of ten, and is to the left if n is negative or to the right if n is positive. <code>0</code> <code>Int</code> <p>Converts a floating point number to a big integer.</p>"},{"location":"shards/shards/BigInt/FromFloat/#examples","title":"Examples","text":"Code <pre><code>42 | BigInt = expected\n\n42.1 | BigInt.FromFloat\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Is/","title":"BigInt.Is","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> A boolean value repesenting the result of the logic operation. <code>Bool</code> <code>Operand</code>  Yes The bytes variable representing the operand <code>None</code> <code>&amp;Bytes</code>"},{"location":"shards/shards/BigInt/Is/#examples","title":"Examples","text":"Code <pre><code>11 | BigInt = expected\n\n11 | BigInt\nBigInt.Is(Operand: expected)\nAssert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/IsLess/","title":"BigInt.IsLess","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> A boolean value repesenting the result of the logic operation. <code>Bool</code> <code>Operand</code>  Yes The bytes variable representing the operand <code>None</code> <code>&amp;Bytes</code>"},{"location":"shards/shards/BigInt/IsLess/#examples","title":"Examples","text":"Code <pre><code>11 | BigInt = expected\n\n9 | BigInt\nBigInt.IsLess(Operand: expected)\nAssert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/IsLessEqual/","title":"BigInt.IsLessEqual","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> A boolean value repesenting the result of the logic operation. <code>Bool</code> <code>Operand</code>  Yes The bytes variable representing the operand <code>None</code> <code>&amp;Bytes</code>"},{"location":"shards/shards/BigInt/IsLessEqual/#examples","title":"Examples","text":"Code <pre><code>11 | BigInt = expected\n\n9 | BigInt\nBigInt.IsLessEqual(Operand: expected)\nAssert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/IsMore/","title":"BigInt.IsMore","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> A boolean value repesenting the result of the logic operation. <code>Bool</code> <code>Operand</code>  Yes The bytes variable representing the operand <code>None</code> <code>&amp;Bytes</code>"},{"location":"shards/shards/BigInt/IsMore/#examples","title":"Examples","text":"Code <pre><code>11 | BigInt = expected\n\n12 | BigInt\nBigInt.IsMore(Operand:expected)\nAssert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/IsMoreEqual/","title":"BigInt.IsMoreEqual","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> A boolean value repesenting the result of the logic operation. <code>Bool</code> <code>Operand</code>  Yes The bytes variable representing the operand <code>None</code> <code>&amp;Bytes</code>"},{"location":"shards/shards/BigInt/IsMoreEqual/#examples","title":"Examples","text":"Code <pre><code>11 | BigInt = expected\n\n12 | BigInt\nBigInt.IsMoreEqual(Operand: expected)\nAssert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/IsNot/","title":"BigInt.IsNot","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> A boolean value repesenting the result of the logic operation. <code>Bool</code> <code>Operand</code>  Yes The bytes variable representing the operand <code>None</code> <code>&amp;Bytes</code>"},{"location":"shards/shards/BigInt/IsNot/#examples","title":"Examples","text":"Code <pre><code>11 | BigInt = expected\n\n9 | BigInt\nBigInt.IsNot(Operand: expected)\nAssert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Max/","title":"BigInt.Max","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The bytes variable representing the operand <code>0</code> <code>&amp;Bytes</code><code>&amp;[Bytes]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/BigInt/Max/#examples","title":"Examples","text":"Code <pre><code>7 | BigInt = expected\n4 | BigInt = operand\n\n7 | BigInt\nBigInt.Max(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Min/","title":"BigInt.Min","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The bytes variable representing the operand <code>0</code> <code>&amp;Bytes</code><code>&amp;[Bytes]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/BigInt/Min/#examples","title":"Examples","text":"Code <pre><code>4 | BigInt = expected\n4 | BigInt = operand\n\n7 | BigInt\nBigInt.Min(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Mod/","title":"BigInt.Mod","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The bytes variable representing the operand <code>0</code> <code>&amp;Bytes</code><code>&amp;[Bytes]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/BigInt/Mod/#examples","title":"Examples","text":"Code <pre><code>3 | BigInt = expected\n10 | BigInt = operand\n\n13 | BigInt\nBigInt.Mod(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Multiply/","title":"BigInt.Multiply","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The bytes variable representing the operand <code>0</code> <code>&amp;Bytes</code><code>&amp;[Bytes]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/BigInt/Multiply/#examples","title":"Examples","text":"Code <pre><code>24 | BigInt = expected\n3 | BigInt = operand\n\n8 | BigInt\nBigInt.Multiply(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Or/","title":"BigInt.Or","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The bytes variable representing the operand <code>0</code> <code>&amp;Bytes</code><code>&amp;[Bytes]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/BigInt/Or/#examples","title":"Examples","text":"Code <pre><code>7 | BigInt = expected\n3 | BigInt = operand\n\n6 | BigInt\nBigInt.Or(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Pow/","title":"BigInt.Pow","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Big integer represented as bytes. <code>Bytes</code> <code>Operand</code>  Yes The integer operand, can be a variable <code>None</code> <code>Int</code><code>&amp;Int</code>"},{"location":"shards/shards/BigInt/Pow/#examples","title":"Examples","text":"Code <pre><code>8 | BigInt = expected\n\n2 | BigInt\nBigInt.Pow(Operand: 3)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Shift/","title":"BigInt.Shift","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Big integer represented as bytes. <code>Bytes</code> <code>By</code>  No The shift is of the decimal point, i.e. of powers of ten, and is to the left if n is negative or to the right if n is positive. <code>0</code> <code>Int</code><code>&amp;Int</code>"},{"location":"shards/shards/BigInt/Shift/#examples","title":"Examples","text":"Code <pre><code>4200 | BigInt = expected\n\n42 | BigInt\nBigInt.Shift(By: 2)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Sqrt/","title":"BigInt.Sqrt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Big integer represented as bytes. <code>Bytes</code>"},{"location":"shards/shards/BigInt/Sqrt/#examples","title":"Examples","text":"Code <pre><code>2 | BigInt = expected\n\n4 | BigInt\nBigInt.Sqrt\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Subtract/","title":"BigInt.Subtract","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The bytes variable representing the operand <code>0</code> <code>&amp;Bytes</code><code>&amp;[Bytes]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/BigInt/Subtract/#examples","title":"Examples","text":"Code <pre><code>5 | BigInt = expected\n2 | BigInt = operand\n\n7 | BigInt\nBigInt.Subtract(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/ToBytes/","title":"BigInt.ToBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <code>Bits</code>  No The desired amount of bits for the output or 0 for automatic packing. <code>0</code> <code>Int</code>"},{"location":"shards/shards/BigInt/ToBytes/#examples","title":"Examples","text":"Code <pre><code>42 | BigInt\nBigInt.ToBytes(Bits: 16)\nToHex\nAssert.Is(\"0x002a\" true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/ToFloat/","title":"BigInt.ToFloat","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Floating point number representation of the big integer value. <code>Float</code> <code>ShiftedBy</code>  No The shift is of the decimal point, i.e. of powers of ten, and is to the left if n is negative or to the right if n is positive. <code>0</code> <code>Int</code> <p>Converts a big integer value to a floating point number.</p>"},{"location":"shards/shards/BigInt/ToFloat/#examples","title":"Examples","text":"Code <pre><code>3 | BigInt\nBigInt.ToFloat(ShiftedBy: 1)\nAssert.Is(3.0 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/ToHex/","title":"BigInt.ToHex","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Int</code><code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> Hexadecimal representation of the integer value. <code>String</code> <p>Converts the value to a hexadecimal representation.</p>"},{"location":"shards/shards/BigInt/ToHex/#examples","title":"Examples","text":"Code <pre><code>42 | BigInt\nBigInt.ToHex\nAssert.Is(\"0x2a\" true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/ToInt/","title":"BigInt.ToInt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Integer representation of the big integer value. <code>Int</code> <p>Converts a big integer value to an integer.</p>"},{"location":"shards/shards/BigInt/ToInt/#examples","title":"Examples","text":"Code <pre><code>42 | BigInt\nBigInt.ToInt\nAssert.Is(42 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/ToString/","title":"BigInt.ToString","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> String representation of the big integer value. <code>String</code> <p>Converts the value to a string representation.</p>"},{"location":"shards/shards/BigInt/ToString/#examples","title":"Examples","text":"Code <pre><code>42 | BigInt | BigInt.Shift(20)\nBigInt.ToString\nAssert.Is(\"4200000000000000000000\" true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Xor/","title":"BigInt.Xor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The bytes variable representing the operand <code>0</code> <code>&amp;Bytes</code><code>&amp;[Bytes]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/BigInt/Xor/#examples","title":"Examples","text":"Code <pre><code>5 | BigInt = expected\n3 | BigInt = operand\n\n6 | BigInt\nBigInt.Xor(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Brotli/Compress/","title":"Brotli.Compress","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <code>Quality</code>  No Compression quality, higher is better but slower, valid values from 1 to 11. <code>11</code> <code>Int</code>"},{"location":"shards/shards/Brotli/Decompress/","title":"Brotli.Decompress","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/Bytes/Join/","title":"Bytes.Join","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[String Bytes]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/CRDT/Apply/","title":"CRDT.Apply","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <code>CRDT</code>  Yes The CRDT instance to apply the operation to. <code>None</code> <code>&amp;Object</code> <p>Applies an operation to a CRDT instance.</p> <p> </p>"},{"location":"shards/shards/CRDT/Delete/","title":"CRDT.Delete","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <code>CRDT</code>  Yes The CRDT instance to delete from. <code>None</code> <code>&amp;Object</code> <code>Key</code>  Yes The key to delete from the CRDT instance. <code>None</code> <code>Any</code> <p>Deletes the value at the specified key in the CRDT instance.</p> <p> </p>"},{"location":"shards/shards/CRDT/Get/","title":"CRDT.Get","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>CRDT</code>  Yes The CRDT instance to read from. <code>None</code> <code>&amp;Object</code> <code>Key</code>  Yes The key to read from the CRDT instance. <code>None</code> <code>Any</code> <p>Retrieves the value at the specified key in the CRDT instance.</p> <p> </p>"},{"location":"shards/shards/CRDT/Load/","title":"CRDT.Load","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <code>CRDT</code>  Yes The CRDT instance to load into. <code>None</code> <code>&amp;Object</code> <p>Loads a serialized CRDT into a CRDT instance.</p> <p> </p>"},{"location":"shards/shards/CRDT/Merge/","title":"CRDT.Merge","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Into</code>  Yes The CRDT instance to merge into. <code>None</code> <code>&amp;Object</code> <code>Other</code>  Yes The other CRDT instance to merge. <code>None</code> <code>&amp;Object</code> <p>Merges two CRDT instances.</p> <p> </p>"},{"location":"shards/shards/CRDT/Open/","title":"CRDT.Open","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Object</code> <code>ClientID</code>  No The local client id. <code>0</code> <code>Int16</code><code>&amp;Int16</code><code>Bytes</code><code>&amp;Bytes</code> <p>Opens an empty CRDT document, returning the CRDT instance.</p> <p> </p>"},{"location":"shards/shards/CRDT/Save/","title":"CRDT.Save","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <code>CRDT</code>  Yes The CRDT instance to save. <code>None</code> <code>&amp;Object</code> <p>Serializes a CRDT instance.</p> <p> </p>"},{"location":"shards/shards/CRDT/Set/","title":"CRDT.Set","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <code>CRDT</code>  Yes The CRDT instance to edit. <code>None</code> <code>&amp;Object</code> <code>Key</code>  Yes The key to update in the CRDT instance. <code>None</code> <code>Any</code> <p>Updates or adds a value in the CRDT instance at the specified key, returning the updated CRDT.</p> <p> </p>"},{"location":"shards/shards/CRDT/State/","title":"CRDT.State","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <code>CRDT</code>  Yes The CRDT instance to extract the state from. <code>None</code> <code>&amp;Object</code> <p>Extracts the whole state of the CRDT as a state vector.</p> <p> </p>"},{"location":"shards/shards/CSV/Read/","title":"CSV.Read","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A multiline string in CSV format. <code>String</code> <code>Output \u27a1\ufe0f</code> A sequence of rows, with each row being a sequence of strings. <code>[[String]]</code> <code>NoHeader</code>  No Whether the shard should parse the first row as data, instead of header. <code>false</code> <code>Bool</code> <code>Separator</code>  No The character to use as fields separator. <code>,</code> <code>String</code> <p>Reads a CSV string and outputs the data as a sequence of strings in a sequence of rows.</p> <p> </p>"},{"location":"shards/shards/CSV/Write/","title":"CSV.Write","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of rows, with each row being a sequence of strings. <code>[[String]]</code> <code>Output \u27a1\ufe0f</code> A multiline string in CSV format. <code>String</code> <code>NoHeader</code>  No Whether the shard should parse the first row as data, instead of header. <code>false</code> <code>Bool</code> <code>Separator</code>  No The character to use as fields separator. <code>,</code> <code>String</code> <p>Reads a sequence of strings in a sequence of rows and outputs the data as a CSV string.</p> <p> </p>"},{"location":"shards/shards/ChaChaPoly/Decrypt/","title":"ChaChaPoly.Decrypt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <code>Key</code>  Yes The private key to be used to encrypt/decrypt the input payload. <code>None</code> <code>Bytes</code><code>&amp;Bytes</code><code>String</code><code>&amp;String</code>"},{"location":"shards/shards/ChaChaPoly/Encrypt/","title":"ChaChaPoly.Encrypt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code><code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <code>Key</code>  Yes The private key to be used to encrypt/decrypt the input payload. <code>None</code> <code>Bytes</code><code>&amp;Bytes</code><code>String</code><code>&amp;String</code>"},{"location":"shards/shards/DSP/FFT/","title":"DSP.FFT","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Float]</code><code>[Float2]</code><code>Audio</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float2]</code> <p>Experimental/unstable</p> <p>This API is experimental and might produce unexpected results or crash.</p> <p> </p>"},{"location":"shards/shards/DSP/IFFT/","title":"DSP.IFFT","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Float2]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float]</code><code>[Float2]</code><code>Audio</code> <code>Audio</code>  No If the output should be an Audio chunk. <code>false</code> <code>Bool</code> <code>Complex</code>  No If the output should be complex numbers (only if not Audio). <code>false</code> <code>Bool</code> <p>Experimental/unstable</p> <p>This API is experimental and might produce unexpected results or crash.</p> <p> </p>"},{"location":"shards/shards/Date/Format/","title":"Date.Format","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> An epoch timestamp (seconds after epoch). <code>Int</code> <code>Output \u27a1\ufe0f</code> A formatted readable string. <code>String</code> <code>Format</code>  No The actual formatting string, see full docs: https://docs.rs/chrono/0.4.19/chrono/format/strftime/index.html#specifiers <code>%a %b %e %T %Y</code> <code>String</code> <p>Reads an epoch timestamps and formats it into a readable string.</p> <p> </p>"},{"location":"shards/shards/ECDSA/PublicKey/","title":"ECDSA.PublicKey","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The private key to generate the public key from. <code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The public key generated from the private key. <code>Bytes</code> <code>Compressed</code>  No Indicates if the output PublicKey should be in compressed format. <code>false</code> <code>Bool</code> <p>Generates the public key from the private key using the ECDSA algorithm.</p> <p> </p>"},{"location":"shards/shards/ECDSA/Recover/","title":"ECDSA.Recover","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The message hash to recover the public key from. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The public key recovered from the signature and message. <code>Bytes</code> <code>Signature</code>  Yes The signature generated from signing the input message with the private key. <code>None</code> <code>Bytes</code><code>&amp;Bytes</code> <code>Compressed</code>  No Indicates if the output PublicKey should be in compressed format. <code>false</code> <code>Bool</code> <p>Recovers the public key from the signature and message using the ECDSA algorithm.</p> <p> </p>"},{"location":"shards/shards/ECDSA/Seed/","title":"ECDSA.Seed","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The seed to generate the private key from. <code>String</code> <code>Output \u27a1\ufe0f</code> The private key generated from the seed. <code>Bytes</code> <code>Compressed</code>  No Indicates if the output PublicKey should be in compressed format. <code>false</code> <code>Bool</code> <p>Generates the private key from the seed using the ECDSA algorithm.</p> <p> </p>"},{"location":"shards/shards/ECDSA/Sign/","title":"ECDSA.Sign","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The message hash to sign with the private key, must be 32 bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The signature generated from signing the input message with the private key. <code>Bytes</code> <code>Key</code>  Yes The private key used to sign the hashed message input. <code>None</code> <code>Bytes</code><code>&amp;Bytes</code><code>String</code><code>&amp;String</code> <p>Signs a message with the private key using the ECDSA algorithm.</p> <p> </p>"},{"location":"shards/shards/Ed25519/PublicKey/","title":"Ed25519.PublicKey","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/Ed25519/Seed/","title":"Ed25519.Seed","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/Ed25519/Sign/","title":"Ed25519.Sign","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <code>Key</code>  Yes The private key to be used to sign the hashed message input. <code>None</code> <code>Bytes</code><code>&amp;Bytes</code><code>String</code><code>&amp;String</code>"},{"location":"shards/shards/Ed25519/Verify/","title":"Ed25519.Verify","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Key</code>  Yes The public key of the keypair that signed the message. This will be used to verify the signature. <code>None</code> <code>Bytes</code><code>&amp;Bytes</code> <code>Message</code>  Yes The message string that was signed to produce the signature. This is the original plaintext message that the signature was created for. When verifying the signature, this message will be hashed and the resulting digest compared to the signature to validate it was produced by signing this exact message. <code>None</code> <code>Bytes</code><code>&amp;Bytes</code><code>String</code><code>&amp;String</code>"},{"location":"shards/shards/Fbl/Deform/","title":"Fbl.Deform","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any form ID to be destroyed. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code> <code>Output \u27a1\ufe0f</code> The input form ID, passed through unchanged. <code>Any</code> <p>Destroys the specified form by its ID. The form ID is passed through unchanged.</p> <p> </p>"},{"location":"shards/shards/Fbl/Dispatch/","title":"Fbl.Dispatch","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to be dispatched to update a variable in a specified form. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value, passed through unchanged. <code>Any</code> <code>Form</code>  No The UUID or Entity ID of the form to update, if None, it will dispatch to the current form. <code>None</code> <code>None</code><code>Int16</code><code>&amp;Int16</code><code>&amp;Fbl.TypedFormId</code> <code>Behavior</code>  Yes The behavior where the variable to update is. <code>None</code> <code>WirePoolType</code><code>&amp;WirePoolType</code> <code>Name</code>  Yes The variable name to update. <code>None</code> <code>String</code><code>&amp;String</code> <code>Key</code>  No The optional key name if the variable to update is a table. <code>None</code> <code>None</code><code>String</code><code>&amp;String</code> <code>Optional</code>  No The target value or behaviors might not exist, in this case the dispatch does nothing. <code>None</code> <code>None</code><code>Bool</code> <code>Undoable</code>  No If true, the dispatch will be flagged as undoable (when Undo/Redo is supported). <code>false</code> <code>Bool</code> <code>Unsafe</code>  No Don't perform type checks. <code>None</code> <code>None</code><code>Bool</code> <p>Dispatches a value to update a variable in a specified form. The form is identified by its UUID or Entity ID, and the variable is identified by its behavior and name. This operation is asynchronous and can cross subsystem boundaries, serving as a means to communicate between them. However, when used within the same subsystem, it will execute inline. Supports optional updates and can be marked as undoable.</p> <p> </p>"},{"location":"shards/shards/Fbl/Dupe/","title":"Fbl.Dupe","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The UUID or Entity ID of the form to be duplicated. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code> <code>Output \u27a1\ufe0f</code> The UUID of the newly duplicated form. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code> <p>Duplicates the specified form by its UUID or Entity ID. The duplicated form retains the same traits, variables, and other properties as the original form. This operation is asynchronous, and the UUID of the new form is returned once the duplication process is complete.</p> <p> </p>"},{"location":"shards/shards/Fbl/ExitMatch/","title":"Fbl.ExitMatch","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. The input is passed through unchanged. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value, passed through unchanged. <code>Any</code> <p>Exits the current match mode, returning to edit or main mode. This shard should only be used when in match mode. Sends a message to the relay to communicate this change.</p> <p> </p>"},{"location":"shards/shards/Fbl/Fetch/","title":"Fbl.Fetch","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The UUID or Entity ID of the form(s) from which the variable is to be read. It can be a single form ID or a sequence of form IDs. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code><code>[None Int16 Fbl.TypedFormId]</code> <code>Output \u27a1\ufe0f</code> The value(s) of the requested variable from the specified form(s). The output is either a single value or a sequence of values, depending on the input. <code>Any</code><code>[Any]</code> <code>Behavior</code>  Yes The behavior where the variable to read is. <code>None</code> <code>WirePoolType</code><code>&amp;WirePoolType</code> <code>Name</code>  Yes The variable name to read. <code>None</code> <code>String</code><code>&amp;String</code> <code>Key</code>  No The optional key name if the variable to read is within table. <code>None</code> <code>None</code><code>String</code><code>&amp;String</code> <code>Silent</code>  No Ignore failures without logging. <code>None</code> <code>None</code><code>Bool</code> <code>NoCache</code>  No Don't cache variable states. <code>None</code> <code>None</code><code>Bool</code> <p>Fetches the value of a specified variable from a form or a sequence of forms. The form is identified by its UUID or Entity ID, and the variable is identified by its behavior and name. This operation is asynchronous and can cross subsystem boundaries, but when used within the same subsystem, it will execute inline. Supports optional caching and silent failure handling.</p> <p> </p>"},{"location":"shards/shards/Fbl/Find/","title":"Fbl.Find","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A table with search criteria including 'name' for the form name, 'asset' for the asset type, and other optional filters. <code>{Any}</code> <code>Output \u27a1\ufe0f</code> The UUID of the first matching form or a sequence of UUIDs if multiple forms match the criteria. <code>Int16</code> <code>Partial</code>  No Search for partial name. <code>None</code> <code>None</code><code>Bool</code> <code>Insensitive</code>  No Search case insensitive. <code>None</code> <code>None</code><code>Bool</code> <code>Origin</code>  No Origin to search from. <code>None</code> <code>None</code><code>Float3</code><code>&amp;Float3</code> <code>Multiple</code>  No Return multiple forms. <code>None</code> <code>None</code><code>Bool</code> <code>Traits</code>  No Filter based on traits. <code>None</code> <code>None</code><code>{[Trait]}</code> <p>Searches for forms based on specified criteria such as name, asset type, and traits. Supports partial and case-insensitive search options. Can return a single form or multiple forms based on the input parameters.</p> <p> </p>"},{"location":"shards/shards/Fbl/FormId/","title":"Fbl.FormId","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any form ID from which the UUID will be retrieved. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code> <code>Output \u27a1\ufe0f</code> The UUID of the form. <code>Int16</code> <p>Retrieves the UUID of the specified form ID.</p> <p> </p>"},{"location":"shards/shards/Fbl/FormUuid/","title":"Fbl.FormUuid","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any form ID from which the UUID will be retrieved. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code> <code>Output \u27a1\ufe0f</code> The UUID of the form. <code>Int16</code> <p>Retrieves the UUID of the specified form ID.</p> <p> </p>"},{"location":"shards/shards/Fbl/Formalize/","title":"Fbl.Formalize","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input can be either none or a table representing initial form variable values such as fbl/pose. <code>{Any}</code><code>None</code> <code>Output \u27a1\ufe0f</code> The output is the ID of the form, which can be either typed or untyped depending on the traits. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code> <code>Id</code>  Yes The id of the form asset. <code>None</code> <code>String</code><code>&amp;String</code> <code>Wait</code>  No If we should wait the full formalization of the form before continuing. <code>false</code> <code>Bool</code> <code>Tags</code>  No The tags to add to the form. <code>None</code> <code>[Any]</code><code>None</code> <code>Traits</code>  No Create a form and check if it has the given traits, implies wait = true. <code>None</code> <code>None</code><code>{[Trait]}</code> <p>Formalizes a form with the specified ID and optional tags and traits. It can wait for the full formalization process to complete before continuing.</p> <p> </p>"},{"location":"shards/shards/Fbl/HasTags/","title":"Fbl.HasTags","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The UUID or Entity ID of the form to check for the specified tags. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the form has the specified tags. <code>Bool</code> <code>Tags</code>  Yes The tags to check. <code>None</code> <code>[Any]</code><code>&amp;[Any]</code> <code>All</code>  No Check if all tags are present, if false check if any tag is present. <code>true</code> <code>Bool</code> <p>Checks if the specified form has the given tags. Supports checking if all specified tags are present or if any of the tags are present.</p> <p> </p>"},{"location":"shards/shards/Fbl/NextFrame/","title":"Fbl.NextFrame","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input value will pass through unchanged. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output will be the same as the input value. <code>Any</code> <p>Suspends execution until the next frame is processed. This operation is typically used to synchronize between subsystems.</p> <p> </p>"},{"location":"shards/shards/Fbl/RunMode/","title":"Fbl.RunMode","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required for this operation. <code>None</code> <code>Output \u27a1\ufe0f</code> The output is an enumeration value representing the current run mode. <code>DomainRunMode</code> <p>Retrieves the current run mode as an enumeration value.</p> <p> </p>"},{"location":"shards/shards/Fbl/Slot/","title":"Fbl.Slot","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required for this operation. <code>None</code> <code>Output \u27a1\ufe0f</code> The output is an integer representing the player's slot number. <code>Int</code> <p>Retrieves the player's slot number as an integer. Returns 0 if the slot is not set yet.</p> <p> </p>"},{"location":"shards/shards/Fbl/Username/","title":"Fbl.Username","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required for this operation. <code>None</code> <code>Output \u27a1\ufe0f</code> The output is a string representing the username. <code>String</code> <p>Retrieves the current user's display name as a string.</p> <p> </p>"},{"location":"shards/shards/Fbl/Users/","title":"Fbl.Users","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required for this operation. <code>None</code> <code>Output \u27a1\ufe0f</code> A copy of the network clients' data, retrieved from the latest frame. <code>{count: Int username: String lfg: Int channel: Int}</code> <p>Retrieves a copy of the network clients' data from the latest frame to avoid data races.</p> <p> </p>"},{"location":"shards/shards/Fbl/WaitMatch/","title":"Fbl.WaitMatch","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. The input is passed through unchanged. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value, passed through unchanged. <code>Any</code> <code>Players</code>  No The number of players to wait for <code>2</code> <code>Int</code><code>&amp;Int</code> <p>Waits for a specified number of players to be ready for a match. Sends a request to the relay to wait for a match with the specified number of players. This operation can be canceled if the channel state changes to LocalSandbox or Main from certain conditions.</p> <p> </p>"},{"location":"shards/shards/Fbl/WithTag/","title":"Fbl.WithTag","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The tag to filter forms by. <code>Any</code> <code>Output \u27a1\ufe0f</code> A sequence of UUIDs of forms that have the specified tag. <code>[Int16]</code> <p>Filters forms by the specified tag and outputs a sequence of UUIDs of forms that have that tag.</p> <p> </p>"},{"location":"shards/shards/Fbl/WithTags/","title":"Fbl.WithTags","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required for this shard. <code>None</code> <code>Output \u27a1\ufe0f</code> A sequence of UUIDs of forms that match the specified tag criteria. <code>[Int16]</code> <code>Tags</code>  Yes The tags to check. <code>None</code> <code>[Any]</code><code>&amp;[Any]</code> <code>All</code>  No Check if all tags are present, if false check if any tag is present. <code>true</code> <code>Bool</code> <p>Filters forms based on the specified tags and outputs a sequence of UUIDs of forms that match the criteria. Supports checking if all specified tags are present or if any of the tags are present.</p> <p> </p>"},{"location":"shards/shards/Fbl/WithTrait/","title":"Fbl.WithTrait","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any form ID to be checked for a specific trait. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code> <code>Output \u27a1\ufe0f</code> The form ID as a typed form if the form possesses the specified trait. <code>Fbl.TypedFormId</code> <code>Behavior</code>  Yes The behavior to check <code>None</code> <code>WirePoolType</code> <code>Trait</code>  Yes The trait to check for <code>None</code> <code>Trait</code> <p>Checks if the given form possesses a specified trait for a particular behavior. If the form has the trait, it outputs the form ID as a typed form.</p> <p> </p>"},{"location":"shards/shards/GFX/Buffer/","title":"GFX.Buffer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Buffer</code> <code>Type</code>  Yes The type descriptor of the buffer <code>None</code> <code>{Any}</code> <code>AddressSpace</code>  No The address space to use the buffer with <code>None</code> <code>None</code><code>BufferAddressSpace</code> <p>Creates a new graphics buffer </p> <p> </p>"},{"location":"shards/shards/GFX/BuiltinFeature/","title":"GFX.BuiltinFeature","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Feature</code> <code>Id</code>  No Builtin feature id. <code>BuiltinFeatureId::Transform</code> <code>BuiltinFeatureId</code>"},{"location":"shards/shards/GFX/BuiltinFeature/#details","title":"Details","text":"<p>This shard generates features with preset behavior, the behavior depends on the Id.</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#built-in-feature-ids","title":"Built-in Feature Ids","text":""},{"location":"shards/shards/GFX/BuiltinFeature/#transform","title":"Transform","text":"<p>This Feature implements basic world/view/projection transform.</p> <p>Here are the entry points that are defined and can be added as dependencies by your own features.</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#initlocalposition-vertex","title":"<code>initLocalPosition</code> (vertex)","text":"<p>Sets the <code>localPosition</code> (float4) global from the vertex position.</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#initscreenposition-vertex","title":"<code>initScreenPosition</code> (vertex)","text":"<p>Sets the <code>screenPosition</code> global (float4) to the transformed vertex position (<code>=proj*view*world*&lt;vertex&gt;</code>).</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#writeposition-vertex","title":"<code>writePosition</code> (vertex)","text":"<p>Writes <code>screenPosition</code> global to <code>position</code> output.</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#initworldnormal-vertex","title":"<code>initWorldNormal</code> (vertex)","text":"<p>Transforms the object normal and writes the transformed result into the <code>worldNormal</code> global (float3). If the mesh doesn't have vertex normals, the normal will be <code>(0.0, 0.0, 1.0)</code>.</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#writenormal-vertex","title":"<code>writeNormal</code> (vertex)","text":"<p>Writes <code>worldNormal</code> global into <code>worldNormal</code> output.</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#basecolor","title":"BaseColor","text":"<p>This Feature adds a per-object shader parameter with the name <code>baseColor</code> and a texture parameter with the same name.</p> <p>Here are the entry points that are defined and can be added as dependencies by your own features.</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#initcolor-vertex","title":"<code>initColor</code> (vertex)","text":"<p>This vertex shader entry point sets up the <code>color</code> global (float4) with the vertex color from the mesh if it has been set. If the mesh doesn't have a vertex color, it'll be white with alpha 1.0.</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#writecolor-vertex","title":"<code>writeColor</code> (vertex)","text":"<p>Writes <code>color</code> global to <code>color</code> output.</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#readcolor-fragment","title":"<code>readColor</code> (fragment)","text":"<p>Reads <code>color</code> input into <code>color</code> global (float4).</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#texturecolor-fragment","title":"<code>textureColor</code> (fragment)","text":"<p>Reads the texture color from the <code>baseColor</code> texture and multiplies it with the current <code>color</code> global. It does nothing if the texture does not exist.</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#writecolor-fragment","title":"<code>writeColor</code> (fragment)","text":"<p>Writes <code>color</code> global to <code>color</code> output. <code>color</code> is the default name for the main color output from the fragment shader.</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#vertexcolorfromnormal","title":"VertexColorFromNormal","text":"<p>This Feature outputs the mesh normal as a per-vertex color output.</p> <p>Use for debugging.</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#wireframe","title":"Wireframe","text":"<p>This Feature changes how objects are rendered so that their edges are highlighted. Very basic, with a fixed edge width and color.</p> <p>Use for debugging.</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#velocity","title":"Velocity","text":"<p>This Feature outputs per-object velocity into a <code>velocity</code> output and <code>velocity</code> global. For usage with effects that require a velocity buffer such as motion blur or temporal anti-aliasing.</p> <p> </p>"},{"location":"shards/shards/GFX/BuiltinMesh/","title":"GFX.BuiltinMesh","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Mesh</code> <code>Type</code>  No The type of object to make. <code>BuiltinMeshType::Cube</code> <code>BuiltinMeshType</code>"},{"location":"shards/shards/GFX/ClearQueue/","title":"GFX.ClearQueue","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>GFX.DrawQueue</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <p>Clears a draw queue</p> <p> </p>"},{"location":"shards/shards/GFX/CopyPass/","title":"GFX.CopyPass","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.PipelineStep</code> <code>Name</code>  No A name for this step, to aid in debugging <code>None</code> <code>None</code><code>String</code> <code>Outputs</code>  No The outputs to render into <code>None</code> <code>None</code><code>[{Any}]</code><code>&amp;[{Any}]</code> <code>OutputScale</code>  No The scale that the output should be rendered as <code>{main: None}</code> <code>None</code><code>Any</code> <code>Inputs</code>  No <code>None</code> <code>None</code><code>[String]</code><code>&amp;[String]</code>"},{"location":"shards/shards/GFX/Draw/","title":"GFX.Draw","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>GFX.Drawable</code><code>[GFX.Drawable]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Drawable</code><code>[GFX.Drawable]</code> <code>Queue</code>  Yes The queue to add the draw command to (Optional). Uses the default queue if not specified <code>None</code> <code>&amp;GFX.DrawQueue</code>"},{"location":"shards/shards/GFX/Draw/#details","title":"Details","text":"<p>Draw takes a Drawable and adds a render command for it to a RenderQueue.</p>"},{"location":"shards/shards/GFX/Draw/#default-queue","title":"Default queue","text":"<p>If no render queue is specified, it goes to a global default queue.</p> <p> </p>"},{"location":"shards/shards/GFX/DrawQueue/","title":"GFX.DrawQueue","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.DrawQueue</code> <code>AutoClear</code>  No When enabled, automatically clears the queue after items have been rendered <code>true</code> <code>None</code><code>Bool</code> <code>Threaded</code>  No When enabled, output uniuqe queue references to be able to use them with channels <code>false</code> <code>None</code><code>Bool</code> <code>Trace</code>  No Enables debug tracing on this queue <code>false</code> <code>None</code><code>Bool</code> <p>Creates a new drawable queue to record Draw commands into</p> <p> </p>"},{"location":"shards/shards/GFX/Drawable/","title":"GFX.Drawable","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The drawable's transform <code>[Float4]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Drawable</code> <code>Mesh</code>  Yes The mesh to use for this drawable. <code>None</code> <code>&amp;GFX.Mesh</code> <code>Material</code>  No The material <code>None</code> <code>None</code><code>&amp;GFX.Material</code> <code>Params</code>  No Shader parameters for this drawable <code>None</code> <code>None</code><code>{GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4 &amp;(GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4)}</code><code>&amp;{GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4 &amp;(GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4)}</code> <code>Features</code>  No Features to attach to this drawable <code>None</code> <code>None</code><code>[GFX.Feature]</code><code>&amp;[GFX.Feature]</code> <p>Drawable help text</p>"},{"location":"shards/shards/GFX/Drawable/#details","title":"Details","text":"<p>The Drawable shard defines an instance of a drawn object. It usually has a transform (in world space) and a mesh to draw.</p>"},{"location":"shards/shards/GFX/Drawable/#params","title":"Params","text":"<p>The <code>Params</code> parameter contains a table of values that will be passed to the shader when this drawable is rendered.</p> <p>Info</p> <p>See GFX.Feature about where shader parameters are defined and used.</p>"},{"location":"shards/shards/GFX/Drawable/#constantdynamic","title":"Constant/Dynamic","text":"<p>Shader parameters and the drawable transform can be set as either constant parameters or dynamic ones.</p>"},{"location":"shards/shards/GFX/Drawable/#constant-parameters","title":"Constant parameters","text":"<p>Constant parameters are passed through the input table. They are read and stay the same until this function is called again.</p> <pre><code>{Mesh: mesh Transform: transform} | GFX.Drawable &gt;= my-drawable\n</code></pre>"},{"location":"shards/shards/GFX/Drawable/#dynamic-parameters","title":"Dynamic parameters","text":"<p>Dynamic parameters are passed as parameters to the shard. You can set the same fields as you can when setting constant parameters, with the exception of the mesh. The variables are referenced by the <code>Drawable</code> so that changes in their value will be reflect in the rendered result.</p> <pre><code>.. &gt;= dynamic-color\n.. &gt;= dynamic-transform\n{Mesh: mesh} | Drawable(Transform: dynamic-transform Params: {baseColor: dynamic-color}) &gt;= my-drawable\n</code></pre>"},{"location":"shards/shards/GFX/Drawable/#intended-usage","title":"Intended usage","text":"<p>To avoid re-creating Drawables for objects with minor or no changes, you should set up Drawables from within a Setup block and pass their dynamic parameters to the shard.</p> <pre><code>; Only done once\nSetup(\n  ... = const-transform\n  @f4(1.0) &gt;= dynamic-color\n  {Mesh: mesh Transform: const-transform} | Drawable(Params: {baseColor: dynamic-color}) &gt;= my-drawable)\n\n; Update color every time this wire runs\n... &gt; dynamic-color\n</code></pre> <p> </p>"},{"location":"shards/shards/GFX/DrawablePass/","title":"GFX.DrawablePass","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.PipelineStep</code> <code>Name</code>  No A name for this step, to aid in debugging <code>None</code> <code>None</code><code>String</code> <code>Queue</code>  Yes The queue that this pass should render <code>None</code> <code>&amp;GFX.DrawQueue</code> <code>Features</code>  No Features to attach to this drawable <code>None</code> <code>None</code><code>[GFX.Feature]</code><code>&amp;[GFX.Feature]</code> <code>Outputs</code>  No The outputs to render into <code>None</code> <code>None</code><code>[{Any}]</code><code>&amp;[{Any}]</code> <code>OutputScale</code>  No The scale that the output should be rendered as <code>{main: None}</code> <code>None</code><code>Any</code> <code>Sort</code>  No The sorting mode to use to sort the drawables. The default sorting behavior is to sort by optimal batching <code>None</code> <code>None</code><code>SortMode</code><code>&amp;SortMode</code> <code>IgnoreDrawableFeatures</code>  No Ignore any features on drawables and only use the features specified in this pass <code>None</code> <code>None</code><code>Bool</code>"},{"location":"shards/shards/GFX/DrawablePass/#details","title":"Details","text":"<p>A step that can be passed to Render. When processed it will take all Drawables from the referenced DrawQueue and draw them.</p> <p>Features specified on the DrawablePass will be applied to all objects that are drawn as part of that pass.</p> <p> </p>"},{"location":"shards/shards/GFX/EffectPass/","title":"GFX.EffectPass","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.PipelineStep</code> <code>Name</code>  No A name for this step, to aid in debugging <code>None</code> <code>None</code><code>String</code> <code>Outputs</code>  No The outputs to render into <code>[{Name: color}]</code> <code>None</code><code>[{Any}]</code><code>&amp;[{Any}]</code> <code>OutputScale</code>  No The scale that the output should be rendered as <code>{main: None}</code> <code>None</code><code>Any</code> <code>Inputs</code>  No <code>None</code> <code>None</code><code>[String]</code><code>&amp;[String]</code> <code>EntryPoint</code>  No <code>None</code> <code>None</code><code>[Shard]</code><code>&amp;[Shard]</code> <code>Params</code>  No Shader parameters for this drawable <code>None</code> <code>None</code><code>{GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4 &amp;(GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4)}</code><code>&amp;{GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4 &amp;(GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4)}</code> <code>Features</code>  No Features to attach to this drawable <code>None</code> <code>None</code><code>[GFX.Feature]</code><code>&amp;[GFX.Feature]</code> <code>ComposeWith</code>  No Any table of values that need to be injected into this feature's shaders <code>None</code> <code>None</code><code>{Any}</code><code>&amp;{Any}</code>"},{"location":"shards/shards/GFX/EndFrame/","title":"GFX.EndFrame","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <p>Explicitly end frame rendering, this is done automatically inside MainWindow. This shards is only needed when you want to end a frame earlier inside MainWindow</p> <p> </p>"},{"location":"shards/shards/GFX/Feature/","title":"GFX.Feature","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Feature</code> <code>Shaders</code>  No A list of shader entry points <code>None</code> <code>None</code><code>[{Any}]</code> <code>ComposeWith</code>  No Any table of values that need to be injected into this feature's shaders <code>None</code> <code>None</code><code>{Any}</code><code>&amp;{Any}</code> <code>State</code>  No The table of render state flags to override <code>None</code> <code>None</code><code>{Any}</code><code>&amp;{Any}</code> <code>ViewGenerators</code>  No A collection of callbacks that will be run to generate per-view shader parameters during rendering <code>None</code> <code>None</code><code>Wire</code><code>[Wire]</code><code>[Shard]</code><code>[[Shard]]</code><code>None</code> <code>DrawableGenerators</code>  No A collection of callbacks that will be run to generate per-drawable shader parameters during rendering <code>None</code> <code>None</code><code>Wire</code><code>[Wire]</code><code>[Shard]</code><code>[[Shard]]</code><code>None</code> <code>Params</code>  No The parameters to expose to shaders, these default values can later be overriden by materials or drawable Params <code>None</code> <code>None</code><code>{GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4 &amp;(GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4) {Any}}</code><code>&amp;{GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4 &amp;(GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4) {Any}}</code> <code>BlockParams</code>  No Custom bindings to expose to shaders <code>None</code> <code>None</code><code>{Any}</code> <code>RequiredAttributes</code>  No The parameters to expose to shaders, these default values can later be overriden by materials or drawable Params <code>None</code> <code>None</code><code>[RequiredAttributes]</code>"},{"location":"shards/shards/GFX/Feature/#details","title":"Details","text":"<p>A Feature can be thought of as an extension or plugin to the rendering logic.</p> <p>A Feature may have various components:</p> <ul> <li>Blend State (Alpha, Additive, ...)</li> <li>Depth Testing</li> <li>Vertex/Fragment shaders</li> </ul> <p>For a more extensive description about shaders, see Shaders.</p> <p>Features can be used in various locations: - Attached to a GFX.DrawablePass - Attached to a GFX.EffectPass</p> <p> </p>"},{"location":"shards/shards/GFX/Material/","title":"GFX.Material","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Material</code> <code>Params</code>  No Shader parameters for this drawable <code>None</code> <code>None</code><code>{GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4 &amp;(GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4)}</code><code>&amp;{GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4 &amp;(GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4)}</code> <code>Features</code>  No Features to attach to this drawable <code>None</code> <code>None</code><code>[GFX.Feature]</code><code>&amp;[GFX.Feature]</code>"},{"location":"shards/shards/GFX/Material/#details","title":"Details","text":""},{"location":"shards/shards/GFX/Mesh/","title":"GFX.Mesh","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>{Vertices: [Float2 Float3 Float4 Color] Indices: [Int]}</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Mesh</code> <code>Layout</code>  Yes The names for each vertex attribute. <code>None</code> <code>[String]</code> <code>WindingOrder</code>  Yes Front facing winding order for this mesh. <code>None</code> <code>WindingOrder</code>"},{"location":"shards/shards/GFX/MoveWindow/","title":"GFX.MoveWindow","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Int2</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int2</code> <code>Window</code>  No The window to get the size of. <code>None</code> <code>None</code><code>&amp;Object</code>"},{"location":"shards/shards/GFX/QueueDrawables/","title":"GFX.QueueDrawables","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>GFX.DrawQueue</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[GFX.Drawable]</code> <p>Retrieves the individual drawables in a draw queue</p> <p> </p>"},{"location":"shards/shards/GFX/ReadBuffer/","title":"GFX.ReadBuffer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Buffer</code>  Yes The buffer to read <code>None</code> <code>&amp;GFX.Buffer</code> <code>Var</code>  Yes The variable to read the data into <code>None</code> <code>&amp;{Any}</code> <code>Wait</code>  No Wait for read to complete <code>false</code> <code>Bool</code> <p>Creates a new graphics buffer </p> <p> </p>"},{"location":"shards/shards/GFX/ReadTexture/","title":"GFX.ReadTexture","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>GFX.Texture2D</code><code>GFX.TextureCube</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Image</code> <code>Wait</code>  No Wait for read to complete <code>false</code> <code>Bool</code> <p>Adds a render step that reads back the rendered textures into a images, the returned images </p> <p> </p>"},{"location":"shards/shards/GFX/Render/","title":"GFX.Render","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Steps</code>  Yes Render steps to follow. <code>None</code> <code>&amp;[GFX.PipelineStep]</code><code>[GFX.PipelineStep]</code> <code>View</code>  No The view to render. (Optional) <code>None</code> <code>None</code><code>&amp;GFX.View</code>"},{"location":"shards/shards/GFX/Render/#details","title":"Details","text":"<p>This function should be used only once per rendered frame.</p> <p>It takes a View or sequence of Views that represent the main camera as a parameter.</p> Info <p>If neither <code>View:</code> nor <code>Views:</code> is specified, the renderer will use a default view with both identity view and projection matrices.</p> <p>The <code>Steps:</code> parameter contains the list of rendering operations to perform. This can be a sequence of objects created by one of the following:</p> <ul> <li>DrawablePass</li> <li>EffectPass</li> </ul>"},{"location":"shards/shards/GFX/Render/#default-queue","title":"Default queue","text":"<p>If no render queue is specified, this command reads from a global default queue.</p>"},{"location":"shards/shards/GFX/Render/#examples","title":"Examples","text":"Code <pre><code>@wire(main-wire-graphics {\n  Once({\n    {State: {Culling: false}\n     Shaders: [{Name: \"z-discard\"\n                After: [\"readColor\"]\n                Stage: ProgrammableGraphicsStage::Fragment\n                EntryPoint: {\n            Shader.ReadGlobal(\"color\") | Take(3)\n            When(Predicate: IsLess(0.2) Action: {\n              Shader.Literal(\"discard;\")\n            })\n          }}]}\n    GFX.Feature &gt;&gt; features\n\n    GFX.BuiltinMesh(Type: BuiltinMeshType::Cube) = cube\n  })\n  fbl/translation | Math.Translation = translation-matrix\n  fbl/rotation | Math.Rotation = rotation-matrix\n  fbl/scale | Math.Scaling = scale-matrix\n  ; matmul them\n  translation-matrix | Math.MatMul(rotation-matrix) | Math.MatMul(scale-matrix) &gt;= transformation-matrix\n  ; and feed to gltf renderer\n  transformation-matrix\n  GFX.Drawable(Features: features Mesh: cube Params: {baseColor: @f4(0.0 1.0 0.0 1.0)})\n  @fbl/draw([])\n} Looped: true)\n\n{graphics-behavior: main-wire-graphics}\n</code></pre> Output <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/GFX/RenderInto/","title":"GFX.RenderInto","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Textures</code>  No The textures to render into to create. <code>None</code> <code>None</code><code>{{Any} &amp;GFX.Texture2D}</code> <code>Contents</code>  Yes The shards that will render into the given textures. <code>None</code> <code>Shard</code><code>[Shard]</code> <code>Size</code>  No The reference size. This will control the size of the render targets. <code>None</code> <code>None</code><code>Int2</code><code>&amp;Int2</code> <code>MatchOutputSize</code>  No When true, the texture rendered into is automatically resized to match the output size. <code>None</code> <code>None</code><code>Bool</code> <code>Viewport</code>  No The viewport. <code>None</code> <code>None</code><code>Int4</code><code>&amp;Int4</code> <code>WindowRegion</code>  No Sets the window region for input handling. <code>None</code> <code>None</code><code>Int4</code><code>&amp;Int4</code> <p>Renders within a region of the screen and/or to a render target</p> <p> </p>"},{"location":"shards/shards/GFX/RenderTarget/","title":"GFX.RenderTarget","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.RenderTarget</code> <code>Attachments</code>  Yes The list of attachements to create. <code>None</code> <code>{{String}}</code> <p>Groups a collection of textures into a render target that can be rendered into</p> <p> </p>"},{"location":"shards/shards/GFX/RenderTargetTexture/","title":"GFX.RenderTargetTexture","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>GFX.RenderTarget</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Texture2D</code> <code>Name</code>  No Name of the attachment to retrieve <code>None</code> <code>String</code><code>None</code> <p>Retrieve a named attachment from a render target</p> <p> </p>"},{"location":"shards/shards/GFX/ResizeWindow/","title":"GFX.ResizeWindow","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Int2</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int2</code> <code>Window</code>  No The window to resize <code>None</code> <code>None</code><code>&amp;Object</code>"},{"location":"shards/shards/GFX/Texture/","title":"GFX.Texture","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Image</code><code>None</code><code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Texture2D</code><code>GFX.TextureCube</code> <code>InterpretAs</code>  Yes Type to interpret image data as. (From image only, Default: UNormSRGB for RGBA8 images, UNorm for other formats) <code>None</code> <code>TextureType</code> <code>Format</code>  Yes The format to use to create the texture. The texture will be usable as a render target. (Render target only) <code>None</code> <code>TextureFormat</code><code>&amp;TextureFormat</code> <code>Resolution</code>  Yes The resolution of the texture to create. (Render target only) <code>None</code> <code>Int2</code><code>&amp;Int2</code> <code>MipLevels</code>  Yes The number of mip levels to create. (Render target only) <code>None</code> <code>Int</code><code>&amp;Int</code> <code>Dimension</code>  Yes The type of texture to create. (Render target only) <code>None</code> <code>TextureDimension</code> <code>Addressing</code>  Yes For sampling, sets the address modes. <code>None</code> <code>TextureAddressing</code><code>[TextureAddressing]</code> <code>Filtering</code>  Yes For sampling, sets the filter mode. <code>None</code> <code>TextureFiltering</code> <code>Label</code>  No Debug label for this object. <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <p>Creates a texture from an image. Or as a render target</p> <p> </p>"},{"location":"shards/shards/GFX/UIPass/","title":"GFX.UIPass","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.PipelineStep</code> <code>Queue</code>  No The queue to draw from (Optional). Uses the default queue if not specified <code>None</code> <code>None</code><code>&amp;GFX.DrawQueue</code> <code>Name</code>  No A name for this step, to aid in debugging <code>None</code> <code>None</code><code>String</code>"},{"location":"shards/shards/GFX/UIPass/#details","title":"Details","text":"<p>Defines a render step for rendering UI.</p> <p>Check the examples on some of the UI shards for how to use this step, for example UI.Label</p> <p> </p>"},{"location":"shards/shards/GFX/UIScaleFactor/","title":"GFX.UIScaleFactor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float</code> <code>Window</code>  No The window to get the scaling factor of. <code>None</code> <code>None</code><code>&amp;Object</code> <p>Outputs the scaling factor for UI as determined by the operating system.</p> <p> </p>"},{"location":"shards/shards/GFX/View/","title":"GFX.View","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.View</code> <code>View</code>  No The view matrix. <code>None</code> <code>None</code><code>&amp;[Float4]</code> <code>Fov</code>  No The vertical field of view. (In radians. Implies perspective projection) <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>OrthographicSizeType</code>  No The type of orthographic size. (Implies orthographic projection) <code>None</code> <code>None</code><code>OrthographicSizeType</code> <code>OrthographicSize</code>  No The orthographic size. (Implies orthographic projection) <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>Near</code>  No Near clipping distance <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>Far</code>  No Far clipping distance <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <p>Defines a viewer (or camera) for a rendered frame based on a view transform matrix</p> <p> </p>"},{"location":"shards/shards/GFX/ViewMatrix/","title":"GFX.ViewMatrix","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>GFX.View</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float4]</code> <p>Returns the view matrix of the view</p> <p> </p>"},{"location":"shards/shards/GFX/ViewProjectionMatrix/","title":"GFX.ViewProjectionMatrix","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>GFX.View</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float4]</code> <code>ViewSize</code>  Yes The size of the screen this view is being used with <code>None</code> <code>Float2</code><code>&amp;Float2</code> <p>Returns the combined view projection matrix of the view</p> <p> </p>"},{"location":"shards/shards/GFX/ViewRange/","title":"GFX.ViewRange","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>GFX.View</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float2</code> <p>Returns the view near/far range</p> <p> </p>"},{"location":"shards/shards/GFX/Viewport/","title":"GFX.Viewport","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int4</code>"},{"location":"shards/shards/GFX/WindowPosition/","title":"GFX.WindowPosition","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int2</code> <code>Window</code>  No The window to get the size of. <code>None</code> <code>None</code><code>&amp;Object</code>"},{"location":"shards/shards/GFX/WindowSize/","title":"GFX.WindowSize","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int2</code> <code>Window</code>  No The window to get the size of. <code>None</code> <code>None</code><code>&amp;Object</code>"},{"location":"shards/shards/GFX/WriteBuffer/","title":"GFX.WriteBuffer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Buffer</code>  Yes The buffer <code>None</code> <code>&amp;GFX.Buffer</code> <code>RuntimeLength</code>  No The length of the runtime sized array of the buffer, if any <code>None</code> <code>None</code><code>Int</code><code>&amp;Int</code> <p>Creates a new graphics buffer </p> <p> </p>"},{"location":"shards/shards/GFX/glTF/","title":"GFX.glTF","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Float4]</code><code>{transform: [Float4] None: Any}</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Drawable</code> <code>Path</code>  No The path to load the model from <code>None</code> <code>None</code><code>String</code><code>&amp;String</code> <code>Bytes</code>  No The bytes to load the model from <code>None</code> <code>None</code><code>Bytes</code><code>&amp;Bytes</code> <code>Copy</code>  No Reference to another glTF model to copy <code>None</code> <code>None</code><code>&amp;GFX.Drawable</code> <code>Params</code>  No Shader parameters for this drawable <code>None</code> <code>None</code><code>{GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4 &amp;(GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4)}</code><code>&amp;{GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4 &amp;(GFX.Texture2D GFX.TextureCube &amp;GFX.Buffer [Float4] Float4 Float3 Float2 Float Int Int2 Int3 Int4)}</code> <code>Features</code>  No Features to attach to this drawable <code>None</code> <code>None</code><code>[GFX.Feature]</code><code>&amp;[GFX.Feature]</code> <code>AnimationController</code>  No The animation controller <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>WrapRootNode</code>  No Wrap the root node so animations applied to it still work <code>None</code> <code>None</code><code>Bool</code>"},{"location":"shards/shards/GFX/glTF/#details","title":"Details","text":"<p>Loads a glTF model from a file. Outputs a <code>GFX.DrawableHierarchy</code> that can be passed to Draw.</p>"},{"location":"shards/shards/GFX/glTF/#static-file","title":"Static file","text":"<p>Loaded when the Wire containing it is warmed up.</p> <pre><code>{Transform: ...} | GFX.glTF(Path: \"pathToModel.glb\") &gt;= drawable\n</code></pre>"},{"location":"shards/shards/GFX/glTF/#dynamic-file","title":"Dynamic file","text":"<p>Loaded when activated. You should cache the result inside a Setup shard.</p> <pre><code>{Transform: ... Path: path} | GFX.glTF &gt;= drawable\n</code></pre>"},{"location":"shards/shards/GFX/glTF/#raw-bytes","title":"Raw bytes","text":"<p>Loaded when activated. You should cache the result inside a Setup shard.</p> <pre><code>{Transform: ... Bytes: gltf-data} | GFX.glTF &gt;= drawable\n</code></pre>"},{"location":"shards/shards/GFX/glTF/#duplicate-existing-model","title":"Duplicate existing model","text":"<p>Experimental/unstable</p> <p>This API is experimental and might produce unexpected results or crash.</p> <p>Generate another <code>GFX.DrawableHierarchy</code> from an existing <code>GFX.DrawableHierarchy</code></p> <pre><code>... GFX.glTF( ..) &gt;= other-gltf-drawable\n{Transform: ... Copy: other-gltf-drawable} | GFX.glTF &gt;= drawable\n</code></pre> <p> </p>"},{"location":"shards/shards/General/Abs/","title":"Abs","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/General/Acos/","title":"Acos","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/General/Add/","title":"Add","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p> <p> </p>"},{"location":"shards/shards/General/And/","title":"And","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> If true, the flow continues; otherwise, it stops. <code>Bool</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be the input of the current conditional flow or wire. <code>Bool</code> <p>If the input of the preceding shard is true, the flow continues; otherwise, the flow stops. This shard is typically used within conditional flows (e.g., If, When) to chain conditions. Note: Outside a conditional flow, it might restart the current wire, which can be used as a trick in certain scenarios.</p>"},{"location":"shards/shards/General/And/#examples","title":"Examples","text":"Code <pre><code>5 = x\n\nx\nIf(Predicate: {IsMore(1) | And | IsLess(10)} Then:{\n  Log(\"Value is more than 1 and less than 10\")\n} Else:{\n  Log(\"Value is not more than 1 and less than 10\")\n})\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/AppendTo/","title":"AppendTo","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to append to the collection. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <code>Collection</code>  Yes The collection to add the input to. <code>None</code> <code>&amp;[Any]</code><code>&amp;String</code><code>&amp;Bytes</code> <p>Appends the input to the context variable passed to <code>:Collection</code>.</p>"},{"location":"shards/shards/General/AppendTo/#details","title":"Details","text":"<p><code>AppendTo</code> appends (i.e., adds to the end) its input to the variable it receives in its <code>Collection:</code> parameter. </p> <p>This shard works on string and sequence variables.</p> <p>The input to this shard is also passed through as its output.</p> <p>See also</p> <ul> <li><code>Drop</code></li> <li><code>Pop</code></li> <li><code>Push</code></li> <li><code>Set</code></li> <li><code>Update</code></li> </ul>"},{"location":"shards/shards/General/AppendTo/#examples","title":"Examples","text":"Code <pre><code>;; append element to sequence\n[1 2 3] &gt;= seq\n4 | AppendTo(seq)    ;; appends element to sequence\nseq | Log           ;; updated sequence =&gt; [1, 2, 3, 4]\n\n;; append character to string\n\"Hell\" &gt;= str\n\"o\" | AppendTo(str)  ;; appends character to string\nstr | Log           ;; updated string =&gt; Hello\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Asin/","title":"Asin","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/General/Assoc/","title":"Assoc","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input sequence that defines which element in the target sequence or table needs to be updated and with what value. Should have even number of elements. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> Modified array or table. Has the same type as the array or table on which Assoc was applied. <code>[Any]</code> <code>Name</code>  No The name of the sequence or table to be updated. `` <code>String</code><code>&amp;Any</code> <code>Key</code>  Yes Table key for the value that is to be updated. Parameter applicable if target is table. <code>None</code> <code>Any</code> <code>Global</code>  No If the variable is or should be available to all the wires in the same mesh. The default value (false) makes the variable local to the wire. <code>false</code> <code>Bool</code> <p>Updates a sequence (array) or a table (associative array/ dictionary) on the basis of an input sequence.</p>"},{"location":"shards/shards/General/Assoc/#details","title":"Details","text":"<p>This shard can be used to update specific member elements within a sequence or a table with new values.</p> <p>The input sequence identifies which elements are to be updated and their new/ updated values. To achieve this, the member elements of this input sequence are parsed in pairs. The 1st element of each pair gives the index of the target element to update, and the 2nd element of that pair gives the new value for the target element. Due to this, the input sequence must always contain an even number of elements.</p>"},{"location":"shards/shards/General/Assoc/#examples","title":"Examples","text":"Code <pre><code>;; Update a global-var table (Global = true; table available to all the wires in the same mesh)\n{key1: [10 20] key2: [30 40]} | Set(Name:tableG Global: true)\nLog(\"Original Table\") ;; prints original table =&gt; {:key1 [10 20] :key2 [30 40]}\n[0 2 1 3] | Assoc(tableG \"key1\") ;; input sequence updates value of key \"key1\" in table\ntableG | Log(\"Modified Table\") ;; prints updated table =&gt; {:key1 [2 3] :key2 [30 40]}\ntableG | Assert.Is({key1: [2 3] key2: [30 40]} true)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>;; Update a local-variable table (:Global = false, table available to only this wire in the mesh)\n{key1: [10 20] key2: [30 40]} &gt;= table ; (needs to be mutable!)\nLog ;; prints original table =&gt; {key1: [10 20] key2: [30 40]}\n[0 2 1 3] | Assoc(Name:table Key:\"key2\") ;; input sequence updates value of key \"key2\" in table\ntable | Log ;; prints updated table =&gt; {key1: [10 20] key2: [2 3]}\ntable | Assert.Is({key1: [10 20] key2: [2 3]} true)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>;; Update a sequence (needs to be mutable!)\n[10 20] &gt;= sequence\nLog(\"Original Sequence\") ;; prints original target sequence =&gt; [10 20]\n[0 2 1 3] | Assoc(sequence) ;; input sequence updates target sequence [index-0 ele =&gt; 2, index-1 ele =&gt; 3]\nsequence | Log(\"Modified Sequence\") ;; prints updated target sequence =&gt; [2 3] \nsequence | Assert.Is([2 3] true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Atan/","title":"Atan","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/General/Await/","title":"Await","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Must match the input types of the first shard in the sequence. <code>Any</code> <code>Output \u27a1\ufe0f</code> Will match the output types of the first shard of the sequence. <code>Any</code> <code>Shards</code>  No The shards to activate. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>Executes a shard or a sequence of shards asynchronously and awaits their completion.</p>"},{"location":"shards/shards/General/Await/#details","title":"Details","text":"<p><code>Await</code> runs its shards (or sequence of shards) as a separate task that is sent directly to the thread pool, while the rest of the program continues executing (via other scheduled threads). Once this <code>Await</code> task thread completes its execution the result of the execution of these inner shards is made available to the program.</p> <p>This is called asynchronous computation and is used to prevent resource intensive processing (like downloading a large file data from an http server) from holding up the execution of the rest of the program.</p> <p>Note</p> <p>Await is best used for shards that will take a long time to complete theri tasks. Shards like <code>FS.Read</code> and <code>FS.Write</code> are good candidates to be wrapped in <code>Await</code>.</p>"},{"location":"shards/shards/General/Await/#examples","title":"Examples","text":"Code <pre><code>; ; Asynchronous execution of shards (using keyword `Await`)\n; ; Printing order of messages not consistent across program runs --\n; ; -- as asynchronous shards might complete at different times\n\n\n@wire(await-wire {\n  Await({\n    Msg(\"Message 1\")\n    ; ; messages might print in any order (1/2/3, 1/3/2, 3/2/1, etc.)\n    Msg(\"Message 2\")\n    ; ; messages might print in any order (1/2/3, 1/3/2, 3/2/1, etc.)) \n  })\n}\nLooped: true)\n\n@wire(my-wire {\n  Msg(\"Message 3\")\n  ; ; messages might print in any order (1/2/3, 1/3/2, 3/2/1, etc.)\n} Looped: true)\n\n@mesh(main)\n@schedule(main await-wire)\n@schedule(main my-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/BigInt/","title":"BigInt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Int</code><code>Float</code><code>String</code><code>Bytes</code> <code>Output \u27a1\ufe0f</code> Big integer represented as bytes. <code>Bytes</code>"},{"location":"shards/shards/General/BitSwap32/","title":"BitSwap32","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Int</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int</code>"},{"location":"shards/shards/General/BitSwap64/","title":"BitSwap64","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Int</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int</code>"},{"location":"shards/shards/General/Branch/","title":"Branch","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Wires</code>  No The wires to schedule and run on this branch. <code>None</code> <code>Wire</code><code>[Wire]</code><code>None</code> <code>FailureBehavior</code>  No The behavior to take when some of the wires running on this branch mesh fail. <code>BranchFailure::Everything</code> <code>BranchFailure</code> <code>CaptureAll</code>  No If all of the existing context variables should be captured, no matter if being used or not. <code>false</code> <code>Bool</code> <code>Mesh</code>  No Optional external mesh to use for this branch. If not provided, a new one will be created. <code>Mesh</code> <code>None</code><code>Mesh</code> <p>A branch is a child mesh that runs and is ticked when this shard is activated, wires on this mesh will inherit all of the available exposed variables in the activator wire.</p>"},{"location":"shards/shards/General/Branch/#examples","title":"Examples","text":"Code <pre><code>@wire(c1 {\n  msg1 (Log)\n})\n\n@wire(c2 {\n  msg2 (Log)\n})\n\n@wire(main-wire {\n  \"Hello\" = msg1\n  \"World\" = msg2\n  Branch([c1 c2])\n})\n\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/BytesToInts/","title":"BytesToInts","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of bytes or an image that will be converted into a sequence of another type. Each byte or pixel in the input is interpreted according to the specified type. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The output is a sequence of the specified type created from the input bytes or image. Each byte or pixel is converted to an element of the output sequence. <code>[Int]</code> <p>Converts a sequence of bytes or an image into a sequence of another specified type. Each byte or pixel in the input is interpreted and converted to an element of the output sequence of the specified type.</p> <p> </p>"},{"location":"shards/shards/General/BytesToString/","title":"BytesToString","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of bytes that will be converted into a string. Each byte in the sequence is interpreted as a character. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The output is a string created from the input sequence of bytes. Each byte is interpreted as a character in the resulting string. <code>String</code> <p>Converts a sequence of bytes into a string. Each byte in the sequence is interpreted as a character in the resulting string.</p> <p> </p>"},{"location":"shards/shards/General/CaptureLog/","title":"CaptureLog","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input is ignored. This shard captures log messages based on specified parameters. <code>None</code> <code>Output \u27a1\ufe0f</code> A sequence of captured log messages. <code>[String]</code> <code>Size</code>  No The maximum number of logs to retain. <code>8</code> <code>Int</code> <code>MinLevel</code>  No The minimum level of logs to capture. <code>debug</code> <code>String</code> <code>Pattern</code>  No The pattern used to format the logs. <code>%^[%l]%$ [%Y-%m-%d %T.%e] [T-%t] [%s::%#] %v</code> <code>String</code> <code>Suspend</code>  No Suspend execution until new logs are available. <code>false</code> <code>Bool</code> <p>Captures log messages based on specified parameters, such as the number of messages to retain, the minimum log level, and the log format pattern. It can optionally suspend execution until new log messages are available.</p>"},{"location":"shards/shards/General/CaptureLog/#examples","title":"Examples","text":"Code <pre><code>Msg(\"Hello shards!\")\nCaptureLog(\n  Size: 24\n  MinLevel: \"info\"\n  Pattern: \"%^[%l]%$ [%Y-%m-%d %T.%e] %v\"\n) | ExpectStringSeq\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Ceil/","title":"Ceil","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/General/Clamp/","title":"Clamp","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code> <code>Min</code>  Yes The first value <code>None</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <code>Max</code>  Yes The second value <code>None</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Clamps the input value between the Min and Max values</p> <p> </p>"},{"location":"shards/shards/General/Clear/","title":"Clear","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input is passed through as the output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>&amp;Any</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>Clears all elements from the sequence or table passed to it. Applicable only to sequences and tables. For sequences, this operation is very fast as Shards recycles memory extensively. If the variable does not exist or the type is not a sequence or table, it simply passes through without failing.</p>"},{"location":"shards/shards/General/Clear/#details","title":"Details","text":"<p><code>Clear</code> removes all the elements of the sequence that has been passed to it in the <code>Name:</code> parameter.</p> <p>This shard works on both sequences and tables. Parameter <code>Key:</code> applies only to tables.</p> <p>Since variables may be locally scoped (created with <code>Global: false</code>; exists only for current wire) or globally scoped (created with <code>Global: true</code>; exists for all wires of that mesh), both parameters <code>Global:</code> and <code>Name:</code> are used in combination to identify the correct variable to clear. </p> <p>Any input to this shard is ignored and instead passed through as its output.</p> <p>See also</p> <ul> <li><code>Drop</code></li> <li><code>DropFront</code></li> <li><code>Erase</code></li> <li><code>Pop</code></li> <li><code>PopFront</code></li> <li><code>Remove</code></li> </ul>"},{"location":"shards/shards/General/Clear/#examples","title":"Examples","text":"Code <pre><code>[1 2 3] &gt;= seq ; ; create local sequence\nseq | Log ; ; read local sequence  =&gt; [1, 2, 3]\n\nClear(Name: seq) ; ; clear local sequence\nseq | Log ; ; local sequence cleared =&gt; []\n\n100 | AppendTo(seq) ; ; append something to local sequence\nseq | Log ; ; local sequence no more empty =&gt; [100]\n\nClear(Name: seq) ; ; clear\nseq | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Comment/","title":"Comment","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> Passes the input value through. <code>Any</code> <code>Text</code>  No The comment's text. `` <code>String</code> <p>A comment shard that does nothing.</p> <p> </p>"},{"location":"shards/shards/General/Cond/","title":"Cond","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to each predicate and action to execute. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input of the shard if <code>Passthrough</code> is <code>true</code>; otherwise, the output of the action of the first matching condition. <code>Any</code> <code>Wires</code>  Yes A sequence of shards, interleaving condition test predicate and action to execute if the condition matches. <code>None</code> <code>[Shard [Shard] None]</code> <code>Passthrough</code>  No The output of this shard will be its input. <code>true</code> <code>Bool</code> <code>Threading</code>  No Will not short circuit after the first true test expression. The threaded value gets used in only the action and not the test part of the clause. <code>false</code> <code>Bool</code> <p>Takes a sequence of conditions and predicates. Evaluates each condition one by one and if one matches, executes the associated action.</p>"},{"location":"shards/shards/General/Cond/#examples","title":"Examples","text":"Code <pre><code>  [5 10 15 20]\n  ForEach({\n    Cond([\n    {IsMore(15)} {Msg(\"This number is more than 15\")}\n    {IsMore(10)} {Msg(\"This number is more than 10\")}\n    {IsMore(5)} {Msg(\"This number is more than 5\")}\n    {IsMore(0)} {Msg(\"This number is more than 0\")}])\n  })\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Const/","title":"Const","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The declared constant value. <code>Any</code> <code>Value</code>  Yes The constant value to insert in the wire. <code>None</code> <code>Any</code> <p>Declares an un-named constant value (of any data type).</p>"},{"location":"shards/shards/General/Const/#details","title":"Details","text":"<p><code>Const</code> declares a constant value (of any data type) by passing it into the parameter <code>Value:</code>. Such a value is usually declared for use as input in other shards.</p> <p>A constant value declared with <code>Const</code> is un-named i.e., it is not assigned to any variable or allocated any alias. Hence it cannot be invoked or referred to later. To create named constants see <code>Ref</code>.</p> <p>You can even skip this shard and pass the constant value directly but internally it will be translated to a <code>Const</code>shard that outputs this constant value. However, it's good practice to use this keyword in while passing constants in Shards programs.</p> <p>Writing <code>none</code>, which implicitly means <code>Const(none)</code>, could be used to to overwrite/nullify the input to the subsequent shard.</p> <p>Input field is ignored and the output of this shard is the constant value defined by it.</p> <p>See also</p> <ul> <li><code>Ref</code></li> <li><code>Set</code></li> </ul>"},{"location":"shards/shards/General/Const/#examples","title":"Examples","text":"Code <pre><code>; ; declare an int with `Const` and consume in `Math.Multiply`\nConst(Value: 2)\nMath.Multiply(4) | Log ; ; =&gt; 8\n\n; ; declare an int without `Const` and consume in `Math.Multiply`\n2 | Math.Multiply(4) | Log ; ; =&gt; 8\n\n; ; declare a string with `Const`\nConst(\"Hello World!\") | Log ; ; =&gt; \"Hello World!\"\n\n; ; declare a sequence with `Const`\nConst([\"A\" \"B\" \"C\"]) | Log ; ; =&gt; [\"A\" \"B\" \"C\"]\n\n; ; declare a Float4 with `Const`\nConst(@f4(1.0 2.0 3.0 4.0)) | Log ; ; =&gt; @f4(1 2 3 4)\n\n; ; nullifying the input to a shard with Const(nil)\n\"Hello World\" ; ; string input for Log\nConst(none) ; ; nulls the string input\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Convolve/","title":"Convolve","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Image</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Image</code> <code>Radius</code>  No The radius of the kernel, e.g. 1 = 1x1; 2 = 3x3; 3 = 5x5 and so on. <code>1</code> <code>Int</code> <code>Step</code>  No How many pixels to advance each activation. <code>1</code> <code>Int</code>"},{"location":"shards/shards/General/Cos/","title":"Cos","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/General/Count/","title":"Count","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the count of characters, elements, or key-value pairs in the specified variable. If the input type does not match, it outputs 0. <code>Int</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>&amp;Any</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>Outputs the count of characters (if the input is a string), elements (if the input is a sequence), or key-value pairs (if the input is a table). If the input type does not match any of these, it outputs 0.</p>"},{"location":"shards/shards/General/Count/#details","title":"Details","text":"<p><code>Count</code> parses the value passed to it in the <code>Name:</code> parameter, and returns the count of characters, elements, or key-value pairs depending on whether the data type passed to it was a string, a sequence, or a table. </p> <p>If this shard is applied to a number it returns zero as the count. </p> <p>This shard works on both sequences and tables. Parameter <code>Key:</code> applies only to tables.</p> <p>Since variables may be locally scoped (created with <code>Global: false</code>; exists only for current wire) or globally scoped (created with <code>Global: true</code>; exists for all wires of that mesh), both parameters <code>Global:</code> and <code>Name:</code> are used in combination to identify the correct variable to count. </p> <p>Input field is ignored and the output of this shard is the count value in <code>Int</code> type.</p>"},{"location":"shards/shards/General/Count/#examples","title":"Examples","text":"Code <pre><code>; ; counting in locally scoped variables\n\"Shards\" &gt;= string\nCount(Name: string) | Log ; ; no. of characters =&gt; 6 \n[10 20 30] &gt;= sequence\nCount(sequence) | Log ; ; no. of elements =&gt; 3        \n{k1: 11 k2: 22} &gt;= table\nCount(table) | Log ; ; no. of key-value pairs =&gt; 2\n12345 &gt;= number\nCount(number) | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Dec/","title":"Dec","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Any</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Any</code> <code>Value</code>  Yes The value to apply the operation to. <code>None</code> <code>&amp;Int</code><code>&amp;Int2</code><code>&amp;Int3</code><code>&amp;Int4</code><code>&amp;Int8</code><code>&amp;Int16</code><code>&amp;Float</code><code>&amp;Float2</code><code>&amp;Float3</code><code>&amp;Float4</code><code>&amp;Color</code><code>&amp;[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/General/DemultiplyAlpha/","title":"DemultiplyAlpha","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The image to apply the demultiplication of alpha channels to. <code>Image</code> <code>Output \u27a1\ufe0f</code> The image as a result of the application of the demultiplication of alpha channels. <code>Image</code> <p>Applies the demultiplication of alpha channels of an image to its RGB channels. Does nothing if the image has already been demultiplied or never been premultiplied in Shards. This mainly applies to PNG images.</p> <p> </p>"},{"location":"shards/shards/General/Detach/","title":"Detach","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Wire</code>  No The wire to run. <code>None</code> <code>Wire</code><code>String</code><code>None</code> <code>Restart</code>  No If on activation the wire should be restarted from scratch even if it was still running. <code>false</code> <code>Bool</code>"},{"location":"shards/shards/General/Detach/#examples","title":"Examples","text":"Code <pre><code>@wire(hello {\n  Pause(2.0)\n  Msg(\"Hello\")\n})\n\n@wire(hello-2 {\n  Pause(2.0)\n  Msg(\"Hello-2\")\n})\n\n@wire(main-wire {\n  Msg(\"Start\")\n  Detach(hello) ; ;hello is run in parallel. Start End and then Hello will be logged\n  Msg(\"End\")\n\n  ; Msg(\"Start\")\n  ; Do(hello-2) ;;hello-2 is run in inline. Start will be logged, then 2s will pass, and Hello and then End will be logged\n  ; Msg(\"End\")\n})\n\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Div/","title":"Div","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p> <p> </p>"},{"location":"shards/shards/General/Do/","title":"Do","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Wire</code>  No The wire to run. <code>None</code> <code>Wire</code><code>String</code><code>None</code>"},{"location":"shards/shards/General/Do/#examples","title":"Examples","text":"Code <pre><code>@wire(hello {\n  Pause(2.0)\n  Msg(\"Hello\")\n})\n\n@wire(main-wire {\n  Msg(\"Start\")\n  Do(hello) ; ;hello is run inline. Start is logged, then 2s passes, and then Hello followed by End is logged.\n  Msg(\"End\")\n})\n\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/DoMany/","title":"DoMany","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Any]</code> <code>Wire</code>  No The wire to run many times sequentially. <code>None</code> <code>None</code><code>Wire</code><code>[Shard]</code>"},{"location":"shards/shards/General/Drop/","title":"Drop","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input is passed through as the output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>&amp;Any</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>Drops the last element of the sequence variable. Works only on sequences. If the variable is not a sequence, it simply passes through without failing.</p>"},{"location":"shards/shards/General/Drop/#details","title":"Details","text":"<p><code>Drop</code> drops (removes) the last element of the sequence variable that has been passed to in the <code>Name:</code> parameter. </p> <p>This shard works on both sequences and tables. Parameter <code>Key:</code> applies only to tables.</p> <p>Since variables may be locally scoped (created with <code>Global: false</code>; exists only for current wire) or globally scoped (created with <code>Global: true</code>; exists for all wires of that mesh), both parameters <code>Global:</code> and <code>Name:</code> are used in combination to identify the correct variable to drop elements from.</p> <p>Any input to this shard is ignored and instead passed through as its output.</p> <p>See also</p> <ul> <li><code>AppendTo</code></li> <li><code>Clear</code></li> <li><code>DropFront</code></li> <li><code>Erase</code></li> <li><code>Pop</code></li> <li><code>PopFront</code></li> <li><code>Remove</code></li> </ul>"},{"location":"shards/shards/General/Drop/#examples","title":"Examples","text":"Code <pre><code>; ; drop last element from a local sequence\n[10 20 30 40] &gt;= seq ; ; create a local sequence\nGet(seq) | Log ; ; local sequence =&gt; [10, 20, 30, 40]\nDrop(Name: seq) ; ; drops the last element i.e., 40\nGet(seq) | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/DropFront/","title":"DropFront","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input is passed through as the output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>&amp;Any</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>Drops the first element of the sequence variable. Works only on sequences. If the variable is not a sequence, it simply passes through without failing.</p>"},{"location":"shards/shards/General/DropFront/#details","title":"Details","text":"<p><code>DropFront</code> drops (removes) the first element of the sequence variable that has been passed to in the <code>Name:</code> parameter. </p> <p>This shard works on both sequences and tables. Parameter <code>Key:</code> applies only to tables.</p> <p>Since variables may be locally scoped (created with <code>Global: false</code>; exists only for current wire) or globally scoped (created with <code>Global: true</code>; exists for all wires of that mesh), both parameters <code>Global:</code> and <code>Name:</code> are used in combination to identify the correct variable to drop elements from.</p> <p>Any input to this shard is ignored and instead passed through as its output.</p> <p>See also</p> <ul> <li><code>Clear</code></li> <li><code>Drop</code></li> <li><code>Erase</code></li> <li><code>Pop</code></li> <li><code>PopFront</code></li> <li><code>PrependTo</code></li> <li><code>Remove</code></li> </ul>"},{"location":"shards/shards/General/DropFront/#examples","title":"Examples","text":"Code <pre><code>; ; drop first element from a local sequence\n[10 20 30 40] &gt;= seq ; ; create a local sequence\nGet(seq) | Log ; ; local sequence =&gt; [10, 20, 30, 40]\nDropFront(Name: seq) ; ; drops the first element i.e., 10\nGet(seq) | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Erase/","title":"Erase","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <code>Indices</code>  Yes One or multiple indices to filter from a sequence. <code>None</code> <code>Any</code><code>&amp;Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>&amp;Any</code> <code>Key</code>  Yes The key of the value to erase from the table (this variable will become a table). <code>None</code> <code>Any</code> <code>Global</code>  No If the variable is or should be available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>Deletes an index or indices from a sequence or a key or keys from a table.</p>"},{"location":"shards/shards/General/Erase/#details","title":"Details","text":"<p><code>Erase</code> deletes single or multiple elements (from sequences) and key-value pairs (from tables). </p> <p>For a sequence, this shard expects the index (or a sequence of indices in descending order) of the element(s) to be erased, followed by the name of the sequence variable in the <code>Name:</code> parameter.</p> <p>For a table, this shard expects the key (or a sequence of keys) of the key-value pair(s) to be erased, followed by the name of the table variable in the <code>Name:</code> parameter. </p> <p>This shard works on both sequences and tables. Parameter <code>Key:</code> applies only to tables.</p> <p>Since variables may be locally scoped (created with <code>Global: false</code>; exists only for current wire) or globally scoped (created with <code>Global: true</code>; exists for all wires of that mesh), both parameters <code>Global:</code> and <code>Name:</code> are used in combination to identify the correct variable to erase. </p> <p>Any input to this shard is ignored and instead passed through as its output.</p> <p>See also</p> <ul> <li><code>Clear</code></li> <li><code>Drop</code></li> <li><code>DropFront</code></li> <li><code>Pop</code></li> <li><code>PopFront</code></li> <li><code>Remove</code></li> </ul>"},{"location":"shards/shards/General/Erase/#examples","title":"Examples","text":"Code <pre><code>; ; erase single element from sequence\n[100 200 300 400] &gt;= seq1\nErase([1] Name: seq1)\nLog(\"output\") ; ; =&gt; output: [100 200 300 400]      \nseq1 | Log(\"seq1\") ; ; =&gt; seq1: [100, 300, 400]\n\n; ; erase multiple elements from sequence\n[100 200 300 400] &gt;= seq2\nErase([2 0] Name: seq2)\nseq2 | Log ; ; =&gt; [200, 400]\n\n; ; erase single key-value pair from table        \n{k1: 10 k2: 20 k3: 30} &gt;= tab1\nErase(\"k2\" Name: tab1)\ntab1 | Log ; ; =&gt; {k3: 30, k1: 10}\n\n; ; erase multiple key-value pairs from table\n{k1: 100 k2: 200 k3: 300} &gt;= tab2\nErase([\"k3\" \"k1\"] tab2)\ntab2 | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Evolve/","title":"Evolve","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float Wire]</code> <code>Wire</code>  Yes The wire to optimize and evolve. <code>None</code> <code>Wire</code> <code>Fitness</code>  Yes The fitness wire to run at the end of the main wire evaluation and using its last output; should output a Float fitness value. <code>None</code> <code>Wire</code> <code>Population</code>  No The population size. <code>64</code> <code>Int</code> <code>Mutation</code>  No The rate of mutation, 0.1 = 10%. <code>0.2</code> <code>Float</code> <code>Crossover</code>  No The rate of crossover, 0.1 = 10%. <code>0.2</code> <code>Float</code> <code>Extinction</code>  No The rate of extinction, 0.1 = 10%. <code>0.1</code> <code>Float</code> <code>Elitism</code>  No The rate of elitism, 0.1 = 10%. <code>0.1</code> <code>Float</code> <code>Threads</code>  No The number of cpu threads to use. <code>2</code> <code>Int</code> <code>Coroutines</code>  No The number of coroutines to run on each thread. <code>8</code> <code>Int</code>"},{"location":"shards/shards/General/Expand/","title":"Expand","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Any]</code> <code>Size</code>  No The expansion size. <code>10</code> <code>Int</code> <code>Wire</code>  No The wire to spawn and try to run many times concurrently. <code>None</code> <code>None</code><code>Wire</code><code>[Shard]</code> <code>Policy</code>  No The execution policy in terms of wires success. <code>WaitUntil::AllSuccess</code> <code>WaitUntil</code> <code>Threads</code>  No The number of cpu threads to use. <code>1</code> <code>Int</code>"},{"location":"shards/shards/General/Expand/#examples","title":"Examples","text":"Code <pre><code>@wire(expand-test {\n  Math.Multiply(2)\n})\n\n@wire(main-wire {\n  21\n  Expand(\n    Size: 10\n    Wire: expand-test\n    Threads: 5\n  )\n  Log ; ; Logs: [42 42 42 42 42 42 42 42 42 42]\n})\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Expect/","title":"Expect","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Any</code> <code>Type</code>  Yes The type to expect <code>None</code> <code>Type</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected type specified by the 'Type' parameter. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectAudio/","title":"ExpectAudio","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Audio</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectAudioSeq/","title":"ExpectAudioSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected complex type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected complex type. <code>[Audio]</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected complex type. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectBool/","title":"ExpectBool","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Bool</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectBoolSeq/","title":"ExpectBoolSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected complex type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected complex type. <code>[Bool]</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected complex type. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectBytes/","title":"ExpectBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Bytes</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectBytesSeq/","title":"ExpectBytesSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected complex type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected complex type. <code>[Bytes]</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected complex type. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectColor/","title":"ExpectColor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Color</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectColorSeq/","title":"ExpectColorSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected complex type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected complex type. <code>[Color]</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected complex type. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectFloat/","title":"ExpectFloat","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Float</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectFloat2/","title":"ExpectFloat2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Float2</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectFloat2Seq/","title":"ExpectFloat2Seq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected complex type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected complex type. <code>[Float2]</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected complex type. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectFloat3/","title":"ExpectFloat3","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Float3</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectFloat3Seq/","title":"ExpectFloat3Seq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected complex type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected complex type. <code>[Float3]</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected complex type. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectFloat4/","title":"ExpectFloat4","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Float4</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectFloat4Seq/","title":"ExpectFloat4Seq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected complex type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected complex type. <code>[Float4]</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected complex type. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectFloatSeq/","title":"ExpectFloatSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected complex type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected complex type. <code>[Float]</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected complex type. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectImage/","title":"ExpectImage","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Image</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectImageSeq/","title":"ExpectImageSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected complex type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected complex type. <code>[Image]</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected complex type. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt/","title":"ExpectInt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Int</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt16/","title":"ExpectInt16","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Int16</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt16Seq/","title":"ExpectInt16Seq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected complex type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected complex type. <code>[Int16]</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected complex type. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt2/","title":"ExpectInt2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Int2</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt2Seq/","title":"ExpectInt2Seq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected complex type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected complex type. <code>[Int2]</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected complex type. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt3/","title":"ExpectInt3","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Int3</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt3Seq/","title":"ExpectInt3Seq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected complex type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected complex type. <code>[Int3]</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected complex type. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt4/","title":"ExpectInt4","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Int4</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt4Seq/","title":"ExpectInt4Seq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected complex type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected complex type. <code>[Int4]</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected complex type. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt8/","title":"ExpectInt8","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Int8</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt8Seq/","title":"ExpectInt8Seq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected complex type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected complex type. <code>[Int8]</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected complex type. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectIntSeq/","title":"ExpectIntSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected complex type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected complex type. <code>[Int]</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected complex type. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectLike/","title":"ExpectLike","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the type of the specified example value or the output type of the given expression. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Any</code> <code>TypeOf</code>  Yes The example value to expect. The type of the constant given here will be checked against this shard's input. <code>None</code> <code>Any</code> <code>OutputOf</code>  No Evaluates the output type of the given expression. That type will be checked against this shard's input. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the type of the specified example value given by the 'TypeOf' parameter or the output type of the given expression in the 'OutputOf' parameter. If both 'TypeOf' and 'OutputOf' are provided, an error is thrown. If neither is provided, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectNone/","title":"ExpectNone","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>None</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectSeq/","title":"ExpectSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value is a sequence. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it is a sequence. <code>[Any]</code> <p>Checks if the input value is a sequence. If the input value is not a sequence, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectString/","title":"ExpectString","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>String</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectStringSeq/","title":"ExpectStringSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected complex type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected complex type. <code>[String]</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected complex type. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectTable/","title":"ExpectTable","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>{}</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectWire/","title":"ExpectWire","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks the type of the input value. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected type. <code>Wire</code> <p>Checks if the input value matches the expected type. If the input value does not match the expected type, an error is thrown.</p> <p> </p>"},{"location":"shards/shards/General/ExpectWireSeq/","title":"ExpectWireSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input value. This shard checks if the input value matches the expected complex type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value if it matches the expected complex type. <code>[Wire]</code> <code>Unsafe</code>  No If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance) <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected complex type. If the input value does not match the expected type, an error is thrown. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/Fail/","title":"Fail","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The error message to cancel the flow with. <code>String</code> <code>Output \u27a1\ufe0f</code> This shard does not produce an output as it cancels the flow. <code>None</code> <p>Stops the current flow and cancels the execution with the provided error message. This shard is used to signal an error and halt the execution of the current wire.</p> <p> </p>"},{"location":"shards/shards/General/FastSqrt/","title":"FastSqrt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/General/FillAlpha/","title":"FillAlpha","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Image</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Image</code>"},{"location":"shards/shards/General/Flatten/","title":"Flatten","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code>"},{"location":"shards/shards/General/FloatsToImage/","title":"FloatsToImage","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of floating-point numbers that will be converted into an image. The sequence should be structured such that the total number of elements is equal to Width * Height * Channels. <code>[Float]</code> <code>Output \u27a1\ufe0f</code> The output is an image created from the input sequence of floating-point numbers. The dimensions and channels of the image are determined by the parameters provided. <code>Image</code> <code>Width</code>  No The width of the output image. <code>16</code> <code>Int</code> <code>Height</code>  No The height of the output image. <code>16</code> <code>Int</code> <code>Channels</code>  No The channels of the output image. <code>1</code> <code>Int</code> <p>Converts a sequence of floating-point numbers into an image. The image dimensions (width and height) and the number of channels are specified by parameters.</p> <p> </p>"},{"location":"shards/shards/General/Floor/","title":"Floor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/General/Flush/","title":"Flush","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Name</code>  No The name of the channel. `` <code>String</code>"},{"location":"shards/shards/General/FlushLog/","title":"FlushLog","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code>"},{"location":"shards/shards/General/ForEach/","title":"ForEach","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Sequence/table whose elements or key-value pairs need to be processed. <code>[Any]</code><code>{Any}</code> <code>Output \u27a1\ufe0f</code> The output from processing the sequence/table elements or key-value pairs. <code>[Any]</code><code>{Any}</code> <code>Apply</code>  Yes The processing logic (in the form of a shard or sequence of shards) to apply to the input sequence/table. <code>None</code> <code>Shard</code><code>[Shard]</code> <p>Processes every element or key-value pair of a sequence/table with a given shard or sequence of shards.</p>"},{"location":"shards/shards/General/ForEach/#examples","title":"Examples","text":"Code <pre><code>  {value1: 10 value2: 20 value3: 30} ;;Takes each key-value pair as a sequence\n  ForEach({\n    Log\n    Take(1)\n    ToInt\n    Math.Multiply(10)\n    Log\n  })\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>;; ForEach on a sequence: processes every element in seq order\n[2 4 8 10]\nForEach(\n   Math.Multiply(10)\n   Log\n   Math.Multiply(100)\n   Log\n)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/ForRange/","title":"ForRange","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input value is not used and will pass through unchanged. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>From</code>  No The initial iteration value (inclusive). <code>0</code> <code>Int</code><code>&amp;Int</code> <code>To</code>  No The final iteration value (inclusive). <code>1</code> <code>Int</code><code>&amp;Int</code> <code>Action</code>  No The action to perform at each iteration. The current iteration value will be passed as input. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>Executes a series of shards while an iteration value is within a specified range.</p>"},{"location":"shards/shards/General/ForRange/#examples","title":"Examples","text":"Code <pre><code>;; Sum all positive integers below 1000\n0 &gt;= sum\n\nForRange(\n  From: 1\n  To: 999\n  Action: {\n    Math.Add(sum) &gt; sum ; ; 1 then 2 then 3 then .... 999 is passsed as input\n    Log\n  }\n)\n\nsum | Assert.Is(499500 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/FreeCamera/","title":"FreeCamera","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Float4]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float4]</code> <code>FlySpeed</code>  No Controls fly speed with the keyboard <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>ScrollSpeed</code>  No Controls middle mouse movement speed <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>PanSpeed</code>  No Controls middle mouse pan speed <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>LookSpeed</code>  No Controls right mouse look speed <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <p>Provides editor free camera controls</p> <p> </p>"},{"location":"shards/shards/General/FromBase58/","title":"FromBase58","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/General/FromBase64/","title":"FromBase64","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A Base64 encoded string to be decoded. <code>String</code> <code>Output \u27a1\ufe0f</code> The decoded bytes from the input Base64 string. <code>Bytes</code> <p>Decodes a Base64 encoded string to its original byte representation.</p> <p> </p>"},{"location":"shards/shards/General/FromBytes/","title":"FromBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code>"},{"location":"shards/shards/General/FromJson/","title":"FromJson","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Pure</code>  No If the input string is generic pure json rather then shards flavored json. <code>true</code> <code>Bool</code>"},{"location":"shards/shards/General/FromLEB128/","title":"FromLEB128","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int</code> <code>Signed</code>  No If the integer to encode/decode is signed and can be negative. <code>false</code> <code>Bool</code>"},{"location":"shards/shards/General/Get/","title":"Get","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The output is the value read from the specified variable. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>&amp;Any</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <code>Default</code>  Yes The default value used if the variable is not set, the key is not present, or there is a type mismatch. <code>None</code> <code>Any</code> <p>Reads the value of the specified variable.</p>"},{"location":"shards/shards/General/Get/#details","title":"Details","text":"<p><code>Get</code>is used read the value of an existing variable. All sorts of variables that can be created by <code>Set</code>, can be read by <code>Get</code>. </p> <p>The <code>Name:</code> parameter should contain the name of the variable that's being read. If the variable is a string/numeric variable or a sequence it will be read directly. But for a table to be read its key should be passed in the parameter <code>Key:</code>. This will allow <code>Get</code> to access the particular key in the table and read it's value.</p> <p>The <code>Default:</code> parameter specifies a value to return in case the variable being read doesn't yeild a valid value, or the sequence is malformed, or the required key is missing from the table, etc. This allows the program to continue processing even if some expected data is missing.</p> <p>Since variables may be locally scoped (created with <code>Global: false</code>; exists only for current wire) or globally scoped (created with <code>Global: true</code>; exists for all wires of that mesh), both parameters <code>Global:</code> and <code>Name:</code> are used in combination to identify the correct variable to read.</p> <p>Any input to this shard is ignored and its output contains the value of the variable read by <code>Get</code>.</p> <p>Note</p> <p><code>Get</code> is implicit in shards. This means that <code>x | Log</code> is the same as <code>Get(x) | Log</code></p> <p>See also</p> <ul> <li><code>Const</code></li> <li><code>Ref</code></li> <li><code>Sequence</code></li> <li><code>Set</code></li> <li><code>Table</code></li> </ul>"},{"location":"shards/shards/General/Get/#examples","title":"Examples","text":"Code <pre><code>; ; create a mutable string variable and get its value\n\"Hello\" | Set(Name: svar) ; ; set value\nGet(Name: svar) = gotSvar ; ; get value and store it\ngotSvar | Log(\"gotten value\") ; ; =&gt; gotten value: Hello\n\n; ; create an immutable numeric variable and get its value\n100 | Ref(Name: nvar) ; ; set value\nGet(Name: nvar) &gt;= gotNvar ; ; modify numeric variable\ngotNvar | Log(\"gotten value\") ; ; =&gt; gotten value: 100\n\n; ; create a mutable sequence and get it\n[10 20 30] | Set(Name: sequence)\nGet(sequence) | Log ; ; =&gt; [10, 20, 30]\n\n; ; create an empty sequence and try reading it with the Default: failsafe\n[] | Set(Name: seqEmpty)\nGet(Name: seqEmpty Default: \"Void\") | Log ; ; =&gt; Void\n\n; ; create a table and get one of it's key-values pairs\n[\"a\" \"b\"] | Set(Name: table Key: \"key1\")\nGet(Name: table Key: \"key1\") | Log ; ; =&gt; [a, b]\n\n; ; create a table and try to get a non-existent key-value using the Default: parameter\n[\"a\" \"b\"] | Set(Name: table Key: \"key1\")\nGet(Name: table Key: \"key2\" Default: \"Key missing\") | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/GetImagePixel/","title":"GetImagePixel","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Int2</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int4</code><code>Float4</code> <code>Position</code>  Yes The position of the pixel to retrieve <code>None</code> <code>Image</code><code>&amp;Image</code> <code>AsInteger</code>  No Read the pixel as an integer <code>false</code> <code>Bool</code> <code>Default</code>  No When specified, out of bounds or otherwise failed reads will returns this value instead of failing <code>None</code> <code>None</code><code>Float4</code><code>Int4</code>"},{"location":"shards/shards/General/Hash/","title":"Hash","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int2</code>"},{"location":"shards/shards/General/HexToBytes/","title":"HexToBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A string representing hexadecimal digits to be converted to bytes. The input may optionally start with '0x' or '0X'. <code>String</code> <code>Output \u27a1\ufe0f</code> The decoded bytes from the input hexadecimal string. <code>Bytes</code> <p>Converts a hexadecimal string to its original byte representation.</p> <p> </p>"},{"location":"shards/shards/General/Highest/","title":"Highest","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code>"},{"location":"shards/shards/General/If/","title":"If","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the predicate. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input of the shard if <code>Passthrough</code> is <code>true</code>; otherwise, the output of the action that was performed (i.e. <code>Then</code> or <code>Else</code>). <code>Any</code> <code>Predicate</code>  No The predicate to evaluate in order to trigger <code>Then</code> (when <code>true</code>) or <code>Else</code> (when <code>false</code>). <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Then</code>  No The shards to activate when <code>Predicate</code> is <code>true</code>. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Else</code>  No The shards to activate when <code>Predicate</code> is <code>false</code>. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Passthrough</code>  No The output of this shard will be its input. <code>false</code> <code>Bool</code> <p>Evaluates a predicate and executes an action.</p>"},{"location":"shards/shards/General/If/#examples","title":"Examples","text":"Code <pre><code>5\nIf(\n Predicate: IsLess(2) Then:{\n  Msg(\"input is lesser than 2\")\n } Else:\n Msg(\"input is equal or greater than 2\"))\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/ImageToBytes/","title":"ImageToBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> An image to be converted to bytes. <code>Image</code> <code>Output \u27a1\ufe0f</code> The byte representation of the input image. <code>Bytes</code> <p>Converts an image to its byte representation.</p> <p> </p>"},{"location":"shards/shards/General/ImageToFloats/","title":"ImageToFloats","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of bytes or an image that will be converted into a sequence of another type. Each byte or pixel in the input is interpreted according to the specified type. <code>Image</code> <code>Output \u27a1\ufe0f</code> The output is a sequence of the specified type created from the input bytes or image. Each byte or pixel is converted to an element of the output sequence. <code>[Float]</code> <p>Converts a sequence of bytes or an image into a sequence of another specified type. Each byte or pixel in the input is interpreted and converted to an element of the output sequence of the specified type.</p> <p> </p>"},{"location":"shards/shards/General/Inc/","title":"Inc","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Any</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Any</code> <code>Value</code>  Yes The value to apply the operation to. <code>None</code> <code>&amp;Int</code><code>&amp;Int2</code><code>&amp;Int3</code><code>&amp;Int4</code><code>&amp;Int8</code><code>&amp;Int16</code><code>&amp;Float</code><code>&amp;Float2</code><code>&amp;Float3</code><code>&amp;Float4</code><code>&amp;Color</code><code>&amp;[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/General/IndexOf/","title":"IndexOf","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Int]</code><code>Int</code> <code>Item</code>  Yes The item to find the index of from the input, if it's a sequence it will try to match all the items in the sequence, in sequence. <code>None</code> <code>Any</code> <code>All</code>  No If true will return a sequence with all the indices of Item, empty sequence if not found. <code>false</code> <code>Bool</code> <code>Predicate</code>  Yes The shards to use as predicate. <code>None</code> <code>Shard</code><code>[Shard]</code>"},{"location":"shards/shards/General/Input/","title":"Input","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. <code>None</code> <code>Output \u27a1\ufe0f</code> The input value of the wire. <code>Any</code> <p>The input value of the wire.</p> <p> </p>"},{"location":"shards/shards/General/Insert/","title":"Insert","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to prepend to the collection. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <code>Index</code>  Yes The collection to add the input to. <code>None</code> <code>Int</code><code>&amp;Int</code> <code>Collection</code>  Yes The collection to add the input to. <code>None</code> <code>&amp;[Any]</code><code>&amp;String</code><code>&amp;Bytes</code> <p>Prepends the input to the context variable passed to <code>Collection</code>.</p> <p> </p>"},{"location":"shards/shards/General/IntsToBytes/","title":"IntsToBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of integers that will be converted into a byte array. <code>[Int]</code> <code>Output \u27a1\ufe0f</code> A byte array representing the sequence of integers. <code>Bytes</code> <p>Converts a sequence of integers into a byte array. Each integer in the sequence is serialized into its binary representation and concatenated into the resulting byte array.</p> <p> </p>"},{"location":"shards/shards/General/Is/","title":"Is","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/Is/#details","title":"Details","text":"<p>This shard compares the input to its <code>Value:</code> parameter and outputs <code>true</code> if they are equal or same, else outputs <code>false</code>.</p> <p>If the input and <code>Value:</code> parameter have different data types they will be assessed as inequal by default even if they are numerically equal (for example <code>int 5</code> is not equal to <code>float 5.0</code>).</p> <p>Note that for two sequences to be considered equal or identical they must both contain the same elements and in the same order.</p> <p>For two tables to be considered equal/identical they must both contain the same key/value pairs but the order of these pairs is irrelevant.</p> <p>See also</p> <ul> <li><code>IsNot</code></li> </ul>"},{"location":"shards/shards/General/Is/#examples","title":"Examples","text":"Code <pre><code>; ; string comparison\n\"hello\" | String.ToUpper | Is(\"HELLO\")\nLog(\"String is identical\")\nAssert.Is(true Break: true)\n\n; ; integer comparison\n2 | Math.Add(3) | Is(5)\nLog(\"Int is identical\")\nAssert.Is(true Break: true)\n\n; ; float comparison\n4.0 | Is((3.0 | Math.Add(1.0)))\nLog(\"Float is identical\")\nAssert.Is(true Break: true)\n\n; ; sequence comparison\n[1 2 3] | Is([1 2 3])\nLog(\"Sequence is identical\")\nAssert.Is(true Break: true)\n\n; ; table comparison 1\n{key1: [10 20] key2: [30]} | Is({key1: [10 20] key2: [30]})\nLog(\"Table is  identical\")\nAssert.Is(true Break: true)\n\n; ; table comparison 2\n{key2: [30] key1: [10 20]} | Is({key1: [10 20] key2: [30]})\nLog(\"Table is identical\")\nAssert.Is(true Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/IsAll/","title":"IsAll","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/IsAllLess/","title":"IsAllLess","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/IsAllLessEqual/","title":"IsAllLessEqual","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/IsAllMore/","title":"IsAllMore","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/IsAllMoreEqual/","title":"IsAllMoreEqual","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/IsAllNot/","title":"IsAllNot","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/IsAlmost/","title":"IsAlmost","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input can be of any number type or a sequence of such types. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> true if the input is almost equal to the given value; otherwise, false. <code>Bool</code> <code>Value</code>  Yes The value to test against for almost equality. <code>None</code> <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>[Any]</code> <code>Threshold</code>  No The smallest difference to be considered equal. Should be greater than zero. <code>1.19209e-07</code> <code>Float</code><code>Int</code> <p>Checks whether the input is almost equal to a given value.</p>"},{"location":"shards/shards/General/IsAlmost/#examples","title":"Examples","text":"Code <pre><code>; ; integer comparison\n199 | Math.Add(300) | IsAlmost(500 Threshold: 1)\nLog(\"Input is almost 500\")\nAssert.Is(true Break: true)\n\n; ; float comparison\n3.95 | IsAlmost(4.0 Threshold: 0.1)\nLog(\"Input is almost 4.0\")\nAssert.Is(true Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/IsAny/","title":"IsAny","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/IsAnyLess/","title":"IsAnyLess","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/IsAnyLessEqual/","title":"IsAnyLessEqual","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/IsAnyMore/","title":"IsAnyMore","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/IsAnyMoreEqual/","title":"IsAnyMoreEqual","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/IsAnyNot/","title":"IsAnyNot","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/IsAudio/","title":"IsAudio","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to check the type of. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the input type matches the specified type. <code>Bool</code> <p>Checks if the input value is of the specified type and returns a boolean result.</p> <p> </p>"},{"location":"shards/shards/General/IsBool/","title":"IsBool","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to check the type of. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the input type matches the specified type. <code>Bool</code> <p>Checks if the input value is of the specified type and returns a boolean result.</p> <p> </p>"},{"location":"shards/shards/General/IsBytes/","title":"IsBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to check the type of. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the input type matches the specified type. <code>Bool</code> <p>Checks if the input value is of the specified type and returns a boolean result.</p> <p> </p>"},{"location":"shards/shards/General/IsColor/","title":"IsColor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to check the type of. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the input type matches the specified type. <code>Bool</code> <p>Checks if the input value is of the specified type and returns a boolean result.</p> <p> </p>"},{"location":"shards/shards/General/IsFalse/","title":"IsFalse","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to check against. <code>Bool</code> <code>Output \u27a1\ufe0f</code> <code>true</code> if the input is <code>false</code>; otherwise, <code>false</code>. <code>Bool</code> <p>Gets whether the input is <code>false</code>.</p> <p> </p>"},{"location":"shards/shards/General/IsFloat/","title":"IsFloat","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to check the type of. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the input type matches the specified type. <code>Bool</code> <p>Checks if the input value is of the specified type and returns a boolean result.</p> <p> </p>"},{"location":"shards/shards/General/IsFloat2/","title":"IsFloat2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to check the type of. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the input type matches the specified type. <code>Bool</code> <p>Checks if the input value is of the specified type and returns a boolean result.</p> <p> </p>"},{"location":"shards/shards/General/IsFloat3/","title":"IsFloat3","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to check the type of. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the input type matches the specified type. <code>Bool</code> <p>Checks if the input value is of the specified type and returns a boolean result.</p> <p> </p>"},{"location":"shards/shards/General/IsFloat4/","title":"IsFloat4","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to check the type of. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the input type matches the specified type. <code>Bool</code> <p>Checks if the input value is of the specified type and returns a boolean result.</p> <p> </p>"},{"location":"shards/shards/General/IsImage/","title":"IsImage","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to check the type of. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the input type matches the specified type. <code>Bool</code> <p>Checks if the input value is of the specified type and returns a boolean result.</p> <p> </p>"},{"location":"shards/shards/General/IsInt/","title":"IsInt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to check the type of. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the input type matches the specified type. <code>Bool</code> <p>Checks if the input value is of the specified type and returns a boolean result.</p> <p> </p>"},{"location":"shards/shards/General/IsInt2/","title":"IsInt2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to check the type of. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the input type matches the specified type. <code>Bool</code> <p>Checks if the input value is of the specified type and returns a boolean result.</p> <p> </p>"},{"location":"shards/shards/General/IsInt3/","title":"IsInt3","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to check the type of. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the input type matches the specified type. <code>Bool</code> <p>Checks if the input value is of the specified type and returns a boolean result.</p> <p> </p>"},{"location":"shards/shards/General/IsInt4/","title":"IsInt4","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to check the type of. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the input type matches the specified type. <code>Bool</code> <p>Checks if the input value is of the specified type and returns a boolean result.</p> <p> </p>"},{"location":"shards/shards/General/IsLess/","title":"IsLess","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/IsLess/#details","title":"Details","text":"<p>This shard compares the input to its <code>Value:</code> parameter and outputs <code>true</code> if the input value is less than the value of its <code>Value:</code> parameter, else it outputs <code>false</code>.</p> <p>For a valid comparison, the input and <code>Value:</code> parameter must have identical data types. A comparison across different data types will throw a validation error.</p> <p>This shard can be used to compare simple data types like stings, integers, floats, etc. However, complex data types like sequences or tables cannot be meaningfully compared for the lesser-than/greater-than attribute. Using this shard on such complex data types will give unexpected and meaningless results.</p> <p>See also</p> <ul> <li><code>IsLessEqual</code></li> <li><code>IsMore</code></li> <li><code>IsMoreEqual</code></li> </ul>"},{"location":"shards/shards/General/IsLess/#examples","title":"Examples","text":"Code <pre><code>; ; string comparison\n\"a\" | IsLess(\"z\")\nLog(\"a is less than z numerically\")\nAssert.Is(true Break: true)\n\n; ; integer comparison\n2 | IsLess(5)\nLog(\"2 is less than 5\")\nAssert.Is(true Break: true)\n\n; ; float comparison\n2.0 | IsLess((2.0 | Math.Add(2.0)))\nLog(\"2.0 is less than 4.0\")\nAssert.Is(true Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/IsLessEqual/","title":"IsLessEqual","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/IsLessEqual/#details","title":"Details","text":"<p>This shard compares the input to its <code>Value:</code> parameter and outputs <code>true</code> if the input value is less than or equal to the value of its <code>Value:</code> parameter, else it outputs <code>false</code>.</p> <p>For a valid comparison, the input and <code>Value:</code> parameter must have identical data types. A comparison across different data types will throw a validation error.</p> <p>This shard can be used to compare simple data types like stings, integers, floats, etc. However, complex data types like sequences or tables cannot be meaningfully compared for the lesser-than/greater-than attribute. Using this shard on such complex data types will give unexpected and meaningless results.</p> <p>See also</p> <ul> <li><code>IsLess</code></li> <li><code>IsMore</code></li> <li><code>IsMoreEqual</code></li> </ul> <p> </p>"},{"location":"shards/shards/General/IsMore/","title":"IsMore","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/IsMore/#details","title":"Details","text":"<p>This shard compares the input to its <code>Value:</code> parameter and outputs <code>true</code> if the input value is more than the value of its <code>Value:</code> parameter, else it outputs <code>false</code>.</p> <p>For a valid comparison, the input and <code>Value:</code> parameter must have identical data types. A comparison across different data types will throw a validation error.</p> <p>This shard can be used to compare simple data types like stings, integers, floats, etc. However, complex data types like sequences or tables cannot be meaningfully compared for the lesser-than/greater-than attribute. Using this shard on such complex data types will give unexpected and meaningless results.</p> <p>See also</p> <ul> <li><code>IsLess</code></li> <li><code>IsLessEqual</code></li> <li><code>IsMoreEqual</code></li> </ul>"},{"location":"shards/shards/General/IsMore/#examples","title":"Examples","text":"Code <pre><code>; ; string comparison\n\"z\" | IsMore(\"a\")\nLog(\"'z' is more than 'a' numerically\")\nAssert.Is(true Break: true)\n\n; ; integer comparison\n5 | IsMore(2)\nLog(\"5 is more than 2\")\nAssert.Is(true Break: true)\n\n; ; float comparison\n5.0 | IsMore((1.0 | Math.Add(3.0)))\nLog(\"5.0 is more than 4.0\")\nAssert.Is(true Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/IsMoreEqual/","title":"IsMoreEqual","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/IsMoreEqual/#details","title":"Details","text":"<p>This shard compares the input to its <code>Value:</code> parameter and outputs <code>true</code> if the input value is more than or equal to the value of its <code>Value:</code> parameter, else it outputs <code>false</code>.</p> <p>For a valid comparison, the input and <code>Value:</code> parameter must have identical data types. A comparison across different data types will throw a validation error.</p> <p>This shard can be used to compare simple data types like stings, integers, floats, etc. However, complex data types like sequences or tables cannot be meaningfully compared for the lesser-than/greater-than attribute. Using this shard on such complex data types will give unexpected and meaningless results.</p> <p>See also</p> <ul> <li><code>IsLess</code></li> <li><code>IsLessEqual</code></li> <li><code>IsMore</code></li> </ul>"},{"location":"shards/shards/General/IsMoreEqual/#examples","title":"Examples","text":"Code <pre><code>; ; string comparison\n\"z\" | IsMoreEqual(\"a\")\nLog(\"'z' is more or equal than 'a' numerically\")\nAssert.Is(true Break: true)\n\n; ; integer comparison\n5 | IsMoreEqual(2)\nLog(\"5 is more or equal to 2\")\nAssert.Is(true Break: true)\n\n; ; float comparison\n9.0 | IsMoreEqual((1.0 | Math.Add(2.0)))\nLog(\"9.0 is more or equal to 2.0\")\nAssert.Is(true Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/IsNone/","title":"IsNone","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value which type to check against. <code>Any</code> <code>Output \u27a1\ufe0f</code> <code>true</code> is the type of input is <code>None</code>; otherwise, <code>false</code>. <code>Bool</code> <p>Gets whether the type of the input is <code>None</code>.</p> <p> </p>"},{"location":"shards/shards/General/IsNot/","title":"IsNot","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Value</code>  No The value to test against for equality. <code>0</code> <code>Any</code>"},{"location":"shards/shards/General/IsNot/#details","title":"Details","text":"<p>This shard compares the input to its <code>Value:</code> parameter and outputs <code>true</code> if they are different, else outputs <code>false</code>.</p> <p>If the input and <code>Value:</code> parameter have different data types they will be assessed as inequal by default even if they are numerically equal (for example <code>int 5</code> is not equal to <code>float 5.0</code>).</p> <p>See also</p> <ul> <li><code>Is</code></li> </ul>"},{"location":"shards/shards/General/IsNot/#examples","title":"Examples","text":"Code <pre><code>; ; string comparison\n\"hello\" | IsNot(\"HELLO\")\nLog(\"hello is not HELLO\")\nAssert.Is(true Break: true)\n\n; ; integer comparison\n2 | Math.Add(3) | IsNot(4)\nLog(\"5 is not 4\")\nAssert.Is(true Break: true)\n\n; ; integer/float comparison\n4 | IsNot((3.0 | Math.Add(1.0)))\nLog(\"4is not 4.0\")\nAssert.Is(true Break: true)\n\n; ; string/integer comparison\n\"Shards\" | IsNot(122)\nLog(\"'Shards' is not 122\")\nAssert.Is(true Break: true)\n\n; ; sequence comparison\n[1 2 3] | IsNot([1 3])\nLog(\"[1 2 3] is not [1 3]\")\nAssert.Is(true Break: true)\n\n; ; table comparison\n{key3: [10 20] key2: [30]} | IsNot({key1: [10 20] key2: [30]})\nAssert.Is(true Break: true)\n\n; ; sequence/table comparison\n[1 2 3] | IsNot({key1: [1 2] key2: [3]})\nAssert.Is(true Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/IsNotNone/","title":"IsNotNone","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value which type to check against. <code>Any</code> <code>Output \u27a1\ufe0f</code> <code>true</code> is the type of input different from <code>None</code>; otherwise, <code>false</code>. <code>Bool</code> <p>Gets whether the type of the input is different from <code>None</code>.</p> <p> </p>"},{"location":"shards/shards/General/IsRunning/","title":"IsRunning","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Wire</code>  No The wire to run. <code>None</code> <code>Wire</code><code>String</code><code>None</code> <p>Checks if a wire is running and outputs true if that is the case, false if not.</p> <p> </p>"},{"location":"shards/shards/General/IsSeq/","title":"IsSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to check the type of. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the input type matches the specified type. <code>Bool</code> <p>Checks if the input value is of the specified type and returns a boolean result.</p> <p> </p>"},{"location":"shards/shards/General/IsString/","title":"IsString","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to check the type of. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the input type matches the specified type. <code>Bool</code> <p>Checks if the input value is of the specified type and returns a boolean result.</p> <p> </p>"},{"location":"shards/shards/General/IsTable/","title":"IsTable","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to check the type of. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the input type matches the specified type. <code>Bool</code> <p>Checks if the input value is of the specified type and returns a boolean result.</p> <p> </p>"},{"location":"shards/shards/General/IsTrue/","title":"IsTrue","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to check against. <code>Bool</code> <code>Output \u27a1\ufe0f</code> <code>true</code> if the input is <code>true</code>; otherwise, <code>false</code>. <code>Bool</code> <p>Gets whether the input is <code>true</code>.</p> <p> </p>"},{"location":"shards/shards/General/IsValidNumber/","title":"IsValidNumber","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The floating-point number to be checked. <code>Float</code> <code>Output \u27a1\ufe0f</code> Returns true if the input is a valid normal floating-point number, otherwise returns false. <code>Bool</code>"},{"location":"shards/shards/General/IsWire/","title":"IsWire","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to check the type of. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the input type matches the specified type. <code>Bool</code> <p>Checks if the input value is of the specified type and returns a boolean result.</p> <p> </p>"},{"location":"shards/shards/General/Isolate/","title":"Isolate","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Contents</code>  Yes <code>None</code> <code>Shard</code><code>[Shard]</code> <code>Include</code>  No Includes only the listed variables <code>None</code> <code>None</code><code>[String]</code> <code>Exclude</code>  No Ignores all the listed variables <code>None</code> <code>None</code><code>[String]</code> <p>Isolates the inner shards' environment by only allowing certain variables</p> <p> </p>"},{"location":"shards/shards/General/LastError/","title":"LastError","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code>"},{"location":"shards/shards/General/Lerp/","title":"Lerp","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>First</code>  Yes The first value <code>None</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <code>Second</code>  Yes The second value <code>None</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Linearly interpolate between two values based on input</p> <p> </p>"},{"location":"shards/shards/General/Limit/","title":"Limit","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input sequence from which elements will be extracted. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The extracted elements from the input sequence. If the input sequence contains multiple types, the output will be a sequence of those types. <code>Any</code> <code>Max</code>  No How many maximum elements to take from the input sequence. <code>0</code> <code>Int</code>"},{"location":"shards/shards/General/LoadImage/","title":"LoadImage","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code><code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Image</code> <code>File</code>  No The file to read/write from. <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>BPP</code>  No bits per pixel (HDR images loading and such!) <code>BPP::u8</code> <code>BPP</code> <code>PremultiplyAlpha</code>  No Toggle premultiplication of alpha channels (E.g. To support PNG images) <code>false</code> <code>Bool</code>"},{"location":"shards/shards/General/Log/","title":"Log","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to be logged to the console. <code>Any</code> <code>Output \u27a1\ufe0f</code> The same value that was inputted, unmodified. <code>Any</code> <code>Prefix</code>  No The message to prefix to the logged output. Note: the prefix will include a colon ':' before the value. `` <code>String</code> <code>Level</code>  No The level of logging. <code>LogLevel::Info</code> <code>LogLevel</code> <p>Logs the output of a shard or the value of a variable to the console along with an optional prefix string. The logging level can be specified to control the verbosity of the log output.</p>"},{"location":"shards/shards/General/Log/#details","title":"Details","text":"<p>This shard is used for printing information to the console for debugging purposes.</p> <p>It can log the output of a shard or the value of a variable. It can also prefix a message string to the logged output while displaying it in the console.</p>"},{"location":"shards/shards/General/Log/#examples","title":"Examples","text":"Code <pre><code>\"I am a var\" = var\n2 | Math.Multiply(4) | Log(Level: LogLevel::Info) ;; log previous shard output\nvar Log(Level: LogLevel::Warning)  ;; log a variable value\n3 | Math.Add(4) Log(Prefix: \"String\" Level: LogLevel::Error) ;; prefix a string to the logged output\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>\"I am a var\" = var\n2 | Math.Multiply(4) | Log ;; log previous shard output\nvar | Log  ;; log a variable value\n3 | Math.Add(4) | Log(Prefix: \"String\") ;; prefix a string to the logged output\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/LogType/","title":"LogType","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value whose type will be logged to the console. <code>Any</code> <code>Output \u27a1\ufe0f</code> The same value that was inputted, unmodified. <code>Any</code> <code>Prefix</code>  No The message to prefix to the logged output. Note: the prefix will include a colon ':' before the value. `` <code>String</code> <code>Level</code>  No The level of logging. <code>LogLevel::Info</code> <code>LogLevel</code> <p>Logs the type of the value to the console along with an optional prefix string. The logging level can be specified to control the verbosity of the log output.</p> <p> </p>"},{"location":"shards/shards/General/Lowest/","title":"Lowest","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code>"},{"location":"shards/shards/General/MakeColor/","title":"MakeColor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses parameters to construct a vector of the specified type. <code>None</code> <code>Output \u27a1\ufe0f</code> The constructed vector with the specified components. If not all components are provided, default values will be used for the remaining components. <code>Any</code> <code>0</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>1</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>2</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>3</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <p>Constructs a vector of the specified type (e.g., integers, floats, colors) using the given component values. If only one component is provided, it will be broadcasted to all components. For MakeColor, missing components will be filled with default values. Use @i2, @i3, @i4, @i8, @i16, @f2, @f3, @f4 built-ins for convenience.</p> <p> </p>"},{"location":"shards/shards/General/MakeFloat2/","title":"MakeFloat2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses parameters to construct a vector of the specified type. <code>None</code> <code>Output \u27a1\ufe0f</code> The constructed vector with the specified components. If not all components are provided, default values will be used for the remaining components. <code>Any</code> <code>0</code>  Yes Vector component <code>None</code> <code>&amp;Float</code><code>Float</code> <code>1</code>  Yes Vector component <code>None</code> <code>&amp;Float</code><code>Float</code> <p>Constructs a vector of the specified type (e.g., integers, floats, colors) using the given component values. If only one component is provided, it will be broadcasted to all components. For MakeColor, missing components will be filled with default values. Use @i2, @i3, @i4, @i8, @i16, @f2, @f3, @f4 built-ins for convenience.</p> <p> </p>"},{"location":"shards/shards/General/MakeFloat3/","title":"MakeFloat3","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses parameters to construct a vector of the specified type. <code>None</code> <code>Output \u27a1\ufe0f</code> The constructed vector with the specified components. If not all components are provided, default values will be used for the remaining components. <code>Any</code> <code>0</code>  Yes Vector component <code>None</code> <code>&amp;Float</code><code>Float</code> <code>1</code>  Yes Vector component <code>None</code> <code>&amp;Float</code><code>Float</code> <code>2</code>  Yes Vector component <code>None</code> <code>&amp;Float</code><code>Float</code> <p>Constructs a vector of the specified type (e.g., integers, floats, colors) using the given component values. If only one component is provided, it will be broadcasted to all components. For MakeColor, missing components will be filled with default values. Use @i2, @i3, @i4, @i8, @i16, @f2, @f3, @f4 built-ins for convenience.</p> <p> </p>"},{"location":"shards/shards/General/MakeFloat4/","title":"MakeFloat4","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses parameters to construct a vector of the specified type. <code>None</code> <code>Output \u27a1\ufe0f</code> The constructed vector with the specified components. If not all components are provided, default values will be used for the remaining components. <code>Any</code> <code>0</code>  Yes Vector component <code>None</code> <code>&amp;Float</code><code>Float</code> <code>1</code>  Yes Vector component <code>None</code> <code>&amp;Float</code><code>Float</code> <code>2</code>  Yes Vector component <code>None</code> <code>&amp;Float</code><code>Float</code> <code>3</code>  Yes Vector component <code>None</code> <code>&amp;Float</code><code>Float</code> <p>Constructs a vector of the specified type (e.g., integers, floats, colors) using the given component values. If only one component is provided, it will be broadcasted to all components. For MakeColor, missing components will be filled with default values. Use @i2, @i3, @i4, @i8, @i16, @f2, @f3, @f4 built-ins for convenience.</p> <p> </p>"},{"location":"shards/shards/General/MakeInt16/","title":"MakeInt16","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses parameters to construct a vector of the specified type. <code>None</code> <code>Output \u27a1\ufe0f</code> The constructed vector with the specified components. If not all components are provided, default values will be used for the remaining components. <code>Any</code> <code>0</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>1</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>2</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>3</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>4</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>5</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>6</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>7</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>8</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>9</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>10</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>11</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>12</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>13</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>14</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>15</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <p>Constructs a vector of the specified type (e.g., integers, floats, colors) using the given component values. If only one component is provided, it will be broadcasted to all components. For MakeColor, missing components will be filled with default values. Use @i2, @i3, @i4, @i8, @i16, @f2, @f3, @f4 built-ins for convenience.</p> <p> </p>"},{"location":"shards/shards/General/MakeInt2/","title":"MakeInt2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses parameters to construct a vector of the specified type. <code>None</code> <code>Output \u27a1\ufe0f</code> The constructed vector with the specified components. If not all components are provided, default values will be used for the remaining components. <code>Any</code> <code>0</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>1</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <p>Constructs a vector of the specified type (e.g., integers, floats, colors) using the given component values. If only one component is provided, it will be broadcasted to all components. For MakeColor, missing components will be filled with default values. Use @i2, @i3, @i4, @i8, @i16, @f2, @f3, @f4 built-ins for convenience.</p> <p> </p>"},{"location":"shards/shards/General/MakeInt3/","title":"MakeInt3","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses parameters to construct a vector of the specified type. <code>None</code> <code>Output \u27a1\ufe0f</code> The constructed vector with the specified components. If not all components are provided, default values will be used for the remaining components. <code>Any</code> <code>0</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>1</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>2</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <p>Constructs a vector of the specified type (e.g., integers, floats, colors) using the given component values. If only one component is provided, it will be broadcasted to all components. For MakeColor, missing components will be filled with default values. Use @i2, @i3, @i4, @i8, @i16, @f2, @f3, @f4 built-ins for convenience.</p> <p> </p>"},{"location":"shards/shards/General/MakeInt4/","title":"MakeInt4","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses parameters to construct a vector of the specified type. <code>None</code> <code>Output \u27a1\ufe0f</code> The constructed vector with the specified components. If not all components are provided, default values will be used for the remaining components. <code>Any</code> <code>0</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>1</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>2</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>3</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <p>Constructs a vector of the specified type (e.g., integers, floats, colors) using the given component values. If only one component is provided, it will be broadcasted to all components. For MakeColor, missing components will be filled with default values. Use @i2, @i3, @i4, @i8, @i16, @f2, @f3, @f4 built-ins for convenience.</p> <p> </p>"},{"location":"shards/shards/General/MakeInt8/","title":"MakeInt8","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses parameters to construct a vector of the specified type. <code>None</code> <code>Output \u27a1\ufe0f</code> The constructed vector with the specified components. If not all components are provided, default values will be used for the remaining components. <code>Any</code> <code>0</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>1</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>2</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>3</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>4</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>5</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>6</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <code>7</code>  Yes Vector component <code>None</code> <code>&amp;Int</code><code>Int</code> <p>Constructs a vector of the specified type (e.g., integers, floats, colors) using the given component values. If only one component is provided, it will be broadcasted to all components. For MakeColor, missing components will be filled with default values. Use @i2, @i3, @i4, @i8, @i16, @f2, @f3, @f4 built-ins for convenience.</p> <p> </p>"},{"location":"shards/shards/General/MakeTrait/","title":"MakeTrait","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Name</code>  Yes The trait name <code>None</code> <code>String</code> <code>Types</code>  Yes The trait types <code>None</code> <code>{Type}</code>"},{"location":"shards/shards/General/Map/","title":"Map","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Any]</code> <code>Apply</code>  Yes The function to apply to each item of the sequence. <code>None</code> <code>Shard</code><code>[Shard]</code>"},{"location":"shards/shards/General/Match/","title":"Match","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that's compared with the declared cases. <code>Any</code> <code>Output \u27a1\ufe0f</code> Same value as input if <code>:Passthrough</code> is <code>true</code> else the output of the matched case's shard if <code>:Passthrough</code> is <code>false</code>. <code>Any</code> <code>Cases</code>  No Values to match against the input. A <code>nil</code> case will match anything. <code>[]</code> <code>[Any]</code> <code>Passthrough</code>  No Parameter to control the shard's output. <code>true</code> allows the <code>Match</code> shard's input itself to appear as its output; <code>false</code> allows the matched shard's output to appear as <code>Match</code> shard's output. <code>true</code> <code>Bool</code> <p>Compares the input with the declared cases (in order of the declaration) and activates the shard of the first matched case.</p>"},{"location":"shards/shards/General/Match/#details","title":"Details","text":"<p><code>Match</code> compares its input with every case declared via the <code>Cases:</code> parameter (in the order of their declaration) till a match is found.</p> <p>Once a match is found the shard of that matched case is activated/executed and <code>Match</code> execution stops. All subsequent cases (even matching ones) are ignored.</p> <p>A <code>none</code> case matches anything, so it's a good practice to declare a <code>none</code> case at the end of <code>Cases:</code> to execute some default logic if no valid matches exist for a given input. If you do not have a <code>none</code> case, then a non-matching input to <code>Match</code> will fail the shard.</p>"},{"location":"shards/shards/General/Match/#a-note-on-passthrough","title":"A note on <code>Passthrough:</code>","text":"<p>The <code>Passthrough:</code> parameter can control the final output of the shard it applies to.</p> <p>Setting this parameter to <code>true</code> allows the original input of a shard to pass through as its output as well. If this parameter is set to <code>false</code>, passthrough is suppressed and then the output of the shard is the actual computed value coming out from the shard execution.</p> <p><code>Passthrough:</code> parameter set to <code>true</code> will allow the original input (the one that was used to match against every case in the shard) to be returned as the final output of <code>Match</code>, irrespective of the case match results. Setting <code>Passthrough:</code> to <code>false</code> will enable the matched case's shard output to be returned as the final output of <code>Match</code>.</p> <p>However, for <code>Passthrough:</code> to work correctly, the data types of the shard input and the shard's case outputs must match.</p>"},{"location":"shards/shards/General/Match/#examples","title":"Examples","text":"Code <pre><code>; ; no matches + nil match in the middle + with passthrough\n1\nMatch([2 {Msg(\"Matched 2\")} ; ; case processed, match not found\n       none Msg(\"Matched nil\") ; ; case processed, match found\n       3 Msg(\"Matched 3\")] ; ; case ignored\nPassthrough: true) ; ; passthrough --\nAssert.Is(1 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; ; multiple matches + nil match at end + no passthrough\n1\nMatch([\n  (0 | Math.Add(1)) {\"Matched 1a\"} ; ; case processed, match found\n  1 {\"Matched 1\"} ; ; case ignored\n  2 {\"Matched 2\"} ; ; case ignored\n  none {\"Matched nil\"}\n] ; ; case ignored \nPassthrough: false) ; ; no passthrough --\nLog(\"Result\")\nAssert.Is(\"Matched 1a\" true)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; ; multiple matches + nil match at start + with passthrough\n1\nMatch([\n  none {Msg(\"Case 0\")}\n  1 {Msg(\"Case 1\")}\n  2 {Msg(\"Case 2\")}\n] Passthrough: true)\nLog(\"Match Passthrough Value\")\nAssert.Is(1 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; ; single match + nil match at end + no passthrough\n1\nMatch([2 {\"Matched 2\"} ; ; case processed, match not found\n       1 {\"Matched 1\"} ; ; case processed, match found\n       3 {\"Matched 3\"} ; ; case ignored\n       none {\"Matched nil\"}] ; ; case ignored \nPassthrough: false) ; ; no passthrough --\nLog(\"Result\")\nAssert.Is(\"Matched 1\" true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Max/","title":"Max","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/General/Max/#details","title":"Details","text":"<p>This shard compares the input to its <code>Operand:</code> parameter and outputs the greater of the two values.</p> <p>If the input is a sequence and the <code>Operand:</code> a single number, each input element is compared with the <code>Operand:</code> and the greater value from each comparison is collected and output as a sequence.</p> <p>If the input and <code>Operand:</code> both are sequences, each element of the input sequence is compared with the corresponding-index element in the <code>Operand:</code> sequence and the greater value from each comparison is collected and output as a sequence.</p> <p>If the input sequence is smaller in size than the <code>Operand:</code> sequence the comparison stops with the last element of the input sequence. If the <code>Operand:</code> sequence is smaller the remaining input sequence elements loop over the <code>Operand:</code> sequence till all input sequence elements have been compared.</p> <p>This shard works only on numbers (integers, floats) and on sequences of such numbers. The data types of the input and the <code>Operand:</code> parameters must match.</p> <p>See also</p> <ul> <li><code>Min</code></li> </ul>"},{"location":"shards/shards/General/Max/#examples","title":"Examples","text":"Code <pre><code>; ; sequence vs number\nConst([-1 0 1 2 5])\nMax(Operand:3)\nLog(\"Result 1\")\nAssert.Is([3 3 3 3 5] true)\n\n; ; number vs number\nConst(3)\nMax( Operand:2)\nLog(\"Result 2\")\nAssert.Is(3 true)\n\n; ; sequence (equal) vs sequence (equal)\nConst([-1 0 1 2 5])\nMax(Operand:[3 -2 4 0 1])\nLog(\"Result 3\")\nAssert.Is([3 0 4 2 5] true)\n\n; ; sequence (smaller) vs sequence (bigger)\nConst([-1 0 5])\nMax(Operand:[3 -2 4 0 1])\nLog(\"Result 4\")\nAssert.Is([3 0 5] true)\n\n; ; sequence (bigger) vs sequence (smaller)\nConst([-1 0 1 2 5])\nMax(Operand:[3 -2 1])\nLog(\"Result 5\")\nAssert.Is([3 0 1 3 5] true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Maybe/","title":"Maybe","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Must match the input types of the first shard in the sequence. <code>Any</code> <code>Output \u27a1\ufe0f</code> Will match the output types of the first shard of the sequence. <code>Any</code> <code>Shards</code>  No The shards to activate. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Else</code>  No The shards to activate on failure. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Silent</code>  No If logging should be disabled while running the shards (this will also disable (Log) and (Msg) shards) and no warning message should be printed on failure. <code>false</code> <code>Bool</code> <p>Attempts to activate a shard or a sequence of shards. Upon failure, activate another shard or sequence of shards.</p>"},{"location":"shards/shards/General/Maybe/#examples","title":"Examples","text":"Code <pre><code>[1 2]\nMaybe(\n  Shards: Take(3)\n  Else:\n  {Msg(\"Invalid, default to 42\" LogLevel::Warning)\n    42\n  }\n  Silent: true\n)\nLog(\"result\")\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>[1 2]\nMaybe(\n  Shards: Take(3)\n  Else: Take(0)\n  Silent: true\n)\nLog(\"result\")\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Memoize/","title":"Memoize","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Evaluate</code>  Yes The shards to evaluate the cached value based on input <code>None</code> <code>Shard</code><code>[Shard]</code> <p>Computes a value</p> <p> </p>"},{"location":"shards/shards/General/Merge/","title":"Merge","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>{Any}</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{Any}</code> <code>Target</code>  Yes The table to merge into. <code>None</code> <code>&amp;{Any}</code> <p>Combine two tables into one, with the input table taking priority over the operand table, which will be written and returned as output. This shard is useful in scenarios where you need to merge data from different sources while keeping the priority of certain values.</p> <p> </p>"},{"location":"shards/shards/General/Min/","title":"Min","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/General/Min/#details","title":"Details","text":"<p>This shard compares the input to its <code>Operand:</code> parameter and outputs the lesser of the two values.</p> <p>If the input is a sequence and the <code>Operand:</code> a single number, each input element is compared with the <code>Operand:</code> and the lesser value from each comparison is collected and output as a sequence.</p> <p>If the input and <code>Operand:</code> both are sequences, each element of the input sequence is compared with the corresponding-index element in the <code>Operand:</code> sequence and the lesser value from each comparison is collected and output as a sequence.</p> <p>If the input sequence is smaller in size than the <code>Operand:</code> sequence the comparison stops with the last element of the input sequence. If the <code>Operand:</code> sequence is smaller the remaining input sequence elements loop over the <code>Operand:</code> sequence till all input sequence elements have been compared.</p> <p>This shard works only on numbers (integers, floats) and on sequences of such numbers. The data types of the input and the <code>Operand:</code> parameters must match.</p> <p>See also</p> <ul> <li><code>Max</code></li> </ul>"},{"location":"shards/shards/General/Min/#examples","title":"Examples","text":"Code <pre><code>;; sequence vs number\nConst([-1 0 1 2 5])\nMin(Operand:3)\nLog(\"Result 1\")\nAssert.Is([-1 0 1 2 3] true)\n\n;; number vs number\nConst(3)\nMin(Operand:2)\nLog(\"Result 2\")\nAssert.Is(2 true)\n\n;; sequence (equal) vs sequence (equal)\nConst([-1 0 1 2 5])\nMin(Operand:[3 -2 4 0 1])\nLog(\"Result 3\")\nAssert.Is([-1 -2 1 0 1] true)\n\n;; sequence (smaller) vs sequence (bigger)\nConst([-1 0 5])\nMin(Operand:[3 -2 4 0 1])\nLog(\"Result 4\")\nAssert.Is([-1 -2 4] true)\n\n;; sequence (bigger) vs sequence (smaller)\nConst([-1 0 1 2 5])\nMin(Operand:[3 -2 1])\nLog(\"Result 5\")\nAssert.Is([-1 -2 1 2 -2] true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Msg/","title":"Msg","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input is ignored. This shard displays a static message. <code>Any</code> <code>Output \u27a1\ufe0f</code> The same variable that was inputted, unmodified. <code>Any</code> <code>Message</code>  No The message to display on the user's screen or console. `` <code>String</code> <code>Level</code>  No The level of logging. <code>LogLevel::Info</code> <code>LogLevel</code> <p>Displays the passed message string to the user via standard output. The input variable is ignored, and only the static message is displayed.</p>"},{"location":"shards/shards/General/Msg/#details","title":"Details","text":"<p>This shard is used for displaying messages to the user on the standard output (which is usually the console).</p> <p>The message to display can be passed to this shard either as a string or as a variable holding a value. In case a variable is passed the shard displays the variable's value.</p>"},{"location":"shards/shards/General/Msg/#examples","title":"Examples","text":"Code <pre><code>@template(msgshard [a b] {\n  Msg(a LogLevel::Warning) ; ; print value of 1st arg passed\n  Msg(b LogLevel::Error)\n})\n; ; print value of 2nd arg passed\n\n@wire(main-wire {\n\nMsg(\"Hello World\" LogLevel::Info) ; ; prints string\n@msgshard(\"Bye\" \"Universe\")\n\n})\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@template(msgshard [a b] {\n  Msg(a) ; ; print value of 1st arg passed\n  Msg(b)\n})\n; ; print value of 2nd arg passed\n\n@wire(main-wire {\n\nMsg(\"Hello World\") ; ; prints string\n@msgshard(\"Bye\" \"Universe\")\n\n})\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Mul/","title":"Mul","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p> <p> </p>"},{"location":"shards/shards/General/Mutant/","title":"Mutant","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Shard</code>  Yes The shard to mutate. <code>None</code> <code>Shard</code> <code>Indices</code>  Yes The parameter indices to mutate of the inner shard. <code>None</code> <code>[Int]</code> <code>Mutations</code>  Yes Optional wires of shards (or Nones) to call when mutating one of the parameters, if empty a default operator will be used. <code>None</code> <code>[Shard [Shard] None]</code> <code>Options</code>  No Mutation options table - a table with mutation options. <code>None</code> <code>None</code><code>{Any}</code>"},{"location":"shards/shards/General/NaNTo0/","title":"NaNTo0","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A float value or a sequence of float values to be checked for NaN. <code>Float</code><code>[Float]</code> <code>Output \u27a1\ufe0f</code> The input with any NaN values replaced by 0. <code>Float</code><code>[Float]</code> <p>Replaces NaN (Not a Number) values in the input with 0. This shard can handle both single float values and sequences of float values.</p> <p> </p>"},{"location":"shards/shards/General/NanoID/","title":"NanoID","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <code>Hyphenated</code>  No Whether to use hyphens in the output. <code>21</code> <code>Bool</code> <p>Creates a random NanoID.</p> <p> </p>"},{"location":"shards/shards/General/Not/","title":"Not","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to be negated. <code>Bool</code> <code>Output \u27a1\ufe0f</code> The negation of the input. <code>Bool</code> <p>Computes the logical negation of the input.</p>"},{"location":"shards/shards/General/Not/#examples","title":"Examples","text":"Code <pre><code>false | Not\nLog(\"Result 1\")\nAssert.Is(true Break: true)\n\ntrue | Not\nLog(\"Result 2\")\nAssert.Is(false Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Once/","title":"Once","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Action</code>  Yes The shard or sequence of shards to execute. <code>None</code> <code>Shard</code><code>[Shard]</code> <code>Every</code>  Yes The number of seconds to wait until repeating the action, if 0 the action will happen only once per wire flow execution. <code>None</code> <code>Float</code><code>&amp;Float</code> <p>Executes the shard or sequence of shards with the desired frequency in a wire flow execution.</p>"},{"location":"shards/shards/General/Once/#details","title":"Details","text":"<p>If you run <code>Once</code> with <code>Every:</code> set to its default value (i.e., 0), the sequence of shards will be executed only once per wire flow execution. Since this a very common use case (initialize loop counters, etc.) there's an alias for this - <code>Setup</code>.</p> <p>Basically, <code>Setup</code> is just <code>Once</code> with its <code>Every:</code> parameter value permanently set to 0.</p>"},{"location":"shards/shards/General/Once/#examples","title":"Examples","text":"Code <pre><code>@wire(main-wire {\n\n  Once({\n    0 &gt;= counter\n    counter | Log(\"counter set to 0 only once\")\n    ; ; =&gt; 0\n  })\n  Math.Inc(counter)\n  counter | Log(\"counter incremented every time wire executes\")\n  ; ; =&gt; 1, 2, 3, 4, 5\n} Looped: true)\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(main-wire {\n\n  \"Hello World, every 1.5s during a wire flow execution\" = string1\n  \"Hello World, once during every wire flow execution\" = string2\n\n  string1\n  Once(\n    Action: Log\n    Every: 1.5\n  )\n\n  string2\n  Once(\n    Action: Log\n  )\n\n} Looped: true)\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Or/","title":"Or","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> If true, the flow stops and succeeds; otherwise, the flow continues. <code>Bool</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be the input of the current conditional flow or wire. <code>Bool</code> <p>Computes the logical OR between the input of this shard and the output of the next shard. If the input is true, the flow stops and succeeds; if false, the flow continues with the next shard. Typically used within conditional flows (e.g., If, When) to chain conditions. Note: Outside a conditional flow, it might restart the current wire, which can be used as a trick in certain scenarios.</p>"},{"location":"shards/shards/General/Or/#examples","title":"Examples","text":"Code <pre><code>false | Or | false\nAssert.Is(false Break: true)\n\nfalse | Or | true\nAssert.Is(true Break: true)\n\ntrue | Or | false\nAssert.Is(true Break: true)\n\ntrue | Or | true\nAssert.Is(true Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/ParseFloat/","title":"ParseFloat","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A string representing a number. <code>String</code> <code>Output \u27a1\ufe0f</code> A floating-point number equivalent to the number contained in the string input. <code>Float</code> <p>Converts the string representation of a number to a floating-point number equivalent.</p>"},{"location":"shards/shards/General/ParseFloat/#examples","title":"Examples","text":"Code <pre><code>\"3.14\" | ParseFloat | Log\nAssert.Is(3.14 Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/ParseInt/","title":"ParseInt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A string representing a number. <code>String</code> <code>Output \u27a1\ufe0f</code> A signed integer equivalent to the number contained in the string input. <code>Int</code> <code>Base</code>  No Numerical base (radix) that determines the valid characters and their interpretation. <code>10</code> <code>Int</code> <p>Converts the string representation of a number to a signed integer equivalent.</p>"},{"location":"shards/shards/General/ParseInt/#examples","title":"Examples","text":"Code <pre><code>\"42\" | ParseInt | Log\nAssert.Is(42 Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Pass/","title":"Pass","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code>"},{"location":"shards/shards/General/Pause/","title":"Pause","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> Passes the input value through. <code>Any</code> <code>Time</code>  No The amount of time in seconds (can be fractional) to pause this wire. <code>None</code> <code>None</code><code>Float</code><code>Int</code><code>&amp;Float</code><code>&amp;Int</code> <p>Pauses the wire for a given amount of time.</p> <p> </p>"},{"location":"shards/shards/General/PauseMs/","title":"PauseMs","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> Passes the input value through. <code>Any</code> <code>Time</code>  No The amount of time in milliseconds to pause this wire. <code>None</code> <code>None</code><code>Int</code><code>&amp;Int</code> <p>Pauses the wire for a given amount of time.</p> <p> </p>"},{"location":"shards/shards/General/Peek/","title":"Peek","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Wire</code>  No The wire to run. <code>None</code> <code>Wire</code><code>String</code><code>None</code> <p>Verifies if another wire has finished processing. Returns the wire's output if complete, or None if still in progress.</p> <p> </p>"},{"location":"shards/shards/General/Pop/","title":"Pop","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The element popped from the sequence. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>&amp;Any</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>Pops (removes and outputs) the last element of the sequence variable. Works only on sequences. If the variable is not a sequence or the sequence is empty, an error is thrown.</p>"},{"location":"shards/shards/General/Pop/#details","title":"Details","text":"<p><code>Pop</code> drops (removes) the last element of the sequence variable that has been passed to in the <code>Name:</code> parameter and makes it available to the next shard as its input.</p> <p>This shard works on both sequences and tables. Parameter <code>Key:</code> applies only to tables.</p> <p>Since variables may be locally scoped (created with <code>Global: false</code>; exists only for current wire) or globally scoped (created with <code>Global: true</code>; exists for all wires of that mesh), both parameters <code>Global:</code> and <code>Name:</code> are used in combination to identify the correct variable to pop elements from. </p> <p>Input field is ignored and the output of this shard is the element which was popped from the sequence passed to it via the <code>Name:</code> parameter. </p> <p>See also</p> <ul> <li><code>AppendTo</code></li> <li><code>Clear</code></li> <li><code>Drop</code></li> <li><code>DropFront</code></li> <li><code>Erase</code></li> <li><code>PopFront</code></li> <li><code>Remove</code></li> </ul>"},{"location":"shards/shards/General/Pop/#examples","title":"Examples","text":"Code <pre><code>; ; pop last element from a local sequence\n[10 20 30 40] &gt;= seq ; ; create a local sequence\nGet(seq) | Log ; ; local sequence =&gt; [10, 20, 30, 40]\nPop(Name: seq) | Log ; ; pops the last element as output =&gt; 40\nGet(seq) | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/PopFront/","title":"PopFront","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The element popped from the sequence. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>&amp;Any</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>Pops (removes and outputs) the first element of the sequence variable. Works only on sequences. If the variable is not a sequence or the sequence is empty, an error is thrown.</p>"},{"location":"shards/shards/General/PopFront/#details","title":"Details","text":"<p><code>PopFront</code> drops (removes) the first element of the sequence variable that has been passed to in the <code>Name:</code> parameter and makes it available to the next shard as its input.</p> <p>This shard works on both sequences and tables. Parameter <code>Key:</code> applies only to tables.</p> <p>Since variables may be locally scoped (created with <code>Global: false</code>; exists only for current wire) or globally scoped (created with <code>Global: true</code>; exists for all wires of that mesh), both parameters <code>Global:</code> and <code>Name:</code> are used in combination to identify the correct variable to pop elements from. </p> <p>Input field is ignored and the output of this shard is the element which was popped from the sequence passed to it via the <code>Name:</code> parameter. </p> <p>See also</p> <ul> <li><code>Clear</code></li> <li><code>Drop</code></li> <li><code>DropFront</code></li> <li><code>Erase</code></li> <li><code>Pop</code></li> <li><code>PrependTo</code></li> <li><code>Remove</code></li> </ul>"},{"location":"shards/shards/General/PopFront/#examples","title":"Examples","text":"Code <pre><code>; ; pop first element from a local sequence\n[10 20 30 40] &gt;= seq ; ; create a local sequence\nGet(seq) | Log ; ; local sequence =&gt; [10, 20, 30, 40]\nPopFront(Name: seq) | Log ; ; pops the first element as output =&gt; 10\nGet(seq) | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Pow/","title":"Pow","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p> <p> </p>"},{"location":"shards/shards/General/PremultiplyAlpha/","title":"PremultiplyAlpha","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The image to apply the premultiplication of alpha channels to. <code>Image</code> <code>Output \u27a1\ufe0f</code> The image as a result of the application of the premultiplication of alpha channels. <code>Image</code> <p>Applies the premultiplication of alpha channels of an image to its RGB channels. Does nothing if the image has already been premultiplied in Shards. This mainly applies to PNG images.</p> <p> </p>"},{"location":"shards/shards/General/PrependTo/","title":"PrependTo","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to prepend to the collection. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <code>Collection</code>  Yes The collection to add the input to. <code>None</code> <code>&amp;[Any]</code><code>&amp;String</code><code>&amp;Bytes</code> <p>Prepends the input to the context variable passed to <code>Collection</code>.</p>"},{"location":"shards/shards/General/PrependTo/#details","title":"Details","text":"<p><code>PrependTo</code> prepends (i.e., adds to the start) its input to the variable it receives in its <code>Collection:</code> parameter. </p> <p>This shard works on string and sequence variables.</p> <p>The input to this shard is also passed through as its output.</p> <p>See also</p> <ul> <li><code>DropFront</code></li> <li><code>PopFront</code></li> <li><code>Push</code></li> <li><code>Set</code></li> <li><code>Update</code></li> </ul>"},{"location":"shards/shards/General/PrependTo/#examples","title":"Examples","text":"Code <pre><code>;; prepend element to sequence\n[1 2 3] &gt;= seq\n0 | PrependTo(seq)   ;; prepends element to sequence\nseq (Log)           ;; updated sequence =&gt; [0, 1, 2, 3]\n\n;; prepend character to string\n\"pen\" &gt;= str\n\"O\" | PrependTo(str) ;; prepends character to string\nstr (Log)           ;; updated string =&gt; Open\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Profile/","title":"Profile","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Action</code>  Yes The action shards to profile. <code>None</code> <code>Shard</code><code>[Shard]</code> <code>Label</code>  No The label to print when outputting time data. <code>&lt;no label&gt;</code> <code>String</code>"},{"location":"shards/shards/General/Push/","title":"Push","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to push into the sequence. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>&amp;Any</code> <code>Key</code>  No The key of the value to write in the table (parameter applicable only if the target variable is a table). <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <code>Clear</code>  No Whether to clear this sequence at every wire iteration. This only works if it's the first push. The default is true. <code>true</code> <code>Bool</code> <p>Pushes a new value into a sequence variable. If the variable does not exist, it will be created.</p>"},{"location":"shards/shards/General/Push/#details","title":"Details","text":"<p><code>Push</code> updates sequences and tables by pushing elements and/or sequences into them.</p> <p>The name of the variable to update should come from the <code>Name:</code> parameter and the new update value(s) should come from the shard's input.</p> <p>For existing sequences <code>Push</code> pushes in the new elements. If a sequence doesn't exist then <code>Push</code> will create it while pushing in the first element. These elements may be string constants, numerics, or even sequences themselves.</p> <p>For tables <code>Push</code> can update only those existing keys whose values are of the type sequence. In such cases <code>Push</code> can push in new elements in those key-value pair sequences. The key to be updated must be passed in via the <code>Key:</code> parameter.</p> <p>Note</p> <ol> <li>Do not use <code>Push</code> to update any variables created by <code>Set</code> (or its aliases <code>&gt;=</code>/<code>&gt;&gt;=</code>). <code>Push</code> is best used to update variables that were themselves created by <code>Push</code> (first push).</li> <li>Though, if really want to do (1.) you can offload the current sequence into another sequence variable, push new values into it, and update the table with this sequence variable (see the last code example).  </li> </ol> <p>The <code>Global:</code> parameter controls whether the created variables can be referenced across wires (<code>Global:</code> set to <code>true</code>) or only within the current wire (<code>Global:</code> set to <code>false</code>, default behaviour).</p> <p>Variables may be locally scoped (created with <code>Global: false</code>; exists only for current wire) or globally scoped (created with <code>Global: true</code>; exists for all wires of that mesh). Hence, in update mode (i.e. when you apply <code>Push</code> to an existing variable) the <code>Global:</code> parameter is used in conjunction with the <code>Name:</code> parameter to identify the correct variable to update. </p> <p>The parameter <code>Clear:</code> controls whether we should clear out this sequence after every wire iteration (<code>Clear</code> set to <code>true</code>, default behaviour) or should the sequence data persist across wire iterations (<code>Clear</code> set to <code>false</code>).</p> <p>The input to this shard is the new update value that is to be pushed into the sequence/table being modified. This value is also passed through as this shard's output.</p> <p>Note</p> <p><code>Push</code> has two aliases: <code>&gt;&gt;</code> which is an alias for <code>Push(... Clear: true)</code>, and <code>&gt;&gt;!</code> which is an alias for <code>Push(... Clear: false)</code>. See the code examples at the end to understand how these aliases are used.</p> <p>See also</p> <ul> <li><code>AppendTo</code></li> <li><code>PrependTo</code></li> <li><code>Sequence</code></li> <li><code>Set</code></li> <li><code>Table</code></li> <li><code>Update</code></li> </ul>"},{"location":"shards/shards/General/Push/#examples","title":"Examples","text":"Code <pre><code>; ; create and update sequence with `| Push`; value available only to current wire\n1 | Push(Name: seq1) ; ; create a sequence by | Pushing the first element\nseq1 | Log(\"seq1\") ; ; sequence created =&gt; [1]\n2 | Push(Name: seq1) ; ; | Push one more element into sequence\nseq1 | Log(\"seq1\") ; ; sequence updated =&gt; [1, 2]\n\n; ; Update an existing sequence  with `| Push`; value available to all wires on mesh\n[10 20] | Set(Name: seq2 Global: true) ; ; create sequence with two elements\nseq2 | Log(\"seq2\") ; ; sequence created =&gt; [10, 20]\n30 | Push(Name: seq2 Global: true) ; ; | Push one more element into sequence\nseq2 | Log(\"seq2\") ; ; sequence updated =&gt; [10, 20, 30]\n\n; ; create empty sequence with `Sequence`; add elements with `| Push`\nSequence(Name: seq3) ; ; create empty sequence\nseq3 | Log(\"seq3\") ; ; empty sequence created =&gt; []\n1 | Push(Name: seq3 Clear: false) ; ; | Push an element into sequence\nseq3 | Log(\"seq3\") ; ; sequence updated =&gt; [1]               \n2 | Push(Name: seq3 Clear: false) ; ; | Push another element into sequence\nseq3 | Log(\"seq3\") ; ; sequence updated =&gt; [1, 2]    \n\n; ; create empty table with `Table`; add/update key sequence values with `| Push`\nTable(Name: table1) ; ; created an empty table (one key, no value)\ntable1 | Log ; ; table with one key (no value) created =&gt; {A: []}\n1 | Push(table1 \"A\") ; ; | Push new key \"A\" with sequence value \"[1]\"\ntable1 | Log ; ; table key/value updated =&gt; {A: [1]}\n2 | Push(table1 \"A\") ; ; | Push new element into key \"A\" existing sequence\ntable1 | Log ; ; table key/value updated =&gt; {A: [1, 2]}\n\n; ; Using a `| Push` alias: `&gt;&gt;` is alias for `| Push(Clear: true)` \n\"Hello\" &gt;&gt; seq4 ; ; create sequence by | Pushing the first element\nseq4 | Log(\"seq4\") ; ; sequence created =&gt; [Hello]\n\"World\" &gt;&gt; seq4 ; ; update the sequence by | Pushing one more element\nseq4 | Log(\"seq4\") ; ; sequence updated with second element =&gt; [Hello, World]\n\n; ; Technique to update a non-| Push created Table's sequence values with `| Push`\n{k1: [1 2 3]} &gt;= table2 ; ; table is created using `Set`\ntable2 | Log ; ; table with key/value pair created =&gt; {k1: [1 2 3]}\nGet(table2 \"k1\") &gt;= seqvar ; ; target value offloaded into a sequence variable\n4 | Push(seqvar) ; ; update sequence variable using `| Push`\nseqvar | Log ; ; sequence variable updated =&gt; [1, 2, 3, 4] \n{k1: seqvar} &gt;= table2 ; ; update table key sequence value with modified sequence variable                      \ntable2 | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/RTake/","title":"RTake","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The sequence from which elements will be extracted. <code>Bytes</code><code>String</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The extracted elements. <code>Any</code> <code>Indices</code>  Yes One or more indices (counted backwards from the last element) to extract from a sequence. <code>None</code> <code>Int</code><code>[Int]</code><code>&amp;Int</code><code>&amp;[Int]</code> <p>Works exactly like <code>Take</code> except that the selection indices are counted backwards from the last element in the target sequence. Also, <code>RTake</code> works only on sequences, not on tables.</p>"},{"location":"shards/shards/General/RTake/#examples","title":"Examples","text":"Code <pre><code>; ; RTake on sequences\n[10 20 30 40] | RTake(1) | Log\nAssert.Is(30 Break: true)\n[10 20 30 40] | RTake([0 1]) | Log\nAssert.Is([40 30] Break: true)\n\n; ; RTake not valid on tables\n\n; ; RTake using a variable as index\n1 = index\n[1 2 3 4] | RTake(index) | Log\nAssert.Is(3 Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/RandomBytes/","title":"RandomBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <code>Size</code>  No The amount of bytes to output. <code>32</code> <code>Int</code>"},{"location":"shards/shards/General/RandomFloat/","title":"RandomFloat","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float</code> <code>Max</code>  No The maximum (if integer, not including) value to output. <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code>"},{"location":"shards/shards/General/RandomInt/","title":"RandomInt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int</code> <code>Max</code>  No The maximum (if integer, not including) value to output. <code>None</code> <code>None</code><code>Int</code><code>&amp;Int</code>"},{"location":"shards/shards/General/Recur/","title":"Recur","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code>"},{"location":"shards/shards/General/Recur/#examples","title":"Examples","text":"Code <pre><code>@wire(fibo {\n  &gt;= n\n  If(IsLess(2)\n    Then: {Pass}\n    Else: {n | Math.Subtract(2) (Recur) &gt;= a\n      n | Math.Subtract(1) (Recur) &gt;= b\n      a | Math.Add(b)\n    }\n  )\n})\n\n@wire(main-wire {\n  16\n  Do(fibo)\n  Log(\"Result\")\n  Assert.Is(987 true)\n})\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Reduce/","title":"Reduce","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Apply</code>  Yes The function to apply to each item of the sequence. <code>None</code> <code>Shard</code><code>[Shard]</code>"},{"location":"shards/shards/General/Ref/","title":"Ref","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to be set to the variable. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value is passed through as the output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>&amp;Any</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <code>Overwrite</code>  No If the variable should be overwritten if it already exists. <code>false</code> <code>Bool</code> <p>Creates an immutable reference variable. Once created this variable cannot be changed.</p>"},{"location":"shards/shards/General/Ref/#details","title":"Details","text":"<p><code>Ref</code> creates an immutable variable and assigns a constant value to it. Once created this variable cannot be changed.</p> <p>The name of the variable comes from the <code>Name:</code> parameter and the constant value comes from the input. The type of input controls the kind of variable that will created: numeric input creates numeric variable, string input creates string variable, and sequence input would create a sequence variable.</p> <p>To create a table variable, along with the input, you also have to pass the key in the <code>Key:</code> parameter. In this case the input (whatever it may be - numeric, string, sequence) becomes the value of the key that was passed in parameter <code>Key:</code>.</p> <p>The <code>Global:</code> parameter controls whether the created variables can be referenced across wires (<code>Global:</code> set to <code>true</code>) or only within the current wire (<code>Global:</code> set to <code>false</code>, default behaviour).</p> <p>The input to this shard is used as the value for the new variable and is also passed through as this shard's output.</p> <p>Note</p> <p><code>Ref</code> has two aliases: <code>=</code>. Both are aliases for <code>Ref(... Global: false)</code>. See the code examples at the end to understand how these aliases are used.</p> <p>See also</p> <ul> <li><code>Const</code></li> <li><code>Get</code></li> <li><code>Set</code></li> </ul>"},{"location":"shards/shards/General/Ref/#examples","title":"Examples","text":"Code <pre><code>; ; create an immutable string variable (by default available only to current wire)\n\"Hello\" | Ref(Name: svar)\nsvar | Log(\"svar\") ; ; =&gt; svar: Hello\n\n; ; uncomment next line to see the immutable-variable-update error\n; ; 20 | Update(svar)\n; ; =&gt; Error composing shard: Set/Ref/Update, attempted to write an immutable variable.\n\n; ; create an immutable numeric variable (available to all wires because `Global: true`)\n100 | Ref(Name: nvar Global: true)\nnvar | Log(\"nvar\") ; ; =&gt; nvar: 100\n\n; ; create an immutable sequence\n[10 20] | Ref(Name: seq)\nseq | Log(\"seq\") ; ; =&gt; seq: [10, 20]\n\n; ; create an immutable table\nConst([\"a\" \"b\"]) | Ref(Name: \"table\" Key: \"key1\")\ntable | Log(\"table\") ; ; =&gt; table: {key1: [a, b]}\n\n; ; Using `Ref` aliases\n\n; ; `=` is alias for `| Ref(Global: false)`: create an immutable string variable: \n\"World\" = svarA\nsvarA | Log(\"svarA\")\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Remove/","title":"Remove","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Output is the filtered sequence. <code>[Any]</code> <code>From</code>  Yes The name of the sequence variable to edit in place. <code>None</code> <code>&amp;[Any]</code> <code>Join</code>  Yes Other columns to join sort/filter using the input (they must be of the same length). <code>None</code> <code>&amp;[Any]</code><code>[&amp;[Any]]</code> <code>Predicate</code>  Yes The shards to use as predicate, if true the item will be popped from the sequence. <code>None</code> <code>Shard</code><code>[Shard]</code> <code>Unordered</code>  No Turn on to remove items very quickly but will not preserve the sequence items order. <code>false</code> <code>Bool</code> <p>Removes all elements from a sequence that match the given condition. Can also take these matched indices and remove corresponding elements from a joined sequence.</p>"},{"location":"shards/shards/General/Remove/#details","title":"Details","text":"<p><code>Remove</code> removes all the elements of the <code>Name:</code> parameter sequence that matches the condition laid out in the <code>Predicate:</code> parameter.</p> <p>It can also take these condition-matched indices (from the <code>From:</code> sequence) and remove the corresponding elements from a joined sequence (passed via the <code>Join:</code> parameter). Remember, <code>Remove</code> doesn't apply the <code>Predicate:</code> conditions to the joined sequence, but removes corresponding elements from it based on <code>Predicate:</code> matched indices of the main sequence. For this to work both the sequences must have the same length.</p> <p>Note</p> <p>Think of this as the Shards equivalent of a relational database inner join. The main sequence and the joined sequence can be thought of as columns from two different tables inner joined over indices equality. So that the changes in elements of one sequence (rows in the first table) can be propagated to the corresponding elements of the joined sequence (corresponding rows in the joined table). </p> <p>In this case the operation is deletion of selected elements (selected rows) from one sequence (table) leading to deletion of corresponding elements (connected rows) of the joined sequence (joined table).</p> <p>The <code>Predicate:</code> parameter can take any conditional/logical expression or combination of shards that will result in assertion that can be tested on the sequence elements.</p> <p>The <code>Unordered:</code> parameter can be set to <code>true</code> if you need to make the removal process faster, but then the order of the remaining elements in the resulting sequence elements may not be preserved. By default, this order is preserved.</p> <p><code>Remove</code> works only on sequences.</p> <p>Any input to this shard is ignored and its output is the main filtered sequence.</p> <p>See also</p> <ul> <li><code>Clear</code></li> <li><code>Drop</code></li> <li><code>DropFront</code></li> <li><code>Erase</code></li> <li><code>Pop</code></li> <li><code>PopFront</code></li> <li><code>Sort</code></li> </ul>"},{"location":"shards/shards/General/Remove/#examples","title":"Examples","text":"Code <pre><code>; ; remove predicate-satisfying elements from From: sequence\n[10 20 30] &gt;= seq1\nRemove(\n  From: seq1\n  Predicate: IsMore(20)\n  Unordered: false\n)\nLog(\"output\") ; ; =&gt; output: [10, 20]\nseq1 | Log(\"seq1\") ; ; index-2 element matched, removed =&gt; seq1: [10, 20]\n\n; ; remove corresponding index elements from Join: sequence\n[10 20 30] &gt;= seq2\n[100 200 300] &gt;= seqJ\nRemove(seq2 Predicate: Is(20) Join: seqJ)\nseq2 | Log(\"seq2\") ; ; index-1 element matched, removed from seq2 =&gt; seq2: [10, 30]\nseqJ | Log(\"seqJ\") ; ; matched index-1 element removed from seqJ  =&gt; seqJ: [100, 300]\n\n; ; remove with Unordered: true (faster but sequence items order may not be preserved)\n[[20 30] [30 40] [40 50]] &gt;= seq3\nRemove(seq3 Predicate: {Take(0) | IsLess(30)} Unordered: true)\nseq3 | Log(\"seq3\")\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Repeat/","title":"Repeat","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input will be passed to both the action and the <code>Until</code> condition if used. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Action</code>  Yes The shards to repeat. <code>None</code> <code>Shard</code><code>[Shard]</code> <code>Times</code>  No How many times we should repeat the action. <code>None</code> <code>Int</code><code>&amp;Int</code><code>None</code> <code>Forever</code>  No If we should repeat the action forever. <code>false</code> <code>Bool</code> <code>Until</code>  No Optional shards to use as predicate to continue repeating until it's true <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>Repeat an action a given number of times or until a condition is no longer <code>true</code>.</p>"},{"location":"shards/shards/General/Repeat/#examples","title":"Examples","text":"Code <pre><code>0 &gt;= n\nRepeat({\n    n | Log(\"Counting\")\n    Math.Inc(n)\n  }\n  Forever: true\n  Until: {n | IsMore(9)}\n)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>Repeat({\n  Msg(\"Hello\")\n}\nTimes: 5)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Replace/","title":"Replace","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Any]</code><code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Any]</code><code>String</code> <code>Patterns</code>  No The patterns to find. <code>None</code> <code>None</code><code>[String]</code><code>&amp;[String]</code><code>&amp;[Any]</code><code>[Any]</code> <code>Replacements</code>  No The replacements to apply to the input, if a single value is provided every match will be replaced with that single value. <code>None</code> <code>None</code><code>Any</code><code>&amp;Any</code><code>[Any]</code><code>&amp;[Any]</code>"},{"location":"shards/shards/General/ResizeImage/","title":"ResizeImage","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Image</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Image</code> <code>Width</code>  No The target width. <code>32</code> <code>Int</code><code>&amp;Int</code> <code>Height</code>  No The target height. <code>32</code> <code>Int</code><code>&amp;Int</code>"},{"location":"shards/shards/General/Restart/","title":"Restart","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input to restart the wire with. Must match the wire's root input type. <code>Any</code> <code>Output \u27a1\ufe0f</code> This shard does not produce an output as it restarts the flow. <code>None</code> <p>Restarts the current flow with the provided input. This shard is used to restart the execution of the current wire from the beginning, using the same input. It ensures that the input type matches the wire's root input type. Note: This is a flow stopper and will not continue to subsequent shards in the current execution sequence.</p> <p> </p>"},{"location":"shards/shards/General/Resume/","title":"Resume","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Wire</code>  No The wire to resume. <code>None</code> <code>Wire</code><code>String</code><code>None</code><code>&amp;Wire</code> <p>Resumes another wire (previously suspending using Suspend).</p>"},{"location":"shards/shards/General/Resume/#examples","title":"Examples","text":"Code <pre><code>@wire(add-progress {\n\n  Once({\n    progress-stat | Math.Add(1.0) &gt; progress-stat\n  } 1.0)\n\n\n\n  progress-stat\n  When(Predicate: Is(5.0) Action: {; ; add progress will suspend once progress-stat reaches 5\n    Once({\n      Suspend\n    })\n  })\n} Looped: true)\n\n@wire(main-wire {\n\n  Once({; ; initialize variables and detach the add-progress wire\n    0.0 | Set(progress-stat Global: true)\n    0.0 | Set(resume-timer)\n    Detach(add-progress)\n  })\n\n  Once({\n    progress-stat\n    Log(\"Progress\")\n\n    resume-timer | Math.Add(1.0) &gt; resume-timer\n    Log(\"Resume Timer\")\n  } 1.0)\n\n  resume-timer\n  When(Predicate: Is(10.0) Action: {\n    Resume(add-progress) ; ;When resume-timer reaches 10, it will Resume add-progress wire which was previously suspended\n  })\n} Looped: true)\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Return/","title":"Return","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input to return (when supported) and stop the flow. <code>Any</code> <code>Output \u27a1\ufe0f</code> This shard does not produce an output as it stops the flow. <code>None</code> <p>Stops the current flow and returns the provided input. This shard is used to exit the execution of the current wire early within loops or conditional flows, returning the specified input.</p> <p> </p>"},{"location":"shards/shards/General/Reverse/","title":"Reverse","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Any]</code><code>String</code><code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Any]</code><code>String</code><code>Bytes</code>"},{"location":"shards/shards/General/Sequence/","title":"Sequence","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>&amp;Any</code> <code>Key</code>  No The key of the value to write in the table (parameter applicable only if the target variable is a table). <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <code>Clear</code>  No If we should clear this sequence at every wire iteration; works only if this is the first push; default: true. <code>true</code> <code>Bool</code> <code>Type</code>  No The sequence type to forward declare. <code>None</code> <code>None</code><code>Type</code> <p>Creates an empty sequence (or sequence in a table if a key is passed). Useful to declare and specify types.</p>"},{"location":"shards/shards/General/Sequence/#details","title":"Details","text":"<p><code>Sequence</code> creates an empty sequence when the <code>Key:</code> parameter is not set. If a key is passed via this parameter <code>Sequence</code> creates an empty table instead (behaving like the <code>Table</code> shard). The created sequence name is defined in the <code>Name:</code> parameter.</p> <p>This shard can control the scope of the created sequence variable. A <code>true</code> value for the <code>Global:</code> parameter makes the scope of the sequence global (available to all wires on the mesh), and a <code>false</code> value makes the scope local (available only to the wire its defined in).</p> <p>By default a sequence created with this shard would be cleared (emptied) every time the wire is executed (since <code>Clear:</code> is <code>true</code> by default). To retain the sequence values across wire iterations set the <code>Clear:</code> parameter to <code>false</code>.</p> <p>This shard can also define the sequence's inner data types via the <code>Types:</code> parameter. More than one data type may be set.</p> <p>Any input to this shard is ignored and instead passed through as its output.</p> <p>See also</p> <ul> <li><code>Get</code></li> <li><code>Push</code></li> <li><code>Set</code></li> <li><code>Table</code></li> <li><code>Update</code></li> </ul>"},{"location":"shards/shards/General/Sequence/#examples","title":"Examples","text":"Code <pre><code>; ; without key, without types, local scope, Clear: true, using `Push`\nSequence(Name: seqA)\nseqA | Log ; ; created an empty sequence =&gt; []\n1 | Push(seqA)\nseqA | Log ; ; updated sequence =&gt; [1]\n2 | Push(seqA)\nseqA | Log ; ; updated sequence =&gt; [1, 2]\n\n; ; with key (becomes table), single type, global scope, Clear: true, using `Set`\nSequence(seqB Key: \"A\" Global: true Type: @type([Type::Float]))\nseqB | Log ; ; created an empty table =&gt; {A: []}\n10.2 | Set(seqB \"A\")\nseqB | Log ; ; updated table =&gt; {A: 10.2}\n20.1 | Set(seqB \"A\")\nseqB | Log ; ; updated table =&gt; {A: 20.1}\n\n; ; without key, multiple types, local scope, Clear: false, using `Push`\nSequence(seqC Type: @type([Type::Float Type::Int]) Clear: false)\nseqC | Log ; ; created an empty sequence =&gt; []\n10.3 | Push(seqC)\nseqC | Log ; ; updated sequence =&gt; [10.3]\n20 | Push(seqC)\nseqC | Log ; ; updated sequence =&gt; [10.3, 20]\n\n; ; with key (becomes table), single type, local scope, Clear: true, using `Push`\n; ; Sequence(seqD Key: \"A\" Type:s Type.Int)\n; ; seqD | Log             ;; created an empty table =&gt; {A: []}\n10 | Push(seqD \"A\")\nseqD | Log ; ; updated table =&gt; {A: [10]}\n20 | Push(seqD \"A\")\nseqD | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Set/","title":"Set","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to be set to the variable. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value is passed through as the output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>&amp;Any</code> <code>Key</code>  No The key of the value to write in the table (parameter applicable only if the target variable is a table). <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <code>Tracked</code>  No If the variable should be marked as tracked. <code>false</code> <code>Bool</code> <p>Creates a mutable variable and assigns a value to it.</p>"},{"location":"shards/shards/General/Set/#details","title":"Details","text":"<p><code>Set</code> creates a mutable variable and assigns a value to it. Once created this variable can be modified.</p> <p>The name of the variable comes from the <code>Name:</code> parameter and the variable value comes from the input. The type of input controls the kind of variable that will created: numeric input creates numeric variable, string input creates string variable, and sequence input would create a sequence variable.</p> <p>To create a table variable, along with the input, you also have to pass the key in the <code>Key:</code> parameter. In this case the input (whatever it may be - numeric, string, sequence) becomes the value of the key that was passed in parameter <code>Key:</code>.</p> <p>The <code>Global:</code> parameter controls whether the created variables can be referenced across wires (<code>Global:</code> set to <code>true</code>) or only within the current wire (<code>Global:</code> set to <code>false</code>, default behaviour).</p> <p>Though it will generate a warning <code>Set</code> can also be used to update existing variables (like adding a new key-value pair to an existing table).</p> <p>Note</p> <p>Do not use <code>Push</code> to update any variables created by <code>Set</code> (or its aliases <code>&gt;=</code>/<code>&gt;&gt;=</code>). Such variables are best best updated by <code>Set</code> itself (all types of variables) or <code>AppendTo</code> (only sequences and string variables).  </p> <p>Variables may be locally scoped (created with <code>Global: false</code>; exists only for current wire) or globally scoped (created with <code>Global: true</code>; exists for all wires of that mesh). Hence, in update mode (i.e. when you apply <code>Set</code> to an existing variable) the <code>Global:</code> parameter is used in conjunction with the <code>Name:</code> parameter to identify the correct variable to update. </p> <p>The input to this shard is used as the value for the variable being created and is also passed through as this shard's output.</p> <p>Note</p> <p><code>Set</code> has two aliases: <code>&gt;=</code> is an alias for <code>Set(... Global: false)</code> while <code>&gt;==</code> is an alias for <code>Set(... Global: true)</code>. See the code examples at the end to understand how these aliases are used.</p> <p>See also</p> <ul> <li><code>AppendTo</code></li> <li><code>Const</code></li> <li><code>Get</code></li> <li><code>PrependTo</code></li> <li><code>Ref</code></li> <li><code>Sequence</code></li> <li><code>Table</code></li> </ul>"},{"location":"shards/shards/General/Set/#examples","title":"Examples","text":"Code <pre><code>; ; create a mutable string variable, modify it (by default available only to current wire)\n\"Hello\" | Set(Name: svar)\nsvar | Log(\"svar\") ; ; =&gt; svar: Hello\n\"World\" | Update(svar) ; ; modify string variable\nsvar | Log(\"modified svar\") ; ; =&gt; svar: World\n\n; ; create a mutable numeric variable, modify it (available to all wires because `Global: true`)\n100 | Set(Name: nvar Global: true)\nnvar | Log(\"nvar\") ; ; =&gt; nvar: 100\n200 | Update(nvar) ; ; modify numeric variable\nnvar | Log(\"modified nvar\") ; ; =&gt; modified nvar: 200\n\n; ; create a mutable sequence\n[10 20 30] | Set(Name: sequence)\nsequence | Log(\"sequence\") ; ; =&gt; sequence: [10, 20, 30]\n\n; ; create a mutable table\nConst([\"a\" \"b\"]) | Set(Name: table Key: \"key1\")\ntable | Log(\"table\") ; ; =&gt; table: {key1: [a, b]}\n\n; ; add a key-value pair to existing mutable table (will generate warnings)\n\"def\" | Set(table Key: \"key2\") ; ; add new key\ntable | Log(\"modified table\") ; ; =&gt; modified table: {key2: def, key1: [a, b]}\n\n; ; Using `Set` aliases\n\n; ; `&gt;=` is alias for `| Set(Global: false)`: create a mutable string variable\n\"World\" &gt;= svarA\nsvarA | Log(\"svarA\") ; ; =&gt; svarA: World\n\n; ; create and update local/global variables\n\"Local\" | Set(str) ; ; create local variable\n\"Global\" | Set(str Global: true) ; ; create same-name global variable\nGet(str) (Log) ; ; get updated local variable =&gt; \"Local\"\nGet(str Global: true) (Log) ; ; get same-name updated global variable =&gt; \"Global\"\n\"LocalNew\" | Set(str) ; ; create local variable\n\"GlobalNew\" | Set(str Global: true) ; ; create same-name global variable\nGet(str) (Log) ; ; get updated local variable =&gt; \"LocalNew\"\nGet(str Global: true) (Log)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/SetLogLevel/","title":"SetLogLevel","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code>"},{"location":"shards/shards/General/Shuffle/","title":"Shuffle","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input is passed through as the output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>&amp;Any</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>Shuffles the elements of the sequence variable. Works only on sequences. If the variable is not a sequence, it simply passes through without failing.</p> <p> </p>"},{"location":"shards/shards/General/Sin/","title":"Sin","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/General/Slice/","title":"Slice","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string or sequence from which characters/elements have to be extracted. <code>[Any]</code><code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The extracted characters/elements. <code>Any</code> <code>From</code>  No The position/index of the first character or element that is to be extracted (including). Negative position/indices simply loop over the target string/sequence counting backwards. <code>0</code> <code>Int</code><code>[Int]</code><code>&amp;Int</code><code>&amp;[Int]</code> <code>To</code>  No The position/index of the last character or element that is to be extracted (excluding). Negative position/indices simply loop over the target string/sequence counting backwards. <code>None</code> <code>Int</code><code>[Int]</code><code>&amp;Int</code><code>&amp;[Int]</code><code>None</code> <code>Step</code>  No The increment between each position/index. Chooses every nth sample to extract, where n is the increment. Value has to be greater than zero. <code>1</code> <code>Int</code> <p>Extracts characters from a string or elements from a sequence based on the start and end positions/indices and an increment parameter. Operation is non-destructive; the target string/sequence is not modified.</p>"},{"location":"shards/shards/General/Slice/#examples","title":"Examples","text":"Code <pre><code>; ; Slice on strings\n\"Hello World\" | Slice(From: 1 To: 3 Step: 1)\nLog ; ; =&gt; \"el\"\n\"Hello World\" | Slice(0 11 2)\nLog ; ; =&gt; \"HloWrd\"\n\n; ; Slice on sequences\n[10 20 30 40 50 60 70 80 90] | Slice(1 3 1)\nLog ; ; =&gt; [20, 30]\n[10 20 30 40 50 60 70 80 90] | Slice(0 7 3)\nLog ; ; =&gt; [10, 40, 70]\n[10 20 30 40 50 60 70 80 90] | Slice(-9 -2 3)\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Snowflake/","title":"Snowflake","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int</code> <code>MachineId</code>  No The machine ID, must be less than 32 <code>0</code> <code>Int</code> <code>NodeId</code>  No The node ID, must be less than 32 <code>0</code> <code>Int</code> <p>Creates a Snowflake ID.</p> <p> </p>"},{"location":"shards/shards/General/Sort/","title":"Sort","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Output is the sorted sequence. <code>[Any]</code> <code>From</code>  Yes The name of the sequence variable to edit in place. <code>None</code> <code>&amp;[Any]</code> <code>Join</code>  Yes Other columns to join sort/filter using the input (they must be of the same length). <code>None</code> <code>&amp;[Any]</code><code>[&amp;[Any]]</code> <code>Desc</code>  No If sorting should be in descending order, defaults ascending. <code>false</code> <code>Bool</code> <code>Key</code>  No The shards to use to transform the collection's items before they are compared. Can be None. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>Sorts the elements of a sequence. Can also move around the elements of a joined sequence in alignment with the sorted sequence.</p>"},{"location":"shards/shards/General/Sort/#details","title":"Details","text":"<p><code>Sort</code> sorts all the elements of the sequence that has been passed to it in the <code>Name:</code> parameter based on the value of the <code>Desc:</code> parameter. If <code>Desc:</code> is set to true the sequence is sorted in descending order, else it's sorted in the ascending order (which is the default behaviour).</p> <p>This shard can also take final element order of the sorted sequence and apply that to a joined sequence (passed via the <code>Join:</code> parameter). For example, if the element at index-7 moved to index-3 in the main sequence due to sorting then in the joined sequence too the element at index-7 would move to index-3. The movement of all elements in the main sequence (post-sort) would be mirrored in the joined sequence. For this to work both the sequences must have the same length.</p> <p>Note</p> <p>Think of this as the Shards equivalent of a relational database inner join. The main sequence and the joined sequence can be thought of as columns from two different tables inner joined over indices equality. So that the changes in elements of one sequence (rows in the first table) can be propogated to the corresponding elements of the joined sequence (corresponding rows in the joined table). </p> <p>In this case the operation is changing of indices (position) of selected elements (selected rows) in one sequence (table) leading to an equivalent change of indices (position) of corresponding elements (connected rows) of the joined sequence (joined table).</p> <p>The <code>Key:</code> parameter can take a shard or group of shards to transform the sequence elements before they're compared for sorting. This transformation doesn't actually change the value of the elements in the final sorted sequence (it's used only for sort comparisons).</p> <p><code>Sort</code> works only on sequences.</p> <p>Any input to this shard is ignored and its output is the main sorted sequence.</p> <p>See also</p> <ul> <li><code>Remove</code></li> </ul>"},{"location":"shards/shards/General/Sort/#examples","title":"Examples","text":"Code <pre><code>; sort ascending (since default Desc: is false)\n[9 5 1 3 8] &gt;= seq1\nSort(From: seq1)\nseq1 | Log(\"seq1\") ; ; sorted ascending =&gt; seq1: [1, 3, 5, 8, 9]\n\n; sorting descending (Desc: set to true)\n[9 5 1 3 8] &gt;= seq2\nSort(seq2 Desc: true)\nseq2 | Log(\"seq2\") ; ; sorted ascending =&gt; seq2: [9, 8, 5, 3, 1]\n\n; ; sort ascending using a Key:\n[9 5 1 3 8] &gt;= seq3\nSort(seq3 Key: Math.Multiply(-1))\nseq3 | Log(\"seq3\") ; ; Key: transform makes it look like descending sort =&gt; seq3: [9, 8, 5, 3, 1]\n\n; ; sort ascending with a joined sequence\n[9 5 1 3 8] &gt;= seq4\n[\"a\" \"b\" \"c\" \"d\" \"e\"] &gt;= seqJ\nSort(seq4 Join: seqJ)\nseq4 | Log(\"seq4\") ; ; main sequence sorted in ascending order =&gt; seq4: [1, 3, 5, 8, 9]\nseqJ | Log(\"seqJ\")\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Spawn/","title":"Spawn","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Wire</code> <code>Wire</code>  No The wire to spawn and try to run many times concurrently. <code>None</code> <code>None</code><code>Wire</code><code>[Shard]</code>"},{"location":"shards/shards/General/Spawn/#examples","title":"Examples","text":"Code <pre><code>@wire (spawn-wire {Msg (\"Msg 1\")\n                   Pause (1.0)\n                   Msg (\"Msg 2\")\n                   Pause (1.0)\n                   Msg (\"Msg 3\")\n                   Stop})\n\n@wire (main-wire {Once ({Spawn (spawn-wire)})})\n\n@mesh (main)\n@schedule (main main-wire)\n@run (main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Sqrt/","title":"Sqrt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/General/Step/","title":"Step","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Wire</code>  No The wire to run. <code>None</code> <code>Wire</code><code>String</code><code>None</code>"},{"location":"shards/shards/General/Step/#examples","title":"Examples","text":"Code <pre><code>@wire(step-1 {\n  value-1 | Math.Subtract(1.0) &gt; value-1\n})\n\n@wire(main-wire {\n\n  Once({; ; initialize variables and detach the add-progress wire\n    100.0 | Set(value-1)\n    100.0 | Set(value-2)\n  })\n\n  Once({\n    Step(step-1)\n    value-1\n    Log(\"value-1\")\n  }1.0)\n} Looped: true)\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/StepMany/","title":"StepMany","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Any]</code> <code>Wire</code>  No The wire to spawn and try to run many times concurrently. <code>None</code> <code>None</code><code>Wire</code><code>[Wire]</code><code>[Shard]</code><code>[[Shard]]</code>"},{"location":"shards/shards/General/Stop/","title":"Stop","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Wire</code>  No The wire to stop. <code>None</code> <code>Wire</code><code>String</code><code>None</code><code>&amp;Wire</code> <code>Passthrough</code>  No The output of this shard will be its input. <code>true</code> <code>Bool</code> <p>Stops another wire. If no wire is given, stops the current wire.</p>"},{"location":"shards/shards/General/Stop/#examples","title":"Examples","text":"Code <pre><code>@wire(add-progress {\n\n  Once({\n    progress-stat | Math.Add(1.0) &gt; progress-stat\n  } 1.0)\n\n\n\n  progress-stat\n  When(Predicate: Is(5.0) Action: {; ; add-progress will stop once progress-stat reaches  5.0\n    Stop\n  })\n} Looped: true)\n\n@wire(main-wire {\n\n  Once({; ; initialize variables and detach the add-progress wire\n    0.0 | Set(progress-stat Global: true)\n    Detach(add-progress)\n  })\n\n  Once({\n    progress-stat\n    Log(\"Progress\")\n  } 1.0)\n} Looped: true)\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/StringToBytes/","title":"StringToBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A string to be converted to bytes. <code>String</code> <code>Output \u27a1\ufe0f</code> The byte representation of the input string. <code>Bytes</code> <p>Converts a string to its byte representation.</p> <p> </p>"},{"location":"shards/shards/General/StripAlpha/","title":"StripAlpha","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Image</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Image</code>"},{"location":"shards/shards/General/Sub/","title":"Sub","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/General/Sub/#details","title":"Details","text":"<p>In Shards, a shard receives an input, processes it, and produces an output. Usually, this output is different from the input that the shard processed.</p> <p>However, in some cases, we want a shard (or a sequence of shards) to return the same value as its output that it received as an input. For example, when we want a shard to process the same input that its previous shard (or sequence of shards) processed, irrespective of the output created by the previous shard(s).</p> <p>There is a pass-through parameter available for some shards (like <code>Match</code>) that can allow these shards to pass through their input to their output. For other shards, we can use the <code>Sub</code> shard (also called the <code>Sub</code> flow) to achieve the same effect by wrapping the target shard(s) within the <code>Sub</code>.</p> <p><code>Sub</code> passes its input to the first shard contained within. The shard contained within <code>Sub</code> then processes the input, creating an output which is then passed to the next shard in the sequence inside the <code>Sub</code> flow. This continues till the last shard in the flow is reached. The output of the last shard is not used by the <code>Sub</code> flow. Instead, the <code>Sub</code> flow outputs the same value that it had received as input.</p> <p>While <code>Sub</code> may seem to not use any of its internal shards' inputs or outputs, every variable assigned inside the <code>Sub</code> will be available outside as well since <code>Sub</code> will always be executed. Hence, the inputs and outputs of the shards within the <code>Sub</code> flow can be made available outside the <code>Sub</code> by saving them into <code>Sub</code> variables.</p> <p>As a result, the aforementioned method gives a pseudo-pass-through capability to any shard (if you wrap a shard with a <code>Sub</code> shard) or to any sequence of shards (if you wrap a whole sequence of shards within a <code>Sub</code> shard).</p> <p>By nesting <code>Sub</code> shards you can simulate even more flexible and powerful shard execution paths.</p>"},{"location":"shards/shards/General/Sub/#examples","title":"Examples","text":"Code <pre><code>; ; Using `Sub`, with `-&gt;`\n5 ; ; input to `Sub` shards\nSub({Math.Multiply(2)\n  Log\n}) ; ; 5 * 2 =&gt; 10\nSub({Math.Multiply(3)\n  Log ; ; 5 * 3 =&gt; 15\n  Sub({Math.Multiply(2)\n    Log\n  })\n}) ; ; 15 * 2 =&gt; 30\nLog(\"output of the last `Sub` shard\") ; ; input is output =&gt; 5\n\n; ; Using '{}' as an alias for sub\n100 ; ; input to `|` shards\n{Math.Multiply(2)\n  Log\n} ; ; 100 * 2 =&gt; 200\n{Math.Multiply(3)\n  Log ; ; 100 * 3 =&gt; 300\n  {Math.Multiply(2)\n    Log\n  }\n} ; ; 300 * 2 =&gt; 600\nLog(\"output of the last `|` shard\")\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>5\nLog(\"input to Sub1\") ; ; =&gt; 5\nSub({\n  Math.Multiply(2)\n  Assert.Is(10 true)\n  Log(\"Sub1 inner shard o/p | 5 * 2\") ; ; =&gt; 10\n})\nLog(\"Sub1 output =&gt; input to Sub2\") ; ; =&gt; 5\nSub({\n  Math.Multiply(3)\n  Assert.Is(15 true)\n  Log(\"Sub2 inner shard o/p | 5 * 3\") ; ; =&gt; 15\n  Log(\"input to nested-Sub\") ; ; =&gt; 15\n  Sub({\n    Math.Multiply(2)\n    Assert.Is(30 true)\n    Log(\"nested-Sub inner shard o/p | (5 * 3) * 2\") ; ; =&gt; 30\n  })\n  Log(\"output from nested Sub\") ; ; =&gt; 15\n})\nLog(\"Sub2 output =&gt; output\")\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/SubFlow/","title":"SubFlow","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input value passed to this Sub flow (and hence to the shard or sequence of shards in this Sub flow). <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this Sub flow (which is the same as its input). <code>Any</code> <code>Shards</code>  No The shard or sequence of shards to execute in the Sub flow. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>Activates a shard or a sequence of shards independently, without consuming the input. I.e. the input of the Sub flow will also be its output regardless of the shards activated in this Sub flow.</p> <p> </p>"},{"location":"shards/shards/General/Suspend/","title":"Suspend","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Wire</code>  No The wire to suspend. <code>None</code> <code>Wire</code><code>String</code><code>None</code><code>&amp;Wire</code> <p>Pauses another wire. If no wire is given, pauses the current wire.</p> <p> </p>"},{"location":"shards/shards/General/Swap/","title":"Swap","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <code>First</code>  Yes The name of first variable. <code>None</code> <code>&amp;Any</code> <code>Second</code>  Yes The name of second variable. <code>None</code> <code>&amp;Any</code> <p>Swaps the values of the two variables passed to it via <code>First</code> and <code>Second</code> parameters.</p>"},{"location":"shards/shards/General/Swap/#details","title":"Details","text":"<p><code>Swap</code> swaps the values of the two variables passed to it, one via the <code>First:</code> parameter, the other via the <code>Second:</code> parameter.</p> <p>This shard works on all kinds of variables and across types. So you can not only swap between two integers, two strings, two sequences, two tables etc., but also between a string and a number, a table and a sequence and so on.</p> <p>Any input to this shard is ignored and instead passed through as its output.</p>"},{"location":"shards/shards/General/Swap/#examples","title":"Examples","text":"Code <pre><code>\"Shards\" &gt;= string\n123 &gt;= number1\n456 &gt;= number2\n789 &gt;= number3\n[10 20] &gt;= sequence\n{\"k1\" | 1 | \"k2\" | 2} &gt;= table\n\nSwap(\n  First: number1\n  Second: number2\n) ; ; swap two numbers\nnumber1 | Log(\"number1\") ; ; swapped =&gt; number1: 456\nnumber2 | Log(\"number2\") ; ; swapped =&gt; number2: 123\n\nSwap(string table) ; ; swap a string and a table\nstring | Log(\"string\") ; ; swapped =&gt; string: {\"k1\" 1 \"k2\" 2}\ntable | Log(\"table\") ; ; swapped =&gt; table: \"Shards\"\n\nSwap(number3 sequence) ; ; swap a number and a sequence\nnumber3 | Log(\"number3\") ; ; swapped =&gt; number3:[10 20]\nsequence | Log(\"sequence\")\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/SwitchTo/","title":"SwitchTo","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Wire</code>  No The name of the wire to switch to, or none to switch to the previous state. <code>None</code> <code>Wire</code><code>String</code><code>None</code> <code>Restart</code>  No If the wire should always (re)start from the beginning instead of resuming to whatever state was left. <code>false</code> <code>Bool</code> <code>StopOnCleanup</code>  No If the wire should be stopped when the current wire is cleaned up. <code>false</code> <code>Bool</code> <p>Switches to a given wire and suspends the current one. In other words, switches flow execution to another wire, useful to create state machines.</p> <p> </p>"},{"location":"shards/shards/General/Table/","title":"Table","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>&amp;Any</code> <code>Key</code>  No The key of the value to write in the table (parameter applicable only if the target variable is a table). <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <code>Type</code>  No The table type to forward declare. <code>None</code> <code>None</code><code>Type</code> <p>Creates an empty table. Useful to declare and specify types.</p>"},{"location":"shards/shards/General/Table/#details","title":"Details","text":"<p><code>Table</code> creates an empty table with or without a specified key (via the <code>Key:</code> parameter). The created table name is defined in the <code>Name:</code> parameter.</p> <p>Whether the created table variable has a global scope (available to all wires on the mesh) or a local scope (available only to the wire its defined in) can be controlled via the <code>Global:</code> parameter (<code>true</code> for global scope, <code>false</code> for local scope; default is <code>false</code>).</p> <p>In addition to the key and the scope, this shard can also define the table's inner data types via the <code>Types:</code> parameter. More than one data type may be set.</p> <p>Any input to this shard is ignored and instead passed through as its output.</p> <p>See also</p> <ul> <li><code>Get</code></li> <li><code>Push</code></li> <li><code>Sequence</code></li> <li><code>Set</code></li> <li><code>Update</code></li> </ul>"},{"location":"shards/shards/General/Table/#examples","title":"Examples","text":"Code <pre><code>; ; without key, without types, local scope, using `Push` (puts sequence values)\n; ; Table(:Name tableA)\n; ; tableA | Log        ;; created a table =&gt; {A: []}\n1 | Push(tableA \"A\")\ntableA | Log ; ; updated table =&gt; {A: [1]}\n2 | Push(tableA \"A\")\ntableA | Log ; ; updated table =&gt; {A: [1, 2]}\n\n; ; with key, single type, global scope, using `Set`\nTable(tableB Key: \"A\" Global: true Type: @type({A: Type::Float}))\ntableB | Log ; ; created a table =&gt; {A: {}}\n10.2 | Set(tableB \"A\")\ntableB | Log ; ; updated table =&gt; {A: 10.2}\n20.1 | Set(tableB \"A\")\ntableB | Log ; ; updated table =&gt; {A: 20.1}\n\n; ; with key, multiple types, local scope, using `Set`\nTable(tableC Key: \"A\" Type: @type({A: Type::Float B: Type::Int}))\ntableC | Log ; ; created a table =&gt; {A: {}}\n10.3 | Set(tableC \"A\")\ntableC | Log ; ; updated table =&gt; {A: 10.3}\n20 | Set(tableC \"B\")\ntableC | Log ; ; updated table =&gt; {B: 20, A: 10.3}\n\n; ; with key, single type, local scope, using `Push` (puts sequence values)\n; ; Table(tableD Key: \"A\" Type:s Type.Int)\n; ; tableD | Log        ;; created a table =&gt; {A: []}\n10 | Push(tableD \"A\")\ntableD | Log ; ; updated table =&gt; {A: [10]}\n20 | Push(tableD \"A\")\ntableD | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Take/","title":"Take","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The sequence or table from which elements or values will be extracted. <code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Bytes</code><code>Color</code><code>String</code><code>[Any]</code><code>{Any}</code> <code>Output \u27a1\ufe0f</code> The extracted elements from a sequence or values from a table. If the key cannot be established to exist at compose time, the output will be of type Any. <code>Any</code> <code>Indices/Keys</code>  Yes One or more indices or keys to extract from a sequence or table. <code>None</code> <code>Any</code><code>&amp;Any</code> <p>Extracts one or more elements from a sequence or values from a table using the provided indices or keys. This operation is non-destructive and does not modify the target sequence or table. If the key cannot be established to exist at compose time, the output will be of type Any.</p>"},{"location":"shards/shards/General/Take/#examples","title":"Examples","text":"Code <pre><code>; ; Take on sequences\n[10 20 30 40] | Take(1) | Log\nAssert.Is(20 Break: true)\n[10 20 30 40] | Take([1 2]) | Log\nAssert.Is([20 30] Break: true)\n\n; ; Take on tables\n{Hello: 10 World: 20} | Take(\"Hello\") | Log\nAssert.Is(10 Break: true)\n{Hello: 10 World: 20} | Take([\"World\" \"Hello\"]) | Log\nAssert.Is([20 10] Break: true)\n{Hello: 10 World: 20} | Take(\"Universe\") | Log\nAssert.Is(nil Break: true)\n{abc: 10 def: 20} | Take(\"def\") | Log\nAssert.Is(20 Break: true)\n\n; ; Take using a variable as index\n1 = index\n[1 2 3 4] | Take(index) | Log\nAssert.Is(2 Break: true)\n\"Hello\" = key\n{Hello: 10 World: 20} | Take(key) | Log\nAssert.Is(10 Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Tan/","title":"Tan","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/General/TargetCamera/","title":"TargetCamera","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>{pivot: Float3 distance: Float rotation: Float2}</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{pivot: Float3 distance: Float rotation: Float2}</code> <code>FlySpeed</code>  No Controls fly speed with the keyboard <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>ScrollSpeed</code>  No Controls middle mouse movement speed <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>PanSpeed</code>  No Controls middle mouse pan speed <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>LookSpeed</code>  No Controls right mouse look speed <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>PivotDistance</code>  No Controls distance to the point being looked at <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <p>Provides editor free camera controls</p> <p> </p>"},{"location":"shards/shards/General/ToBase58/","title":"ToBase58","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code>"},{"location":"shards/shards/General/ToBase64/","title":"ToBase64","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A bytes or string value to be encoded to Base64. <code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The Base64 encoded string representation of the input value. <code>String</code> <p>Encodes the input bytes or string value to its Base64 string representation.</p> <p> </p>"},{"location":"shards/shards/General/ToBytes/","title":"ToBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/General/ToColor/","title":"ToColor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type that can be converted to the specified output type. This includes sequences, strings, enums, and vector types. <code>Any</code> <code>Output \u27a1\ufe0f</code> The converted value in the specified output type. <code>Any</code> <p>Converts various input types (sequences, strings, enums, vectors) to the specified output type (e.g., integers, floats, colors). The conversion ensures type compatibility and handles different input formats.</p> <p> </p>"},{"location":"shards/shards/General/ToFloat/","title":"ToFloat","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type that can be converted to the specified output type. This includes sequences, strings, enums, and vector types. <code>Any</code> <code>Output \u27a1\ufe0f</code> The converted value in the specified output type. <code>Any</code> <p>Converts various input types (sequences, strings, enums, vectors) to the specified output type (e.g., integers, floats, colors). The conversion ensures type compatibility and handles different input formats.</p>"},{"location":"shards/shards/General/ToFloat/#details","title":"Details","text":"<p>This shard typecasts integer and string numeric values into the single float data type (<code>float</code>).</p>"},{"location":"shards/shards/General/ToFloat/#examples","title":"Examples","text":"Code <pre><code>1 | ToFloat | Log\nAssert.Is(1.0 Break: true)\n\n2.2 | ToFloat | Log\nAssert.Is(2.2 Break: true)\n\n\"3\" | ToFloat | Log\nAssert.Is(3.0 Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/ToFloat2/","title":"ToFloat2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type that can be converted to the specified output type. This includes sequences, strings, enums, and vector types. <code>Any</code> <code>Output \u27a1\ufe0f</code> The converted value in the specified output type. <code>Any</code> <p>Converts various input types (sequences, strings, enums, vectors) to the specified output type (e.g., integers, floats, colors). The conversion ensures type compatibility and handles different input formats.</p> <p> </p>"},{"location":"shards/shards/General/ToFloat3/","title":"ToFloat3","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type that can be converted to the specified output type. This includes sequences, strings, enums, and vector types. <code>Any</code> <code>Output \u27a1\ufe0f</code> The converted value in the specified output type. <code>Any</code> <p>Converts various input types (sequences, strings, enums, vectors) to the specified output type (e.g., integers, floats, colors). The conversion ensures type compatibility and handles different input formats.</p> <p> </p>"},{"location":"shards/shards/General/ToFloat4/","title":"ToFloat4","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type that can be converted to the specified output type. This includes sequences, strings, enums, and vector types. <code>Any</code> <code>Output \u27a1\ufe0f</code> The converted value in the specified output type. <code>Any</code> <p>Converts various input types (sequences, strings, enums, vectors) to the specified output type (e.g., integers, floats, colors). The conversion ensures type compatibility and handles different input formats.</p> <p> </p>"},{"location":"shards/shards/General/ToHex/","title":"ToHex","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to be converted to a hexadecimal string. Supported types: integer, bytes, and string. <code>Int</code><code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The hexadecimal string representation of the input value. <code>String</code> <p>Converts the input value to its hexadecimal string representation.</p> <p> </p>"},{"location":"shards/shards/General/ToInt/","title":"ToInt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type that can be converted to the specified output type. This includes sequences, strings, enums, and vector types. <code>Any</code> <code>Output \u27a1\ufe0f</code> The converted value in the specified output type. <code>Any</code> <p>Converts various input types (sequences, strings, enums, vectors) to the specified output type (e.g., integers, floats, colors). The conversion ensures type compatibility and handles different input formats.</p>"},{"location":"shards/shards/General/ToInt/#details","title":"Details","text":"<p>This shard typecasts float and string numeric values into the single integer data type (<code>int</code>).</p>"},{"location":"shards/shards/General/ToInt/#examples","title":"Examples","text":"Code <pre><code>1 | ToInt | Log\nAssert.Is( 1 Break: true)\n\n2.2 | ToInt | Log\nAssert.Is( 2 Break: true)\n\n\"3\" | ToInt | Log\nAssert.Is( 3 Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/ToInt16/","title":"ToInt16","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type that can be converted to the specified output type. This includes sequences, strings, enums, and vector types. <code>Any</code> <code>Output \u27a1\ufe0f</code> The converted value in the specified output type. <code>Any</code> <p>Converts various input types (sequences, strings, enums, vectors) to the specified output type (e.g., integers, floats, colors). The conversion ensures type compatibility and handles different input formats.</p> <p> </p>"},{"location":"shards/shards/General/ToInt2/","title":"ToInt2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type that can be converted to the specified output type. This includes sequences, strings, enums, and vector types. <code>Any</code> <code>Output \u27a1\ufe0f</code> The converted value in the specified output type. <code>Any</code> <p>Converts various input types (sequences, strings, enums, vectors) to the specified output type (e.g., integers, floats, colors). The conversion ensures type compatibility and handles different input formats.</p> <p> </p>"},{"location":"shards/shards/General/ToInt3/","title":"ToInt3","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type that can be converted to the specified output type. This includes sequences, strings, enums, and vector types. <code>Any</code> <code>Output \u27a1\ufe0f</code> The converted value in the specified output type. <code>Any</code> <p>Converts various input types (sequences, strings, enums, vectors) to the specified output type (e.g., integers, floats, colors). The conversion ensures type compatibility and handles different input formats.</p> <p> </p>"},{"location":"shards/shards/General/ToInt4/","title":"ToInt4","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type that can be converted to the specified output type. This includes sequences, strings, enums, and vector types. <code>Any</code> <code>Output \u27a1\ufe0f</code> The converted value in the specified output type. <code>Any</code> <p>Converts various input types (sequences, strings, enums, vectors) to the specified output type (e.g., integers, floats, colors). The conversion ensures type compatibility and handles different input formats.</p> <p> </p>"},{"location":"shards/shards/General/ToInt8/","title":"ToInt8","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type that can be converted to the specified output type. This includes sequences, strings, enums, and vector types. <code>Any</code> <code>Output \u27a1\ufe0f</code> The converted value in the specified output type. <code>Any</code> <p>Converts various input types (sequences, strings, enums, vectors) to the specified output type (e.g., integers, floats, colors). The conversion ensures type compatibility and handles different input formats.</p> <p> </p>"},{"location":"shards/shards/General/ToJson/","title":"ToJson","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <code>Pure</code>  No If the input string is generic pure json rather then shards flavored json. <code>true</code> <code>Bool</code> <code>Indent</code>  No How many spaces to use as json prettify indent. <code>0</code> <code>Int</code>"},{"location":"shards/shards/General/ToLEB128/","title":"ToLEB128","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Int</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <code>Signed</code>  No If the integer to encode/decode is signed and can be negative. <code>false</code> <code>Bool</code>"},{"location":"shards/shards/General/ToString/","title":"ToString","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any value to be converted to a string. <code>Any</code> <code>Output \u27a1\ufe0f</code> The string representation of the input value. <code>String</code> <p>Converts any input value to its string representation.</p> <p> </p>"},{"location":"shards/shards/General/TraitId/","title":"TraitId","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int2</code> <code>Trait</code>  Yes The trait <code>None</code> <code>Trait</code> <p>Retrieves the hash id of the given trait</p> <p> </p>"},{"location":"shards/shards/General/TryMany/","title":"TryMany","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Any]</code> <code>Wire</code>  No The wire to spawn and try to run many times concurrently. <code>None</code> <code>None</code><code>Wire</code><code>[Shard]</code> <code>Policy</code>  No The execution policy in terms of wires success. <code>WaitUntil::AllSuccess</code> <code>WaitUntil</code> <code>Threads</code>  No The number of cpu threads to use. <code>1</code> <code>Int</code>"},{"location":"shards/shards/General/TryMany/#examples","title":"Examples","text":"Code <pre><code>@wire(print {\n  \"Ok\"\n  Log\n})\n@wire(main-wire {\n\n  Const([\"A\" \"B\" \"C\"])\n  TryMany(\n    Wire: print\n    Policy:\n    WaitUntil::AllSuccess\n    Threads:\n    12\n  )\n  Log\n  Assert.Is([\"Ok\" \"Ok\" \"Ok\"] true)\n})\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/TypeOf/","title":"TypeOf","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input value is needed for this shard. <code>None</code> <code>Output \u27a1\ufe0f</code> The type of the specified expression's output. <code>Type</code> <code>OutputOf</code>  No Evaluates the output type of the given expression. That type will be checked against this shard's input. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>Evaluates the output type of the given expression specified by the 'OutputOf' parameter and returns that type. No input is required for this shard.</p> <p> </p>"},{"location":"shards/shards/General/UI/","title":"UI","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the UI. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Object</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Scale</code>  No The UI scale <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>Queue</code>  No The draw queue. <code>None</code> <code>None</code><code>&amp;GFX.DrawQueue</code> <p>Initializes a UI context</p> <p> </p>"},{"location":"shards/shards/General/UUID/","title":"UUID","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int16</code> <p>Outputs a UUID (Universally Unique Identifier).</p> <p> </p>"},{"location":"shards/shards/General/Update/","title":"Update","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to be set to the variable. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value is passed through as the output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>&amp;Any</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>Modifies the value of an existing mutable variable.</p>"},{"location":"shards/shards/General/Update/#details","title":"Details","text":"<p><code>Update</code> modifies the value of an existing mutable variable.</p> <p>The name of the variable comes from the <code>Name:</code> parameter and the update value comes from the input. </p> <p><code>Update</code> overwrites string, numeric, and sequence variables with the new value (coming from input). However, for sequences, it cannot update a sequence at the level of elements (i.e., add elements, remove elements, change element order, etc.), so it overwrites the whole sequence with whatever you've passed in the input field.</p> <p>Also, for an existing table, <code>Update</code> can only change the existing keys' values. It cannot add new key-value pairs to the table (do that with <code>Set</code>). To update existing key-values in a table you need to pass the key in the <code>Key:</code> parameter.</p> <p>Since variables may be locally scoped (created with <code>Global: false</code>; exists only for current wire) or globally scoped (created with <code>Global: true</code>; exists for all wires of that mesh), both parameters <code>Global:</code> and <code>Name:</code> are used in combination to identify the correct variable to update.</p> <p>The input to this shard is the update value to be applied to the mutable variables and is also passed through as this shard's output.</p> <p>Note</p> <p><code>Update</code> has an alias <code>&gt;</code>. See the code examples at the end to understand how these aliases are used.</p> <p>See also</p> <ul> <li><code>AppendTo</code></li> <li><code>PrependTo</code></li> <li><code>Push</code></li> <li><code>Sequence</code></li> <li><code>Set</code></li> <li><code>Table</code></li> </ul>"},{"location":"shards/shards/General/Update/#examples","title":"Examples","text":""},{"location":"shards/shards/General/Wait/","title":"Wait","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Wire</code>  No The wire to wait. <code>None</code> <code>Wire</code><code>String</code><code>None</code><code>&amp;Wire</code> <code>Passthrough</code>  No The output of this shard will be its input. <code>false</code> <code>Bool</code> <code>Timeout</code>  No The optional amount of time in seconds to wait for the wire to complete, if the time elapses the wire will be stopped and the flow will fail with a timeout error. <code>None</code> <code>Float</code><code>&amp;Float</code><code>None</code> <p>Waits for another wire to complete before resuming execution of the current wire.</p>"},{"location":"shards/shards/General/Wait/#examples","title":"Examples","text":"Code <pre><code>@wire(wire-that-waits {\n  If(Predicate: IsLess(0)\n    Then: {\n      \"Negative\" &gt; result\n    } Else: {\n      \"Positive\" &gt; result\n    }\n  )\n})\n\n@wire(main-wire {\n  Once({\n    \"false\" &gt;= result\n  })\n  5\n  Detach(wire-that-waits)\n  Wait(\n    Wire: \"myWire\"\n    Passthrough: false\n  )\n\n  result\n  Log\n} Looped: true)\n\n{logic-behavior: main-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/When/","title":"When","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the predicate. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input of the shard if <code>Passthrough</code> is <code>true</code>, or the <code>Predicate</code> is <code>false</code>; otherwise, the output of the <code>Action</code>. <code>Any</code> <code>Predicate</code>  No The predicate to evaluate in order to trigger Action. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Action</code>  No The shards to activate on when Predicate is true for When and false for WhenNot. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Passthrough</code>  No The output of this shard will be its input. <code>true</code> <code>Bool</code> <p>Conditional shard that only executes the action if the predicate is true.</p>"},{"location":"shards/shards/General/When/#examples","title":"Examples","text":"Code <pre><code>64\nWhen(\n  Predicate: {\n    IsMore(50)\n  }\n  Action: {\n    Msg(\"More than 50\")\n  }\n)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/WhenDone/","title":"WhenDone","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Wire</code>  No The wire to spawn and try to run many times concurrently. <code>None</code> <code>None</code><code>Wire</code><code>[Shard]</code>"},{"location":"shards/shards/General/WhenNot/","title":"WhenNot","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the predicate. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input of the shard if <code>Passthrough</code> is <code>true</code>, or the <code>Predicate</code> is <code>true</code>; otherwise, the output of the <code>Action</code>. <code>Any</code> <code>Predicate</code>  No The predicate to evaluate in order to trigger Action. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Action</code>  No The shards to activate on when Predicate is true for When and false for WhenNot. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Passthrough</code>  No The output of this shard will be its input. <code>true</code> <code>Bool</code> <p>Conditional shard that only executes the action if the predicate is false.</p>"},{"location":"shards/shards/General/WhenNot/#examples","title":"Examples","text":"Code <pre><code>42\nWhenNot(\n Predicate:{\n  IsMore(50)\n }\n Action:{\n  Msg(\"Less than 50\")\n })\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/WireLoader/","title":"WireLoader","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Provider</code>  No The shards wire provider. <code>None</code> <code>Object</code><code>None</code> <code>Mode</code>  No The way to run the wire. Inline: will run the sub wire inline within the root wire, a pause in the child wire will pause the root too; Detached: will run the wire separately in the same mesh, a pause in this wire will not pause the root; Stepped: the wire will run as a child, the root will tick the wire every activation of this shard and so a child pause won't pause the root. <code>Enum: 0 vendor: 0x66726167 type: 0x72756e43</code> <code>RunWireMode</code> <code>OnReload</code>  No Shards to execute when the wire is reloaded, the input of this flow will be the reloaded wire. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>OnError</code>  No Shards to execute when a wire reload failed, the input of this flow will be the error message. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code>"},{"location":"shards/shards/General/WireRunner/","title":"WireRunner","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Wire</code>  Yes The wire variable to compose and run. <code>None</code> <code>Wire</code><code>&amp;Wire</code> <code>Mode</code>  No The way to run the wire. Inline: will run the sub wire inline within the root wire, a pause in the child wire will pause the root too; Detached: will run the wire separately in the same mesh, a pause in this wire will not pause the root; Stepped: the wire will run as a child, the root will tick the wire every activation of this shard and so a child pause won't pause the root. <code>Enum: 0 vendor: 0x66726167 type: 0x72756e43</code> <code>RunWireMode</code>"},{"location":"shards/shards/General/Zip/","title":"Zip","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[{Any}]</code><code>[[Any]]</code> <code>Sequences</code>  Yes The sequences to zip together. <code>None</code> <code>[[Any] &amp;[Any]]</code> <code>Keys</code>  No The element keys to user. <code>None</code> <code>None</code><code>[String]</code> <p>Zip will take any number of sequences and return a sequence of sequences, where each sequence is a tuple of the values from the input sequences at the same index.</p> <p> </p>"},{"location":"shards/shards/Gizmos/Arrow/","title":"Gizmos.Arrow","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Float4]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <p>Shows an arrow</p> <p> </p>"},{"location":"shards/shards/Gizmos/Box/","title":"Gizmos.Box","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Center</code>  Yes Center of the box <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>Size</code>  No Size of the box <code>None</code> <code>None</code><code>Float3</code><code>&amp;Float3</code> <code>Transform</code>  No Transform applied to the box <code>None</code> <code>None</code><code>[Float4]</code><code>&amp;[Float4]</code> <code>Color</code>  No Boxar color of the box <code>None</code> <code>None</code><code>Float4</code><code>&amp;Float4</code> <code>Thickness</code>  No Width of the box in screen space <code>None</code> <code>None</code><code>Int</code><code>Float</code> <p>Draws a box in 3d space</p> <p> </p>"},{"location":"shards/shards/Gizmos/Circle/","title":"Gizmos.Circle","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Center</code>  Yes Center of the circle <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>XBase</code>  Yes X direction of the plane the circle is on <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>YBase</code>  Yes Y direction of the plane the circle is on <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>Radius</code>  No Radius <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>Color</code>  No Linear color of the circle <code>None</code> <code>None</code><code>Float4</code><code>&amp;Float4</code> <code>Thickness</code>  No Width of the circle in screen space <code>None</code> <code>None</code><code>Int</code><code>Float</code> <p>Draws a line in 3d space</p> <p> </p>"},{"location":"shards/shards/Gizmos/Context/","title":"Gizmos.Context","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>View</code>  Yes The view used to render the gizmos.When drawing over a scene, the view should be the same. <code>None</code> <code>&amp;GFX.View</code> <code>Queue</code>  Yes The queue to draw into. <code>None</code> <code>&amp;GFX.DrawQueue</code> <code>Contents</code>  No Actual logic to draw the actual gizmos, the input of this flow will be a boolean that will be true if the gizmo is being pressed and so edited. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Scaling</code>  No The scaling factor for gizmo elements. <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>Interactive</code>  No Used to togle gizmo interactions on/off. <code>None</code> <code>None</code><code>&amp;Bool</code> <p>Provides a context for rendering gizmos</p> <p> </p>"},{"location":"shards/shards/Gizmos/Debug/","title":"Gizmos.Debug","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <p>Shows the renderer debug visuals</p> <p> </p>"},{"location":"shards/shards/Gizmos/Disc/","title":"Gizmos.Disc","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Center</code>  Yes Center of the disc <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>XBase</code>  Yes X direction of the plane the disc is on <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>YBase</code>  Yes Y direction of the plane the disc is on <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>OuterRadius</code>  No Radius of the outer circle of the disc <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>InnerRadius</code>  No Radius of the inner circle of the disc <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>Color</code>  No Linear color of the disc <code>None</code> <code>None</code><code>Float4</code><code>&amp;Float4</code> <code>Culling</code>  No Back-face culling of the disc <code>None</code> <code>None</code><code>Bool</code><code>&amp;Bool</code> <p>Draws a filled disc in 3d space</p> <p> </p>"},{"location":"shards/shards/Gizmos/Grid/","title":"Gizmos.Grid","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Center</code>  Yes Center of the disc <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>XBase</code>  Yes X direction of the grid <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>YBase</code>  Yes Y direction of the grid <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>Thickness</code>  No Width of the line in screen space <code>None</code> <code>None</code><code>Int</code><code>Float</code> <code>StepSize</code>  No Step size of the grid lines <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>Size</code>  No Number of grid lines <code>None</code> <code>None</code><code>Int</code><code>&amp;Int</code> <code>Color</code>  No Linear color of the grid lines <code>None</code> <code>None</code><code>Float4</code><code>&amp;Float4</code> <p>Draws a grid</p> <p> </p>"},{"location":"shards/shards/Gizmos/Highlight/","title":"Gizmos.Highlight","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>GFX.Drawable</code><code>[GFX.Drawable]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Color</code>  No Color to render wireframe at <code>@f4(1 0 0 1)</code> <code>Float4</code> <p>Queues a draw operation to highlight a drawable</p> <p> </p>"},{"location":"shards/shards/Gizmos/Line/","title":"Gizmos.Line","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>A</code>  Yes Starting position of the line <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>B</code>  Yes Ending position of the line <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>Color</code>  No Linear color of the line <code>None</code> <code>None</code><code>Float4</code><code>&amp;Float4</code> <code>Thickness</code>  No Width of the line in screen space <code>None</code> <code>None</code><code>Int</code><code>Float</code> <p>Draws a line in 3d space</p> <p> </p>"},{"location":"shards/shards/Gizmos/Point/","title":"Gizmos.Point","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Center</code>  Yes Center of the point <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>Color</code>  No Pointar color of the point <code>None</code> <code>None</code><code>Float4</code><code>&amp;Float4</code> <code>Thickness</code>  No Size of the point in screen space <code>None</code> <code>None</code><code>Int</code><code>Float</code> <p>Draws a point in 3d space</p> <p> </p>"},{"location":"shards/shards/Gizmos/Rect/","title":"Gizmos.Rect","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Center</code>  Yes Starting position of the rectangle <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>XBase</code>  Yes X direction of the plane the rectangle is on <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>YBase</code>  Yes Y direction of the plane the rectangle is on <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>Size</code>  No Size of the rectangle <code>None</code> <code>None</code><code>Float2</code><code>&amp;Float2</code> <code>Color</code>  No Linear color of the rectangle <code>None</code> <code>None</code><code>Float4</code><code>&amp;Float4</code> <code>Thickness</code>  No Width of the rectangle in screen space <code>None</code> <code>None</code><code>Int</code><code>Float</code> <p>Draws a rectangle in 3d space</p> <p> </p>"},{"location":"shards/shards/Gizmos/RefspaceGridOverlay/","title":"Gizmos.RefspaceGridOverlay","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Center</code>  Yes Center of the disc <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>XBase</code>  Yes X direction of the plane the disc is on <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>YBase</code>  Yes Y direction of the plane the disc is on <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>Thickness</code>  No Width of the line in screen space <code>None</code> <code>None</code><code>Int</code><code>Float</code> <code>StepSize</code>  No Step size of the grid lines <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>Color</code>  No Linear color of the grid lines <code>None</code> <code>None</code><code>Float4</code><code>&amp;Float4</code> <p>Draws a grid</p> <p> </p>"},{"location":"shards/shards/Gizmos/Rotation/","title":"Gizmos.Rotation","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>{translation: Float3 rotation: Float4 scale: Float3}</code><code>[{translation: Float3 rotation: Float4 scale: Float3}]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{translation: Float3 rotation: Float4 scale: Float3}</code><code>[{translation: Float3 rotation: Float4 scale: Float3}]</code> <code>ScreenSize</code>  No Size of the gizmo on screen (UI size) <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <p>Shows a rotation gizmo</p> <p> </p>"},{"location":"shards/shards/Gizmos/Scaling/","title":"Gizmos.Scaling","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>{translation: Float3 rotation: Float4 scale: Float3}</code><code>[{translation: Float3 rotation: Float4 scale: Float3}]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{translation: Float3 rotation: Float4 scale: Float3}</code><code>[{translation: Float3 rotation: Float4 scale: Float3}]</code> <code>ScreenSize</code>  No Size of the gizmo on screen (UI size) <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <p>Shows a scaling gizmo</p> <p> </p>"},{"location":"shards/shards/Gizmos/ScreenScale/","title":"Gizmos.ScreenScale","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float</code> <code>Position</code>  Yes The point in space at which the object is rendered <code>None</code> <code>Float3</code><code>&amp;Float3</code> <p>Outputs a scaling factor to give an object a uniform size on the screen</p> <p> </p>"},{"location":"shards/shards/Gizmos/ScreenXY/","title":"Gizmos.ScreenXY","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float3]</code> <p>Outputs an X and Y direction that are aligned with the current view</p> <p> </p>"},{"location":"shards/shards/Gizmos/SolidRect/","title":"Gizmos.SolidRect","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Center</code>  Yes Starting position of the rectangle <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>XBase</code>  Yes X direction of the plane the rectangle is on <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>YBase</code>  Yes Y direction of the plane the rectangle is on <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>Size</code>  No Size of the rectange <code>None</code> <code>None</code><code>Float2</code><code>&amp;Float2</code> <code>Color</code>  No Rectanglear color of the rectangle <code>None</code> <code>None</code><code>Float4</code><code>&amp;Float4</code> <code>Culling</code>  No Back-face culling of the rectangle <code>None</code> <code>None</code><code>Bool</code><code>&amp;Bool</code> <p>Draws a filled rectangle in 3d space</p> <p> </p>"},{"location":"shards/shards/Gizmos/Translation/","title":"Gizmos.Translation","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>{translation: Float3 rotation: Float4 scale: Float3}</code><code>[{translation: Float3 rotation: Float4 scale: Float3}]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{translation: Float3 rotation: Float4 scale: Float3}</code><code>[{translation: Float3 rotation: Float4 scale: Float3}]</code> <code>ScreenSize</code>  No Size of the gizmo on screen (UI size) <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <p>Shows a translation gizmo</p> <p> </p>"},{"location":"shards/shards/Hash/Blake2-128/","title":"Hash.Blake2-128","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/Hash/Blake2-256/","title":"Hash.Blake2-256","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/Hash/Keccak-256/","title":"Hash.Keccak-256","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/Hash/Keccak-512/","title":"Hash.Keccak-512","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/Hash/Sha2-256/","title":"Hash.Sha2-256","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/Hash/Sha2-512/","title":"Hash.Sha2-512","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/Hash/Sha3-256/","title":"Hash.Sha3-256","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/Hash/Sha3-512/","title":"Hash.Sha3-512","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/Hash/XXH-128/","title":"Hash.XXH-128","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/Hash/XXH-64/","title":"Hash.XXH-64","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/Http/Delete/","title":"Http.Delete","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code><code>{String}</code><code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{status: Int headers: {String} body: Bytes}</code><code>Bytes</code><code>{status: Int headers: {String} body: String}</code><code>String</code> <code>URL</code>  No The url to request to. `` <code>String</code><code>&amp;String</code> <code>Headers</code>  No The headers to use for the request. <code>None</code> <code>None</code><code>{String}</code><code>&amp;{String}</code> <code>Timeout</code>  No How many seconds to wait for the request to complete. <code>10</code> <code>Int</code> <code>Bytes</code>  No If instead of a string the shard should output bytes. <code>false</code> <code>Bool</code> <code>FullResponse</code>  No If the output should be a table with the full response, including headers and status. <code>false</code> <code>Bool</code> <code>AcceptInvalidCerts</code>  No If we should ignore invalid certificates. This is useful for testing but should not be used in production. <code>false</code> <code>Bool</code> <code>Retry</code>  No How many times to retry the request if it fails. <code>0</code> <code>Int</code>"},{"location":"shards/shards/Http/Get/","title":"Http.Get","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code><code>{String}</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{status: Int headers: {String} body: Bytes}</code><code>Bytes</code><code>{status: Int headers: {String} body: String}</code><code>String</code> <code>URL</code>  No The url to request to. `` <code>String</code><code>&amp;String</code> <code>Headers</code>  No The headers to use for the request. <code>None</code> <code>None</code><code>{String}</code><code>&amp;{String}</code> <code>Timeout</code>  No How many seconds to wait for the request to complete. <code>10</code> <code>Int</code> <code>Bytes</code>  No If instead of a string the shard should output bytes. <code>false</code> <code>Bool</code> <code>FullResponse</code>  No If the output should be a table with the full response, including headers and status. <code>false</code> <code>Bool</code> <code>AcceptInvalidCerts</code>  No If we should ignore invalid certificates. This is useful for testing but should not be used in production. <code>false</code> <code>Bool</code> <code>Retry</code>  No How many times to retry the request if it fails. <code>0</code> <code>Int</code>"},{"location":"shards/shards/Http/Head/","title":"Http.Head","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code><code>{String}</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{status: Int headers: {String} body: Bytes}</code><code>Bytes</code><code>{status: Int headers: {String} body: String}</code><code>String</code> <code>URL</code>  No The url to request to. `` <code>String</code><code>&amp;String</code> <code>Headers</code>  No The headers to use for the request. <code>None</code> <code>None</code><code>{String}</code><code>&amp;{String}</code> <code>Timeout</code>  No How many seconds to wait for the request to complete. <code>10</code> <code>Int</code> <code>Bytes</code>  No If instead of a string the shard should output bytes. <code>false</code> <code>Bool</code> <code>FullResponse</code>  No If the output should be a table with the full response, including headers and status. <code>false</code> <code>Bool</code> <code>AcceptInvalidCerts</code>  No If we should ignore invalid certificates. This is useful for testing but should not be used in production. <code>false</code> <code>Bool</code> <code>Retry</code>  No How many times to retry the request if it fails. <code>0</code> <code>Int</code>"},{"location":"shards/shards/Http/Patch/","title":"Http.Patch","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code><code>{String}</code><code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{status: Int headers: {String} body: Bytes}</code><code>Bytes</code><code>{status: Int headers: {String} body: String}</code><code>String</code> <code>URL</code>  No The url to request to. `` <code>String</code><code>&amp;String</code> <code>Headers</code>  No The headers to use for the request. <code>None</code> <code>None</code><code>{String}</code><code>&amp;{String}</code> <code>Timeout</code>  No How many seconds to wait for the request to complete. <code>10</code> <code>Int</code> <code>Bytes</code>  No If instead of a string the shard should output bytes. <code>false</code> <code>Bool</code> <code>FullResponse</code>  No If the output should be a table with the full response, including headers and status. <code>false</code> <code>Bool</code> <code>AcceptInvalidCerts</code>  No If we should ignore invalid certificates. This is useful for testing but should not be used in production. <code>false</code> <code>Bool</code> <code>Retry</code>  No How many times to retry the request if it fails. <code>0</code> <code>Int</code>"},{"location":"shards/shards/Http/Post/","title":"Http.Post","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code><code>{String}</code><code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{status: Int headers: {String} body: Bytes}</code><code>Bytes</code><code>{status: Int headers: {String} body: String}</code><code>String</code> <code>URL</code>  No The url to request to. `` <code>String</code><code>&amp;String</code> <code>Headers</code>  No The headers to use for the request. <code>None</code> <code>None</code><code>{String}</code><code>&amp;{String}</code> <code>Timeout</code>  No How many seconds to wait for the request to complete. <code>10</code> <code>Int</code> <code>Bytes</code>  No If instead of a string the shard should output bytes. <code>false</code> <code>Bool</code> <code>FullResponse</code>  No If the output should be a table with the full response, including headers and status. <code>false</code> <code>Bool</code> <code>AcceptInvalidCerts</code>  No If we should ignore invalid certificates. This is useful for testing but should not be used in production. <code>false</code> <code>Bool</code> <code>Retry</code>  No How many times to retry the request if it fails. <code>0</code> <code>Int</code>"},{"location":"shards/shards/Http/Put/","title":"Http.Put","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code><code>{String}</code><code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{status: Int headers: {String} body: Bytes}</code><code>Bytes</code><code>{status: Int headers: {String} body: String}</code><code>String</code> <code>URL</code>  No The url to request to. `` <code>String</code><code>&amp;String</code> <code>Headers</code>  No The headers to use for the request. <code>None</code> <code>None</code><code>{String}</code><code>&amp;{String}</code> <code>Timeout</code>  No How many seconds to wait for the request to complete. <code>10</code> <code>Int</code> <code>Bytes</code>  No If instead of a string the shard should output bytes. <code>false</code> <code>Bool</code> <code>FullResponse</code>  No If the output should be a table with the full response, including headers and status. <code>false</code> <code>Bool</code> <code>AcceptInvalidCerts</code>  No If we should ignore invalid certificates. This is useful for testing but should not be used in production. <code>false</code> <code>Bool</code> <code>Retry</code>  No How many times to retry the request if it fails. <code>0</code> <code>Int</code>"},{"location":"shards/shards/Http/Read/","title":"Http.Read","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{String}</code>"},{"location":"shards/shards/Http/Response/","title":"Http.Response","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code><code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code><code>Bytes</code> <code>Status</code>  No The HTTP status code to return. <code>200</code> <code>Int</code> <code>Headers</code>  No The headers to attach to this response. <code>None</code> <code>{String}</code><code>&amp;{String}</code><code>None</code>"},{"location":"shards/shards/Http/SendFile/","title":"Http.SendFile","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <code>Headers</code>  No The headers to attach to this response. <code>None</code> <code>{String}</code><code>&amp;{String}</code><code>None</code>"},{"location":"shards/shards/Http/Server/","title":"Http.Server","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Handler</code>  No The wire that will be spawned and handle a remote request. <code>None</code> <code>Wire</code><code>None</code> <code>Endpoint</code>  No The URL from where your service can be accessed by a client. <code>0.0.0.0</code> <code>String</code> <code>Port</code>  No The port this service will use. <code>7070</code> <code>Int</code>"},{"location":"shards/shards/Inputs/DebugUI/","title":"Inputs.DebugUI","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <p>Shows the input system debug UI</p> <p> </p>"},{"location":"shards/shards/Inputs/GetContext/","title":"Inputs.GetContext","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Object</code>"},{"location":"shards/shards/Inputs/HandleURL/","title":"Inputs.HandleURL","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Action</code>  No The Shards to run if a text/file drop event happened. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code>"},{"location":"shards/shards/Inputs/IsKeyDown/","title":"Inputs.IsKeyDown","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Key</code>  No The name of the key to check. `` <code>String</code>"},{"location":"shards/shards/Inputs/KeyDown/","title":"Inputs.KeyDown","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Key</code>  Yes The key to check. <code>None</code> <code>String</code> <code>Action</code>  No The Shards to run if a key event happened. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Repeat</code>  No If the key event should be repeated. <code>false</code> <code>None</code><code>Bool</code> <code>Modifiers</code>  No Modifier keys to check. <code>None</code> <code>None</code><code>[ModifierKey]</code> <code>Consume</code>  No Consume events. <code>None</code> <code>None</code><code>Bool</code> <code>IgnoreConsumed</code>  No Ignore consumed events. <code>None</code> <code>None</code><code>Bool</code>"},{"location":"shards/shards/Inputs/KeyUp/","title":"Inputs.KeyUp","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Key</code>  Yes The key to check. <code>None</code> <code>String</code> <code>Action</code>  No The Shards to run if a key event happened. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Repeat</code>  No If the key event should be repeated. <code>false</code> <code>None</code><code>Bool</code> <code>Modifiers</code>  No Modifier keys to check. <code>None</code> <code>None</code><code>[ModifierKey]</code> <code>Consume</code>  No Consume events. <code>None</code> <code>None</code><code>Bool</code> <code>IgnoreConsumed</code>  No Ignore consumed events. <code>None</code> <code>None</code><code>Bool</code>"},{"location":"shards/shards/Inputs/MatchModifier/","title":"Inputs.MatchModifier","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Modifiers</code>  No Modifier keys to check. <code>None</code> <code>None</code><code>[ModifierKey]</code>"},{"location":"shards/shards/Inputs/Mouse/","title":"Inputs.Mouse","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Hidden</code>  No If the cursor should be hidden. <code>false</code> <code>Bool</code> <code>Capture</code>  No If the mouse should be confined to the application window. <code>false</code> <code>Bool</code> <code>Relative</code>  No If the mouse should only report relative movements. <code>false</code> <code>Bool</code>"},{"location":"shards/shards/Inputs/MouseDelta/","title":"Inputs.MouseDelta","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float2</code>"},{"location":"shards/shards/Inputs/MouseDown/","title":"Inputs.MouseDown","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Left</code>  No The action to perform when the left mouse button is pressed down. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Right</code>  No The action to perform when the right mouse button is pressed down. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Middle</code>  No The action to perform when the middle mouse button is pressed down. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Consume</code>  No Consume events. <code>None</code> <code>None</code><code>Bool</code> <code>IgnoreConsumed</code>  No Ignore consumed events. <code>None</code> <code>None</code><code>Bool</code>"},{"location":"shards/shards/Inputs/MousePixelPos/","title":"Inputs.MousePixelPos","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int2</code>"},{"location":"shards/shards/Inputs/MousePos/","title":"Inputs.MousePos","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float2</code>"},{"location":"shards/shards/Inputs/MouseUp/","title":"Inputs.MouseUp","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Left</code>  No The action to perform when the left mouse button is pressed down. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Right</code>  No The action to perform when the right mouse button is pressed down. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Middle</code>  No The action to perform when the middle mouse button is pressed down. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Consume</code>  No Consume events. <code>None</code> <code>None</code><code>Bool</code> <code>IgnoreConsumed</code>  No Ignore consumed events. <code>None</code> <code>None</code><code>Bool</code>"},{"location":"shards/shards/Inputs/PixelSize/","title":"Inputs.PixelSize","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int2</code>"},{"location":"shards/shards/Inputs/Size/","title":"Inputs.Size","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float2</code>"},{"location":"shards/shards/Math/Abs/","title":"Math.Abs","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Abs/#examples","title":"Examples","text":"Code <pre><code>Const([-0.1 -0.2 0.4])\nMath.Abs | Log\n\nAssert.Is([0.1 0.2 0.4] true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Acos/","title":"Math.Acos","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Acos/#examples","title":"Examples","text":"Code <pre><code>@f4(-1.0 0.0 0.5 1.0)\nMath.Acos | Log\n\nMath.Subtract(@f4(3.1415927 1.5707963 1.0471976 0.0)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Acosh/","title":"Math.Acosh","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Acosh/#examples","title":"Examples","text":"Code <pre><code>@f3(1.0 2.0 2.5)\nMath.Acosh | Log\n\nMath.Subtract(@f3(0 1.3169578 1.5667992)) | Math.Abs |\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Add/","title":"Math.Add","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/Math/Add/#details","title":"Details","text":"<p>Addition is a binary operation, i.e. it needs two arguments to give a result.</p> <p>The <code>Math.Add</code> shard takes in the Input and the parameter <code>Operand:</code> to produce the Output.</p> <p>Both Input and <code>Operand:</code> can be an integer, a float, or a sequence of such entities (but both value types should match for a given operation). The Output is generally of the same type as the Input provided to the shard.</p>"},{"location":"shards/shards/Math/Add/#binary-operations-on-sequences","title":"Binary operations on sequences","text":"<p>Taking <code>Math.Add</code> operator as an example.</p> <p>If sequences are passed as arguments, the operator takes pairs of correspondingly placed elements from these sequences and computes the result for each pair. This gives rise to different scenarios.</p> <ol> <li> <p>Input and <code>Operand:</code> sequence sizes are equal</p> <p>Since each element in Input sequence has a corresponding element in <code>Operand:</code> sequence, the Output sequence also has the same number of resultant elements and hence the same size as the argument sequences.</p> Entity Sequence Seq. Size Input [a b c] 3 <code>Operand:</code> [1 2 3] 3 Output [(a+1) (b+2) (c+3)] 3 </li> <li> <p>Input sequence size &lt; <code>Operand:</code> sequence size</p> <p>Here a few <code>Operand:</code> elements (<code>Operand:</code> sequence size - Input sequence size) will have no Input elements to pair off with. These <code>Operand:</code> elements are ignored in the final Output. Hence the Output sequence size here will the same as the Input sequence size.</p> Entity Sequence Seq. Size Input [a b] 2 <code>Operand:</code> [1 2 3] 3 Output [(a+1) (b+2) (_+3)] =&gt; [(a+1) (b+2)] 2 </li> <li> <p>Input sequence size &gt; <code>Operand:</code> sequence size</p> <p>Once all the <code>Operand:</code> elements have been paired off and computed with the corresponding Input elements, the remaining Input elements (Input sequence size - <code>Operand:</code> sequence size) will continue looping over the <code>Operand:</code> sequence till all of the Input sequence elements have been used. As a result the Output sequence will again be the same size as the Input sequence.</p> Entity Sequence Seq. Size Input [a b c d e] 5 <code>Operand:</code> [1 2] 2 Output [(a+1) (b+2) (c+1) (d+2) (e+1)] 5 </li> </ol> <p>Note</p> <p>Such sequence operations are useful in transforming and translating 2D/3D grid values (a frequent requirement in graphics rendering). This is done by passing the transform inputs as an Input sequence (to be applied to every row/line for a 2D grid or to every 2D-matrix/plane for a 3D grid) of the 2D matrix and the <code>Operand:</code> sequence as the set of 2D/3D coordinates (represented linearly) that is to be transformed.</p>"},{"location":"shards/shards/Math/Add/#examples","title":"Examples","text":"Code <pre><code>; Add unequal-sized sequences (input size &lt; operand size)\n[4.0] ; Input\nLog ; prints input =&gt; [4.0]\nMath.Add([3.0 4.0 2.2]) ; Operand\n; input seq elements compute with corresponding operand seq elements\n; since input size &lt; operand size, remaining operand seq elements ignored\nLog ; prints input + operand =&gt; [7.0]\nAssert.Is([7.0] true)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Add unequal-sized sequences (input size &gt; operand size)\n[4 2 1 5 8] ; Input\nLog ; prints input =&gt; [4 2 1 5 8]\nMath.Add([6 4]) ; Operand\n; input seq elements compute with corresponding operand seq elements\n; for (input size &gt; operand size): remaining input seq elements continually loop over operand seq elements\nLog ; prints input + operand =&gt; [10 6 7 9 14]\nAssert.Is([10 6 7 9 14] true)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Add floats\n5.3 ; Input\nLog ; prints input =&gt; 5.3\nMath.Add(2.1) ; Operand\nLog ; prints input + operand =&gt; 7.4\nAssert.Is(7.4 true) ; expect: (5.3 + 2.1) =&gt; 7.4\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Add equal-sized sequences\n[4 5.1 6.4] ; Input\nLog ; prints input =&gt; [4 5.1 6.4]\nMath.Add([3 4.0 2.2]) ; Operand\n; input seq elements compute with corresponding operand seq elements\nLog ; prints input + operand =&gt; [7 9.1 8.6]\nAssert.IsAlmost([7 9.1 8.6] true)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Add integers\n5\nLog ; prints input =&gt; 5\nMath.Add(2) ; Operand\nLog ; prints input + operand =&gt; 7\nAssert.Is(7 true) ; expect: (5 + 2) =&gt; 7\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/And/","title":"Math.And","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s) or a sequence of integers supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code><code>Bool</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code><code>Bool</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/Math/And/#examples","title":"Examples","text":"Code <pre><code>@i4(0 2 4 8)\nMath.And(\nOperand: @i4(3 3 3 3)) | Log(\n\nAssert.Is(@i4(0 2 0 0)) true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Asin/","title":"Math.Asin","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Asin/#examples","title":"Examples","text":"Code <pre><code>@f4(1.0 0.0 0.5 1.0)\nMath.Asin | Log\n\nMath.Subtract(@f4(-1.5707963 0.0 0.52359878 1.5707963)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Asinh/","title":"Math.Asinh","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Asinh/#examples","title":"Examples","text":"Code <pre><code>@f3(-1.0 0.0 1.0)\nMath.Asinh | Log\n\nMath.Subtract(@f3(-0.88137359 0.0 0.88137359)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Atan/","title":"Math.Atan","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Atan/#examples","title":"Examples","text":"Code <pre><code>@f3(-1.0 0.0 1.0)\nMath.Atan | Log\n\nMath.Subtract(@f3(-0.78539816 0.0 0.78539816)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Atanh/","title":"Math.Atanh","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Atanh/#examples","title":"Examples","text":"Code <pre><code>@f3(-0.5 0.0 0.5)\nMath.Atanh | Log\n\nMath.Subtract(@f3(-0.54930614 0.0 0.54930614)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/AxisAngleX/","title":"Math.AxisAngleX","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float4</code>"},{"location":"shards/shards/Math/AxisAngleY/","title":"Math.AxisAngleY","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float4</code>"},{"location":"shards/shards/Math/AxisAngleZ/","title":"Math.AxisAngleZ","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float4</code>"},{"location":"shards/shards/Math/Cbrt/","title":"Math.Cbrt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Cbrt/#examples","title":"Examples","text":"Code <pre><code>@f3(-27.0 1.0 8.0)\nMath.Cbrt | Log\n\nMath.Subtract(@f3(-3.0 1.0 2.0)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Ceil/","title":"Math.Ceil","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Ceil/#examples","title":"Examples","text":"Code <pre><code>@f3(-0.95 4.0 7.54)\nMath.Ceil | Log\n\nAssert.Is(@f3(0.0 4.0 8.0) true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Compose/","title":"Math.Compose","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>{translation: Float3 rotation: Float4 scale: Float3}</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float4]</code> <p>Compose a matrix(4x4) from a TRS description</p> <p> </p>"},{"location":"shards/shards/Math/Cos/","title":"Math.Cos","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Cos/#examples","title":"Examples","text":"Code <pre><code>@f3(0 3.1415927 6.2831853)\nMath.Cos | Log\n\nMath.Subtract(@f3(1.0 -1.0 1.0)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Cosh/","title":"Math.Cosh","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Cosh/#examples","title":"Examples","text":"Code <pre><code>@f3(-1.0 0.0 1.0)\nMath.Cosh | Log\n\nMath.Subtract(@f3(1.5430806 1.0 1.5430806)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Cross/","title":"Math.Cross","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Float2</code><code>[Float2]</code><code>Float3</code><code>[Float3]</code><code>Float4</code><code>[Float4]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float2</code><code>[Float2]</code><code>Float3</code><code>[Float3]</code><code>Float4</code><code>[Float4]</code> <code>Operand</code>  No The operand. <code>0</code> <code>Float2</code><code>[Float2]</code><code>Float3</code><code>[Float3]</code><code>Float4</code><code>[Float4]</code><code>&amp;Float2</code><code>&amp;[Float2]</code><code>&amp;Float3</code><code>&amp;[Float3]</code><code>&amp;Float4</code><code>&amp;[Float4]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p> <p> </p>"},{"location":"shards/shards/Math/Dec/","title":"Math.Dec","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Any</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Any</code> <code>Value</code>  Yes The value to apply the operation to. <code>None</code> <code>&amp;Int</code><code>&amp;Int2</code><code>&amp;Int3</code><code>&amp;Int4</code><code>&amp;Int8</code><code>&amp;Int16</code><code>&amp;Float</code><code>&amp;Float2</code><code>&amp;Float3</code><code>&amp;Float4</code><code>&amp;Color</code><code>&amp;[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Dec/#details","title":"Details","text":"<p>This shard decrements the <code>Value:</code> parameter by 1.</p> <p>The <code>Value:</code> parameter should be a variable that holds a valid numeric value.</p> <p>See also</p> <ul> <li><code>Math.Inc</code></li> </ul>"},{"location":"shards/shards/Math/Dec/#examples","title":"Examples","text":"Code <pre><code>10.0 &gt;= mutable\nMath.Dec(Value: mutable)\nmutable | Log\n\nAssert.Is(9.0 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Decompose/","title":"Math.Decompose","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Float4]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{translation: Float3 rotation: Float4 scale: Float3}</code> <p>Decompose a matrix(4x4) into a TRS description</p> <p> </p>"},{"location":"shards/shards/Math/DegreesToRadians/","title":"Math.DegreesToRadians","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float</code>"},{"location":"shards/shards/Math/Divide/","title":"Math.Divide","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/Math/Divide/#examples","title":"Examples","text":"Code <pre><code>9.0\nMath.Divide(Operand: 2.0) | Log\n\nAssert.Is(4.5 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Dot/","title":"Math.Dot","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Float2</code><code>[Float2]</code><code>Float3</code><code>[Float3]</code><code>Float4</code><code>[Float4]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code> <code>Operand</code>  No The operand. <code>0</code> <code>Float2</code><code>[Float2]</code><code>Float3</code><code>[Float3]</code><code>Float4</code><code>[Float4]</code><code>&amp;Float2</code><code>&amp;[Float2]</code><code>&amp;Float3</code><code>&amp;[Float3]</code><code>&amp;Float4</code><code>&amp;[Float4]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p> <p> </p>"},{"location":"shards/shards/Math/Erf/","title":"Math.Erf","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Erf/#examples","title":"Examples","text":"Code <pre><code>@f3(0.0 1.0 2.0)\nMath.Erf | Log\n\nMath.Subtract(@f3(0.0 0.84270079 0.99532226)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Erfc/","title":"Math.Erfc","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Erfc/#examples","title":"Examples","text":"Code <pre><code>@f3(0.0 1.0 2.0)\nMath.Erfc | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Exp/","title":"Math.Exp","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Exp/#examples","title":"Examples","text":"Code <pre><code>0.0\nMath.Exp | Log\n\nAssert.Is(1.0 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Exp2/","title":"Math.Exp2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Exp2/#examples","title":"Examples","text":"Code <pre><code>5.0\nMath.Exp2 | Log\n\nAssert.Is(32.0 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Expm1/","title":"Math.Expm1","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Expm1/#examples","title":"Examples","text":"Code <pre><code>0.0\nMath.Expm1 | Log\n\nAssert.Is(0.0 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/FastInvSqrt/","title":"Math.FastInvSqrt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/FastInvSqrt/#examples","title":"Examples","text":"Code <pre><code>4.0\nMath.FastInvSqrt | Log\n\nMath.Subtract(0.4999978) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/FastSqrt/","title":"Math.FastSqrt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/FastSqrt/#examples","title":"Examples","text":"Code <pre><code>4.0\nMath.FastSqrt | Log\n\nMath.Subtract(2.0) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Floor/","title":"Math.Floor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Floor/#examples","title":"Examples","text":"Code <pre><code>@f3(-0.95 4.0 7.54)\nMath.Floor | Log\n\nAssert.Is(@f3(-1.0 4.0 7.0) true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Inc/","title":"Math.Inc","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Any</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Any</code> <code>Value</code>  Yes The value to apply the operation to. <code>None</code> <code>&amp;Int</code><code>&amp;Int2</code><code>&amp;Int3</code><code>&amp;Int4</code><code>&amp;Int8</code><code>&amp;Int16</code><code>&amp;Float</code><code>&amp;Float2</code><code>&amp;Float3</code><code>&amp;Float4</code><code>&amp;Color</code><code>&amp;[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Inc/#details","title":"Details","text":"<p>This shard increments the <code>Value:</code> parameter by 1.</p> <p>The <code>Value:</code> parameter should be a variable that holds a valid numeric value.</p> <p>See also</p> <ul> <li><code>Math.Dec</code></li> </ul>"},{"location":"shards/shards/Math/Inc/#examples","title":"Examples","text":"Code <pre><code>10.0 &gt;= mutable\nMath.Inc(Value: mutable)\nmutable | Log\nAssert.Is(11.0 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Inverse/","title":"Math.Inverse","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>[Float4]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>[Float4]</code>"},{"location":"shards/shards/Math/LGamma/","title":"Math.LGamma","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/LGamma/#examples","title":"Examples","text":"Code <pre><code>@f3(1.0 0.5 10.0)\nMath.LGamma | Log\n\nMath.Subtract( @f3(0.0 0.572365 12.801827)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/LShift/","title":"Math.LShift","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s) or a sequence of integers supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/Math/LShift/#examples","title":"Examples","text":"Code <pre><code>4\nMath.LShift(2) | Log\nAssert.Is(16 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Length/","title":"Math.Length","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Float2</code><code>[Float2]</code><code>Float3</code><code>[Float3]</code><code>Float4</code><code>[Float4]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/Math/LengthSquared/","title":"Math.LengthSquared","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Float2</code><code>[Float2]</code><code>Float3</code><code>[Float3]</code><code>Float4</code><code>[Float4]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/Math/Lerp/","title":"Math.Lerp","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>First</code>  Yes The first value <code>None</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <code>Second</code>  Yes The second value <code>None</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Linearly interpolate between two values based on input</p> <p> </p>"},{"location":"shards/shards/Math/Log/","title":"Math.Log","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Log/#examples","title":"Examples","text":"Code <pre><code>@f3(1.0 0.5 10.0)\nMath.Log | Log\n\nMath.Subtract(@f3(0.0 -0.69314718 2.3025851)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Log10/","title":"Math.Log10","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Log10/#examples","title":"Examples","text":"Code <pre><code>@f3(1.0 0.5 10.0)\nMath.Log10 | Log\n\nMath.Subtract(@f3(0.0 -0.30102999 1.0)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Log1p/","title":"Math.Log1p","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/Math/Log2/","title":"Math.Log2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Log2/#examples","title":"Examples","text":"Code <pre><code>@f3(1.0 0.5 10.0)\nMath.Log2 | Log\n\nMath.Subtract(@f3(0.0 -1.0 3.3219281)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/LookAt/","title":"Math.LookAt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>{Position: Float3 Target: Float3}</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float4]</code>"},{"location":"shards/shards/Math/MatIdentity/","title":"Math.MatIdentity","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float4]</code> <code>Type</code>  No The matrix row type of the corresponding matrix <code>Type::Float4</code> <code>Type</code> <p>Gives identity values for square matrix types</p> <p> </p>"},{"location":"shards/shards/Math/MatMul/","title":"Math.MatMul","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code>"},{"location":"shards/shards/Math/Mean/","title":"Math.Mean","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of floating point numbers. <code>[Float]</code> <code>Output \u27a1\ufe0f</code> The calculated mean. <code>Float</code> <code>Kind</code>  No The kind of Pythagorean means. <code>Mean::Arithmetic</code> <code>Mean</code> <p>Calculates the mean of a sequence of floating point numbers.</p>"},{"location":"shards/shards/Math/Mean/#examples","title":"Examples","text":"Code <pre><code>Const([-1.0 0.0 1.0 2.0 5.0])\nMath.Mean(Kind:Mean::Arithmetic) | Log\n\nAssert.Is(1.4 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Mod/","title":"Math.Mod","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/Math/Mod/#examples","title":"Examples","text":"Code <pre><code>@i4(1 2 3 4)\nMath.Mod(\n Operand:\n @i4(2 2 2 2)) | Log\n\nAssert.Is(@i4(1 0 1 0) true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Multiply/","title":"Math.Multiply","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/Math/Multiply/#details","title":"Details","text":"<p>Multiplication is a binary operation, i.e., it needs two arguments to give a result.</p> <p>The <code>Math.Multiply</code> shard takes in the Input and the parameter <code>Operand:</code> to produce the Output.</p> <p>Both Input and <code>Operand:</code> can be an integer, a float, or a sequence of such entities (but both value types should match for a given operation). The Output is generally of the same type as the Input provided to the shard.</p> See also <p>Binary operations on sequences</p>"},{"location":"shards/shards/Math/Multiply/#examples","title":"Examples","text":"Code <pre><code>; Multiply unequal-sized sequences (input size &lt; operand size)\n[4.0] ; Input\nLog ; prints input =&gt; [4.0]\nMath.Multiply([3.0 4.0 2.2]) ; Operand\n; input seq elements compute with corresponding operand seq elements\n; since input size &lt; operand size, remaining operand seq elements ignored\nLog ; prints input * operand =&gt; [12.0]\nAssert.Is([12.0] true) ; expect: [(4.0 * 3.0) ... ...] =&gt; [12.0]\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Multiply unequal-sized sequences (input size &gt; operand size)\n[4 2 1 5 8] ; Input\nLog ; prints input =&gt; [4 2 1 5 8]\nMath.Multiply([6 4]) ; Operand\n; input seq elements compute with corresponding operand seq elements\n; for (input size &gt; operand size): remaining input seq elements continually loop over operand seq elements\nLog ; prints input + operand =&gt; [24 8 6 20 48]\nAssert.Is([24 8 6 20 48] true) ; expect: [(4 * 6) (2 * 4) (1 * 6) (5 * 4) (8 * 6)] =&gt; [24 8 6 20 48]\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Multiply floats\n5.3 ; Input\nLog ; prints input =&gt; 5.3\nMath.Multiply(2.1) ; Operand\nLog ; prints input * operand =&gt; 11.13\nAssert.Is(11.13 true) ; expect: (5.3 * 2.1) =&gt; 11.13\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Multiply equal-sized sequences\n[4 5.1 6.4] ; Input\nLog ; prints input =&gt; [4 5.1 6.4]\nMath.Multiply([3 4.0 2.2]) ; Operand\n; input seq elements compute with corresponding operand seq elements\nLog ; prints input * operand =&gt; [12 20.4 14.08]\nAssert.IsAlmost([12 20.4 14.08]) ; expect: [(4 * 3) (5.1 * 4.0) (6.4 * 2.2)] =&gt; [12 20.4 14.08]\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Multiply integers\n5 ; Input\nLog ; prints input =&gt; 5\nMath.Multiply(2) ; Operand\nLog ; prints input * operand =&gt; 10\nAssert.Is(10 true) ; expect: (5 * 2) =&gt; 10\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Negate/","title":"Math.Negate","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/Math/Normalize/","title":"Math.Normalize","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>[Float]</code><code>Float2</code><code>[Float2]</code><code>Float3</code><code>[Float3]</code><code>Float4</code><code>[Float4]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>[Float]</code><code>Float2</code><code>[Float2]</code><code>Float3</code><code>[Float3]</code><code>Float4</code><code>[Float4]</code> <code>Positive</code>  No If the output should be in the range 0.0~1.0 instead of -1.0~1.0. <code>false</code> <code>Bool</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p> <p> </p>"},{"location":"shards/shards/Math/Or/","title":"Math.Or","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s) or a sequence of integers supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code><code>Bool</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code><code>Bool</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/Math/Or/#examples","title":"Examples","text":"Code <pre><code>@i4(0 2 4 8)\nMath.Or(Operand:@i4(3 3 3 3)) \n(Log)\n\nAssert.Is(@i4(3 3 7 11) true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Orthographic/","title":"Math.Orthographic","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float4]</code> <code>Width</code>  No Width size. <code>1280</code> <code>Int</code><code>Float</code> <code>Height</code>  No Height size. <code>720</code> <code>Int</code><code>Float</code> <code>Near</code>  No Near plane. <code>0</code> <code>Int</code><code>Float</code> <code>Far</code>  No Far plane. <code>1000</code> <code>Int</code><code>Float</code>"},{"location":"shards/shards/Math/Pow/","title":"Math.Pow","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/Math/Pow/#examples","title":"Examples","text":"Code <pre><code>2.0\nMath.Pow(Operand:3.0) | Log\n\nAssert.Is(8.0 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Project/","title":"Math.Project","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float3</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float3</code> <code>Matrix</code>  Yes The combined view-projection matrix to use <code>None</code> <code>[Float4]</code><code>&amp;[Float4]</code> <code>ScreenSize</code>  Yes The combined view-projection matrix to use <code>None</code> <code>Float2</code><code>&amp;Float2</code> <code>FlipY</code>  No Flip Y coordinate (on by default) <code>None</code> <code>None</code><code>Bool</code><code>&amp;&amp;Bool</code>"},{"location":"shards/shards/Math/QuatMultiply/","title":"Math.QuatMultiply","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float4</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float4</code> <code>Operand</code>  Yes <code>None</code> <code>Float4</code><code>&amp;Float4</code> <p>Rotate a quaternion by another quaternion</p> <p> </p>"},{"location":"shards/shards/Math/QuatRotate/","title":"Math.QuatRotate","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float3</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float3</code> <code>Operand</code>  Yes <code>None</code> <code>Float4</code><code>&amp;Float4</code> <p>Rotate a vector by a quaternion</p> <p> </p>"},{"location":"shards/shards/Math/RShift/","title":"Math.RShift","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s) or a sequence of integers supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/Math/RShift/#examples","title":"Examples","text":"Code <pre><code>4\nMath.RShift(2) | Log\n\nAssert.Is(1 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/RadiansToDegrees/","title":"Math.RadiansToDegrees","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float</code>"},{"location":"shards/shards/Math/Rotation/","title":"Math.Rotation","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float4</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float4]</code>"},{"location":"shards/shards/Math/Round/","title":"Math.Round","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Round/#examples","title":"Examples","text":"Code <pre><code>@f3(-0.95 4.0 7.54)\nMath.Round | Log\n\nAssert.Is(@f3(-1.0 4.0 8.0) true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Scaling/","title":"Math.Scaling","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float3</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float4]</code>"},{"location":"shards/shards/Math/Sin/","title":"Math.Sin","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Sin/#examples","title":"Examples","text":"Code <pre><code>@f3(0.0 1.0 1.5707963)\nMath.Sin | Log\n\nMath.Subtract(@f3(0.0 0.84147098 1.0)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Sinh/","title":"Math.Sinh","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Sinh/#examples","title":"Examples","text":"Code <pre><code>@f3(-1.0 0.0 1.0)\nMath.Sinh | Log\n\nMath.Subtract(@f3(-1.1752012 0.0 1.1752012)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Slerp/","title":"Math.Slerp","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float4</code> <code>First</code>  Yes The first value <code>None</code> <code>Float4</code><code>&amp;Float4</code> <code>Second</code>  Yes The second value <code>None</code> <code>Float4</code><code>&amp;Float4</code> <p>Rotate a quaternion by another quaternion</p> <p> </p>"},{"location":"shards/shards/Math/Sqrt/","title":"Math.Sqrt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Sqrt/#examples","title":"Examples","text":"Code <pre><code>@f3(1.0 2.0 4.0)\nMath.Sqrt | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Subtract/","title":"Math.Subtract","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/Math/Subtract/#examples","title":"Examples","text":"Code <pre><code>7\nMath.Subtract(Operand:2) | Log\n\nAssert.Is(5 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/TGamma/","title":"Math.TGamma","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/TGamma/#examples","title":"Examples","text":"Code <pre><code>10.0\nMath.TGamma | Log\n\nAssert.IsAlmost(362880.0 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Tan/","title":"Math.Tan","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Tan/#examples","title":"Examples","text":"Code <pre><code>@f3(-1.0 0.0 1.0)\nMath.Tan | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Tanh/","title":"Math.Tanh","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Tanh/#examples","title":"Examples","text":"Code <pre><code>@f3(-1.0 0.0 1.0)\nMath.Tanh | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Translation/","title":"Math.Translation","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float3</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float4]</code>"},{"location":"shards/shards/Math/Transpose/","title":"Math.Transpose","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s), floating point number(s), or a sequence of these types supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code>"},{"location":"shards/shards/Math/Trunc/","title":"Math.Trunc","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A floating point number, a vector of floats (Float2, Float3, Float4), a color, or a sequence of these types supported by this operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>Applies the unary operation on the input value and returns the result. If the input is a sequence, the operation is applied to each element of the sequence.</p>"},{"location":"shards/shards/Math/Trunc/#examples","title":"Examples","text":"Code <pre><code>@f3(-0.95 4.0 7.54)\nMath.Trunc | Log\n\nAssert.Is(@f3(0 4 7) true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Unproject/","title":"Math.Unproject","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float3</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float3</code> <code>Matrix</code>  Yes The combined view-projection matrix to use <code>None</code> <code>[Float4]</code><code>&amp;[Float4]</code> <code>ScreenSize</code>  Yes The combined view-projection matrix to use <code>None</code> <code>Float2</code><code>&amp;Float2</code> <code>DepthRange</code>  No The combined view-projection matrix to use <code>None</code> <code>None</code><code>Float2</code><code>&amp;Float2</code> <code>FlipY</code>  No Flip Y coordinate (on by default) <code>None</code> <code>None</code><code>Bool</code><code>&amp;&amp;Bool</code>"},{"location":"shards/shards/Math/Xor/","title":"Math.Xor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid integer(s) or a sequence of integers supported by this operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code><code>Bool</code> <code>Output \u27a1\ufe0f</code> The result of the operation, usually in the same type as the input value. If the input is a sequence, the output will be a sequence of results, with possible broadcasting according to the input and operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code><code>Bool</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>&amp;Int</code><code>Int2</code><code>&amp;Int2</code><code>Int3</code><code>&amp;Int3</code><code>Int4</code><code>&amp;Int4</code><code>Int8</code><code>&amp;Int8</code><code>Int16</code><code>&amp;Int16</code><code>Float</code><code>&amp;Float</code><code>Float2</code><code>&amp;Float2</code><code>Float3</code><code>&amp;Float3</code><code>Float4</code><code>&amp;Float4</code><code>Color</code><code>&amp;Color</code><code>[Any]</code><code>&amp;[Any]</code> <p>Applies the binary operation on the input value and the operand and returns the result (or a sequence of results if the input and the operand are sequences).</p>"},{"location":"shards/shards/Math/Xor/#examples","title":"Examples","text":"Code <pre><code>@i4(0 2 4 8)\nMath.Xor(\n Operand:\n @i4(3 3 3 3)) | Log\n\nAssert.Is(@i4(3 1 7 11) true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Mnemonic/Generate/","title":"Mnemonic.Generate","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Int</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <p>Generates a BIP39 mnemonic</p> <p> </p>"},{"location":"shards/shards/Network/Broadcast/","title":"Network.Broadcast","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Server</code>  No The server <code>ContextVariable: Network.Server</code> <code>Object</code>"},{"location":"shards/shards/Network/Client/","title":"Network.Client","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Object</code> <code>Address</code>  No The local bind address or the remote address. <code>localhost</code> <code>String</code><code>&amp;String</code> <code>Port</code>  No The port to bind if server or to connect to if client. <code>9191</code> <code>Int</code><code>&amp;Int</code> <code>Handler</code>  No The flow to execute when a packet is received. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code>"},{"location":"shards/shards/Network/Peer/","title":"Network.Peer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Object</code> <code>Peer</code>  No The optional explicit peer to send packets to. <code>ContextVariable: Network.Peer</code> <code>&amp;Object</code>"},{"location":"shards/shards/Network/PeerID/","title":"Network.PeerID","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int</code> <code>Peer</code>  No The optional explicit peer to send packets to. <code>ContextVariable: Network.Peer</code> <code>&amp;Object</code>"},{"location":"shards/shards/Network/Send/","title":"Network.Send","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Peer</code>  No The optional explicit peer to send packets to. <code>ContextVariable: Network.Peer</code> <code>&amp;Object</code>"},{"location":"shards/shards/Network/SendRaw/","title":"Network.SendRaw","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code><code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Peer</code>  No The optional explicit peer to send packets to. <code>ContextVariable: Network.Peer</code> <code>&amp;Object</code>"},{"location":"shards/shards/Network/Server/","title":"Network.Server","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Address</code>  No The local bind address or the remote address. <code>localhost</code> <code>String</code><code>&amp;String</code> <code>Port</code>  No The port to bind if server or to connect to if client. <code>9191</code> <code>Int</code><code>&amp;Int</code> <code>Handler</code>  No The wire to spawn for each new peer that connects, stopping that wire will break the connection. <code>None</code> <code>Wire</code><code>None</code> <code>Timeout</code>  No The timeout in seconds after which a peer will be disconnected if there is no network activity. <code>30</code> <code>Float</code> <code>OnDisconnect</code>  No The flow to execute when a peer disconnects, The Peer ID will be the input. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code>"},{"location":"shards/shards/Network/WS.Client/","title":"Network.WS.Client","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Object</code> <code>Address</code>  Yes The local bind address or the remote address. <code>None</code> <code>String</code><code>&amp;String</code> <code>Handler</code>  No The flow to execute when a packet is received. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Raw</code>  No Receive raw byte packets. <code>None</code> <code>None</code><code>Bool</code>"},{"location":"shards/shards/Network/WS.Server/","title":"Network.WS.Server","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Object</code> <code>Address</code>  Yes The local bind address or the remote address. <code>None</code> <code>String</code><code>&amp;String</code> <code>Port</code>  Yes The port to bind if server or to connect to if client. <code>None</code> <code>Int</code><code>&amp;Int</code> <code>Handler</code>  No The wire to spawn for each new peer that connects, stopping that wire will break the connection. <code>None</code> <code>None</code><code>Wire</code><code>[Shard]</code> <code>Timeout</code>  Yes The timeout in seconds after which a peer will be disconnected if there is no network activity. <code>None</code> <code>Float</code> <code>OnDisconnect</code>  No The flow to execute when a peer disconnects, The Peer ID will be the input. <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code>"},{"location":"shards/shards/ONNX/Activate/","title":"ONNX.Activate","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Float]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float]</code> <code>Model</code>  Yes The ONNX model to use to perform the activation. <code>None</code> <code>&amp;Object</code>"},{"location":"shards/shards/ONNX/Load/","title":"ONNX.Load","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Object</code> <code>Path</code>  Yes The path to the onnx model to load. <code>None</code> <code>String</code> <code>Input Shape</code>  Yes The shape of the input tensor. <code>None</code> <code>[Int]</code>"},{"location":"shards/shards/Physics/AngularImpulse/","title":"Physics.AngularImpulse","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float3</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float3</code> <code>RigidBody</code>  No The rigidbody to apply the impulse to. <code>None</code> <code>&amp;Object</code><code>None</code> <p>Adds an angular impulse to a rigid body</p> <p> </p>"},{"location":"shards/shards/Physics/Ball/","title":"Physics.Ball","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Object</code> <code>Position</code>  No The position of the shape. <code>@f3(0 0 0)</code> <code>Float3</code><code>&amp;Float3</code> <code>Rotation</code>  No The rotation of the shape. <code>@f4(0 0 0 1)</code> <code>Float4</code><code>&amp;Float4</code> <code>Radius</code>  No The radius of the sphere. <code>0.5</code> <code>Float</code> <code>Mass</code>  No The mass of the shape. <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <p>Physics shape representing a ball</p> <p> </p>"},{"location":"shards/shards/Physics/CastRay/","title":"Physics.CastRay","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Float3]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Object]</code>"},{"location":"shards/shards/Physics/Cuboid/","title":"Physics.Cuboid","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Object</code> <code>Position</code>  No The position of the shape. <code>@f3(0 0 0)</code> <code>Float3</code><code>&amp;Float3</code> <code>Rotation</code>  No The rotation of the shape. <code>@f4(0 0 0 1)</code> <code>Float4</code><code>&amp;Float4</code> <code>HalfExtents</code>  No The half-extents of the cuboid shape. <code>@f3(0.5 0.5 0.5)</code> <code>Float3</code> <code>Mass</code>  No The mass of the shape. <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <p>Physics shape representing a cuboid</p> <p> </p>"},{"location":"shards/shards/Physics/DynamicBody/","title":"Physics.DynamicBody","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float4]</code><code>[[Float4]]</code> <code>Shapes</code>  No The shape or shapes of this rigid body. <code>None</code> <code>&amp;Object</code><code>&amp;Object</code><code>None</code> <code>Position</code>  No The initial position of this rigid body. Can be updated in the case of a kinematic rigid body. <code>@f3(0 0 0)</code> <code>Float3</code><code>&amp;Float3</code><code>[Float3]</code><code>&amp;[Float3]</code> <code>Rotation</code>  No The initial rotation of this rigid body. Either axis angles in radians Float3 or a quaternion Float4. Can be updated in the case of a kinematic rigid body. <code>@f4(0 0 0 1)</code> <code>Float4</code><code>&amp;Float4</code><code>[Float4]</code><code>&amp;[Float4]</code> <code>Collision</code>  No Handle collisions with this object. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>SolverGroup</code>  No Solver group (Membership, Filter) pair for contact forces. <code>None</code> <code>Int2</code><code>&amp;Int2</code><code>None</code> <code>CollisionGroup</code>  No Collision group (Membership, Filter) pair for collision events. <code>None</code> <code>Int2</code><code>&amp;Int2</code><code>None</code> <code>Tag</code>  Yes Tag attached to this collider <code>None</code> <code>Any</code> <code>Name</code>  Yes The optional name of the variable that will be exposed to identify, apply forces (if dynamic) and control this rigid body. <code>None</code> <code>&amp;Any</code> <code>AllowTranslation</code>  No Translation contraints for this object [x y z]. <code>None</code> <code>None</code><code>[Bool]</code> <code>AllowRotation</code>  No Rotation contraints for this object [x y z]. <code>None</code> <code>None</code><code>[Bool]</code> <p>A dynamic fully simulated rigid body.</p> <p> </p>"},{"location":"shards/shards/Physics/Force/","title":"Physics.Force","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float3</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float3</code> <code>RigidBody</code>  No The rigidbody to apply the force to. <code>None</code> <code>&amp;Object</code><code>None</code> <p>Adds a force to a rigid body</p> <p> </p>"},{"location":"shards/shards/Physics/Impulse/","title":"Physics.Impulse","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float3</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float3</code> <code>RigidBody</code>  No The rigidbody to apply the impulse to. <code>None</code> <code>&amp;Object</code><code>None</code> <p>Adds an impulse to a rigid body</p> <p> </p>"},{"location":"shards/shards/Physics/KinematicBody/","title":"Physics.KinematicBody","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float4]</code><code>[[Float4]]</code> <code>Shapes</code>  No The shape or shapes of this rigid body. <code>None</code> <code>&amp;Object</code><code>&amp;Object</code><code>None</code> <code>Position</code>  No The initial position of this rigid body. Can be updated in the case of a kinematic rigid body. <code>@f3(0 0 0)</code> <code>Float3</code><code>&amp;Float3</code><code>[Float3]</code><code>&amp;[Float3]</code> <code>Rotation</code>  No The initial rotation of this rigid body. Either axis angles in radians Float3 or a quaternion Float4. Can be updated in the case of a kinematic rigid body. <code>@f4(0 0 0 1)</code> <code>Float4</code><code>&amp;Float4</code><code>[Float4]</code><code>&amp;[Float4]</code> <code>Collision</code>  No Handle collisions with this object. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>SolverGroup</code>  No Solver group (Membership, Filter) pair for contact forces. <code>None</code> <code>Int2</code><code>&amp;Int2</code><code>None</code> <code>CollisionGroup</code>  No Collision group (Membership, Filter) pair for collision events. <code>None</code> <code>Int2</code><code>&amp;Int2</code><code>None</code> <code>Tag</code>  Yes Tag attached to this collider <code>None</code> <code>Any</code> <code>Name</code>  Yes The optional name of the variable that will be exposed to identify, apply forces (if dynamic) and control this rigid body. <code>None</code> <code>&amp;Any</code> <p>A kinematic rigid body that can be controlled by the user and interacts with the physics simulation.</p> <p> </p>"},{"location":"shards/shards/Physics/Simulation/","title":"Physics.Simulation","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Gravity</code>  No The gravity force vector. <code>@f3(0 -9.81 0)</code> <code>Float</code>"},{"location":"shards/shards/Physics/StaticBody/","title":"Physics.StaticBody","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Shapes</code>  No The shape or shapes of this rigid body. <code>None</code> <code>&amp;Object</code><code>&amp;Object</code><code>None</code> <code>Position</code>  No The initial position of this rigid body. Can be updated in the case of a kinematic rigid body. <code>@f3(0 0 0)</code> <code>Float3</code><code>&amp;Float3</code><code>[Float3]</code><code>&amp;[Float3]</code> <code>Rotation</code>  No The initial rotation of this rigid body. Either axis angles in radians Float3 or a quaternion Float4. Can be updated in the case of a kinematic rigid body. <code>@f4(0 0 0 1)</code> <code>Float4</code><code>&amp;Float4</code><code>[Float4]</code><code>&amp;[Float4]</code> <code>Collision</code>  No Handle collisions with this object. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>SolverGroup</code>  No Solver group (Membership, Filter) pair for contact forces. <code>None</code> <code>Int2</code><code>&amp;Int2</code><code>None</code> <code>CollisionGroup</code>  No Collision group (Membership, Filter) pair for collision events. <code>None</code> <code>Int2</code><code>&amp;Int2</code><code>None</code> <code>Tag</code>  Yes Tag attached to this collider <code>None</code> <code>Any</code> <code>Name</code>  Yes The optional name of the variable that will be exposed to identify, apply forces (if dynamic) and control this rigid body. <code>None</code> <code>&amp;Any</code> <p>A static rigid body that does not move.</p> <p> </p>"},{"location":"shards/shards/Physics/Torque/","title":"Physics.Torque","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float3</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float3</code> <code>RigidBody</code>  No The rigidbody to apply the torque to. <code>None</code> <code>&amp;Object</code><code>None</code> <p>Adds a torque to a rigid body</p> <p> </p>"},{"location":"shards/shards/Random/Name/","title":"Random.Name","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <code>Words</code>  No How many words to generate and concatenate <code>2</code> <code>Int</code> <code>Separator</code>  No A separator character to use between generated words <code>-</code> <code>String</code> <p>Generate a random name (Petname)</p> <p> </p>"},{"location":"shards/shards/Regex/Match/","title":"Regex.Match","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[String]</code> <code>Regex</code>  No The regular expression. `` <code>String</code>"},{"location":"shards/shards/Regex/Replace/","title":"Regex.Replace","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <code>Regex</code>  No The regular expression. `` <code>String</code> <code>Replacement</code>  Yes The replacement expression. <code>None</code> <code>String</code><code>&amp;String</code>"},{"location":"shards/shards/Regex/Search/","title":"Regex.Search","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[String]</code> <code>Regex</code>  No The regular expression. `` <code>String</code>"},{"location":"shards/shards/SVG/ToImage/","title":"SVG.ToImage","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code><code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Image</code> <code>Size</code>  No The desired output size, if (0, 0) will default to the size defined in the svg data. <code>None</code> <code>Int2</code><code>&amp;Int2</code><code>None</code> <code>Offset</code>  No A positive x and y value offsets towards the right and the bottom of the screen respectively. (0.0, 0.0) by default. <code>None</code> <code>None</code><code>Float2</code><code>&amp;Float2</code> <code>Padding</code>  Yes Pixels of padding to add <code>None</code> <code>Int2</code> <p>Converts an SVG string or bytes to an image.</p> <p> </p>"},{"location":"shards/shards/Shader/LinearizeDepth/","title":"Shader.LinearizeDepth","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float</code>"},{"location":"shards/shards/Shader/Literal/","title":"Shader.Literal","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code><code>None</code> <code>Source</code>  Yes The WGSL source code to insert <code>None</code> <code>String</code><code>&amp;String</code><code>[String &amp;Any]</code> <code>Type</code>  Yes Where to insert the code. <code>None</code> <code>ShaderLiteralType</code> <code>OutputType</code>  Yes The type that this code is expected to output. (default: none) <code>None</code> <code>ShaderFieldBaseType</code> <code>OutputDimension</code>  Yes The dimension that this code is expected to output. (default: 4) <code>None</code> <code>Int</code> <code>OutputMatrixDimension</code>  Yes The matrix dimension that this code is expected to output. (default: 1) <code>None</code> <code>Int</code>"},{"location":"shards/shards/Shader/Literal/#details","title":"Details","text":"<p>This shards inserts WGSL source code directly into the generated shader. This can be usefull to reuse large existing shader code bases.</p>"},{"location":"shards/shards/Shader/Literal/#usages","title":"Usages","text":"<p>There are multiple ways to use this shard.</p>"},{"location":"shards/shards/Shader/Literal/#static-code","title":"Static code","text":"<pre><code>  Shader.Literal(Source: \"\n    let color = vec4&lt;f32&gt;(1.0, 0.5, 0.25, 1.0);\n    return color; \")\n</code></pre> <p>This insertes the given WGSL source code directly into the current entry point.</p>"},{"location":"shards/shards/Shader/Literal/#static-header-code","title":"Static header code","text":"<p>When defining WGSL functions, specify the <code>Type: ShaderLiteralType::Header</code> parameter:</p> <pre><code>  Shader.Literal(Type: ShaderLiteralType::Header Source: \"\n    fn scale(val: f32) -&gt; f32 {\n      return val * 0.5;\n    }\")\n</code></pre> <p>The generated code will then be placed outside the current entry point where it can be referenced by all other entry points as well.</p>"},{"location":"shards/shards/Shader/Literal/#output-value","title":"Output value","text":"<p>When a Literal shard is expected to output a value, you need to specify the output type and dimensions.</p> <p>For example, returning the value from calling the function defined in the previous section:</p> <pre><code>  Shader.Literal(Source: \"scale(1.0)\" OutputType: ShaderFieldBaseType::Float32 OutputDimension: 1)\n  &gt;= result ; This will now contain the Float scalar result\n</code></pre> <p><code>OutputMatrixDimension</code> can also be specified when returning matrix types, a value of 1 (default) indicates that the type is not a matrix. <code>mat4x3</code> would be represented by an <code>OutputDimension</code> of 4 and <code>MatrixDimension</code> of 3.</p> <p>The default value for <code>OutputDimension</code> is 4, so it can be left unspecified when returning 4 component vectors.</p>"},{"location":"shards/shards/Shader/Literal/#capturing-variables","title":"Capturing variables","text":"<p>To pass existing variables into WGSL code, use the folowing structure:</p> <pre><code>  1.0 &gt;= my-value\n  Shader.Literal(Source: [\"scale(\" my-value \")\"])\n</code></pre> <p>When the source is a sequence, any variable references inside this sequence will be inserted into the genereted WGSL code.</p>"},{"location":"shards/shards/Shader/Literal/#more-info","title":"More Info","text":"<p>For more information about the WebGPU Shading Language (WGSL), check the working draft here.</p> <p>For converting existing GLSL or SPIR-V shaders to WGSL, naga can be used.</p> <p> </p>"},{"location":"shards/shards/Shader/ReadBuffer/","title":"Shader.ReadBuffer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Name</code>  No The name of the field to read/write `` <code>String</code> <code>BufferName</code>  No The name of the buffer to read from (object/view) (default: object) `` <code>String</code>"},{"location":"shards/shards/Shader/ReadGlobal/","title":"Shader.ReadGlobal","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Name</code>  No The name of the field to read/write `` <code>String</code>"},{"location":"shards/shards/Shader/ReadInput/","title":"Shader.ReadInput","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Name</code>  No The name of the field to read/write `` <code>String</code>"},{"location":"shards/shards/Shader/RefBuffer/","title":"Shader.RefBuffer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Buffer</code> <code>Name</code>  Yes The name of the buffer <code>None</code> <code>String</code> <code>Pointer</code>  No Reference as pointer <code>None</code> <code>None</code><code>Bool</code> <p>Returns a reference to the default sampler object for a named texture.</p> <p> </p>"},{"location":"shards/shards/Shader/RefSampler/","title":"Shader.RefSampler","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Sampler</code> <code>Name</code>  Yes Name of the texture <code>None</code> <code>String</code><code>&amp;String</code> <p>Returns a reference to the default sampler object for a named texture.</p> <p> </p>"},{"location":"shards/shards/Shader/RefTexture/","title":"Shader.RefTexture","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Texture2D</code><code>GFX.TextureCube</code> <code>Name</code>  Yes Name of the texture <code>None</code> <code>String</code><code>&amp;String</code> <p>Returns a reference to the texture object for a named texture.</p> <p> </p>"},{"location":"shards/shards/Shader/SampleTexture/","title":"Shader.SampleTexture","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float4</code> <code>Name</code>  Yes Name of the texture <code>None</code> <code>String</code><code>&amp;String</code> <p>Samples a named texture with default texture coordinates</p> <p> </p>"},{"location":"shards/shards/Shader/SampleTextureCoord/","title":"Shader.SampleTextureCoord","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float4</code><code>Float3</code><code>Float2</code><code>Float</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float4</code> <code>Name</code>  Yes Name of the texture <code>None</code> <code>String</code><code>&amp;String</code> <p>Samples a named texture with the passed in texture coordinates</p> <p> </p>"},{"location":"shards/shards/Shader/WithInput/","title":"Shader.WithInput","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Name</code>  No The name of the input `` <code>String</code> <code>Then</code>  No The shards to execute if the input exists <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Else</code>  No The shards to execute if the input does not exist <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code>"},{"location":"shards/shards/Shader/WithTexture/","title":"Shader.WithTexture","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Name</code>  No The name of the texture `` <code>String</code> <code>Then</code>  No The shards to execute if the texture exists <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Else</code>  No The shards to execute if the texture does not exist <code>None</code> <code>Shard</code><code>[Shard]</code><code>None</code>"},{"location":"shards/shards/Shader/WriteGlobal/","title":"Shader.WriteGlobal","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Name</code>  No The name of the field to read/write `` <code>String</code>"},{"location":"shards/shards/Shader/WriteOutput/","title":"Shader.WriteOutput","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Name</code>  No The name of the field to read/write `` <code>String</code>"},{"location":"shards/shards/Snappy/Compress/","title":"Snappy.Compress","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/Snappy/Decompress/","title":"Snappy.Decompress","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/Sr25519/PublicKey/","title":"Sr25519.PublicKey","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/Sr25519/Seed/","title":"Sr25519.Seed","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/Sr25519/Sign/","title":"Sr25519.Sign","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <code>Key</code>  Yes The private key to be used to sign the hashed message input. <code>None</code> <code>Bytes</code><code>&amp;Bytes</code><code>String</code><code>&amp;String</code>"},{"location":"shards/shards/Sr25519/Verify/","title":"Sr25519.Verify","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Key</code>  Yes The public key of the keypair that signed the message. This will be used to verify the signature. <code>None</code> <code>Bytes</code><code>&amp;Bytes</code> <code>Message</code>  Yes The message string that was signed to produce the signature. This is the original plaintext message that the signature was created for. When verifying the signature, this message will be hashed and the resulting digest compared to the signature to validate it was produced by signing this exact message. <code>None</code> <code>Bytes</code><code>&amp;Bytes</code><code>String</code><code>&amp;String</code>"},{"location":"shards/shards/String/Contains/","title":"String.Contains","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>String</code>  No The string that needs to be contained by the input string to output true. `` <code>String</code><code>&amp;String</code>"},{"location":"shards/shards/String/DecodeURI/","title":"String.DecodeURI","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code>"},{"location":"shards/shards/String/EncodeURI/","title":"String.EncodeURI","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code>"},{"location":"shards/shards/String/Ends/","title":"String.Ends","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>With</code>  No The string that needs to match the ending of the input string to output true. `` <code>String</code><code>&amp;String</code>"},{"location":"shards/shards/String/Format/","title":"String.Format","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of values that will be converted to string and joined together. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> A string consisting of all the elements of the sequence. <code>String</code> <p>Concatenates all the elements of a sequence into a string</p> <p> </p>"},{"location":"shards/shards/String/Join/","title":"String.Join","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of string values that will be joined together. <code>[String Bytes]</code> <code>Output \u27a1\ufe0f</code> A string consisting of all the elements of the sequence delimited by the separator. <code>String</code> <code>Separator</code>  No The string to use as a separator. `` <code>String</code> <p>Concatenates all the elements of a string sequence, using the specified separator between each element.</p>"},{"location":"shards/shards/String/Join/#examples","title":"Examples","text":"Code <pre><code>@wire(main-wire {\n  [\"The quick brown fox \"\n   \"jumps over the lazy dog\"\n   \".\"]\n  String.Join | Log\n  Assert.Is(\"The quick brown fox jumps over the lazy dog.\" Break: true)\n\n  [\"2001\" \"01\" \"01\"]\n  String.Join(\"/\") | Log\n  Assert.Is(\"2001/01/01\" Break: true)\n\n} Looped: true)\n\n{logic-behavior: main-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/String/Split/","title":"String.Split","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[String]</code> <code>Separator</code>  No The separator character to split the string on. `` <code>String</code><code>&amp;String</code>"},{"location":"shards/shards/String/Starts/","title":"String.Starts","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>With</code>  No The string that needs to start at the beginning of the input string to output true. `` <code>String</code><code>&amp;String</code>"},{"location":"shards/shards/String/ToLower/","title":"String.ToLower","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A string. <code>String</code> <code>Output \u27a1\ufe0f</code> A string in lowercase. <code>String</code> <p>Converts a string to lowercase</p>"},{"location":"shards/shards/String/ToLower/#examples","title":"Examples","text":"Code <pre><code>@wire(main-wire {\n  \"Hello\" | String.ToLower | Log\n  Assert.Is(\"hello\" Break: true)\n\n} Looped: true)\n\n{logic-behavior: main-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/String/ToUpper/","title":"String.ToUpper","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A string. <code>String</code> <code>Output \u27a1\ufe0f</code> A string in uppercase. <code>String</code> <p>Converts a string to uppercase</p>"},{"location":"shards/shards/String/ToUpper/#examples","title":"Examples","text":"Code <pre><code>@wire(main-wire {\n  \"Hello\" | String.ToUpper | Log\n  Assert.Is(\"HELLO\")\n\n} Looped: true)\n\n{logic-behavior: main-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/String/Trim/","title":"String.Trim","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code>"},{"location":"shards/shards/TargetCamera/FromLookAt/","title":"TargetCamera.FromLookAt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{pivot: Float3 distance: Float rotation: Float2}</code> <code>Target</code>  No <code>@f3(0 0 0)</code> <code>None</code><code>Float3</code><code>&amp;Float3</code> <code>Position</code>  No <code>@f3(2.5 2.5 5)</code> <code>None</code><code>Float3</code><code>&amp;Float3</code> <p>Provides editor free camera controls</p> <p> </p>"},{"location":"shards/shards/TargetCamera/Matrix/","title":"TargetCamera.Matrix","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>{pivot: Float3 distance: Float rotation: Float2}</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float4]</code> <p>Turns the target camera state into a view matrix</p> <p> </p>"},{"location":"shards/shards/Time/Delta/","title":"Time.Delta","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float</code> <p>Gives the time between the last activation of this shard and the current, capped to a limit</p> <p> </p>"},{"location":"shards/shards/Time/DeltaMs/","title":"Time.DeltaMs","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float</code> <p>Gives the time between the last activation of this shard and the current, capped to a limit</p> <p> </p>"},{"location":"shards/shards/Time/Epoch/","title":"Time.Epoch","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int</code>"},{"location":"shards/shards/Time/EpochMs/","title":"Time.EpochMs","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int</code>"},{"location":"shards/shards/Time/MovingAverage/","title":"Time.MovingAverage","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float</code> <code>Window</code>  No The moving average window length (in frames) <code>16</code> <code>Int</code> <p>Computes a moving average of a single floating point number.</p> <p> </p>"},{"location":"shards/shards/Time/Now/","title":"Time.Now","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float</code>"},{"location":"shards/shards/Time/NowMs/","title":"Time.NowMs","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float</code>"},{"location":"shards/shards/Time/Pop/","title":"Time.Pop","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Sequence</code>  No A variables sequence of pairs [value pop-epoch-time-ms] with types [Any SHType::Int] <code>None</code> <code>&amp;(Any Int)</code><code>None</code> <p>This shards delays its output until one of the values of the sequence parameter expires.</p> <p> </p>"},{"location":"shards/shards/Time/ToString/","title":"Time.ToString","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The time to convert. <code>Int</code><code>Float</code> <code>Output \u27a1\ufe0f</code> A string representation of the time. <code>String</code> <code>Millis</code>  No True if the input is given in milliseconds, False if given in seconds. <code>false</code> <code>Bool</code> <p>Converts time into a human readable string.</p>"},{"location":"shards/shards/Time/ToString/#examples","title":"Examples","text":"Code <pre><code>@wire(main-wire {\n0 | Time.ToString | Log\n0 | Time.ToString(Millis: true) | Log\n500 | Time.ToString | Log\n500 | Time.ToString(Millis: true) | Log\nTime.EpochMs | Time.ToString(Millis: true) | Log\n\nPause(2.0)\n\nTime.Now | Time.ToString | Log\nTime.NowMs | Time.ToString(Millis: true) | Log\n} Looped: true)\n\n{logic-behavior: main-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/AddFonts/","title":"UI.AddFonts","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[[Any]]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[[Any]]</code> <p>Adds custom fonts to the UI system, the input should a seq of a pair (name, bytes).</p> <p> </p>"},{"location":"shards/shards/UI/Area/","title":"UI.Area","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Position</code>  Yes Absolute UI position; or when anchor is set, relative offset. (X/Y) <code>None</code> <code>Float2</code><code>&amp;Float2</code> <code>Pivot</code>  Yes The pivot for the inner UI <code>None</code> <code>Anchor</code><code>&amp;Anchor</code> <code>Anchor</code>  Yes Side of the screen to anchor the UI to. <code>None</code> <code>Anchor</code><code>&amp;Anchor</code> <code>Order</code>  Yes Paint layer to be used for this UI. Default is background <code>None</code> <code>Order</code> <p>Places UI element at a specific position.</p>"},{"location":"shards/shards/UI/Area/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  ; The default order for a window is Order::Middle, and depending on focus, this window,\n  ; or the Area with Order::Middle will be drawn on top of the other.\n  UI.Window(\n    Title: \"Greetings\"\n    Flags: WindowFlags::NoCollapse\n    Contents: {\n      \"Hello shards!\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::TopLeft\n    ; Order: Order::Background ; This is the default for UI.Area\n    Contents: {\n      \"Lowest: Background\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::Left\n    Order: Order::PanelResizeLine\n    Contents: {\n      \"2nd Lowest: PanelResizeLine\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::BottomLeft\n    Order: Order::Middle\n    Contents: {\n      \"3rd Lowest: Middle\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::TopRight\n    Order: Order::Foreground\n    Contents: {\n      \"3rd Highest: Foreground\" | UI.Label(Wrap: false)\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::Right\n    Order: Order::Tooltip\n    Contents: {\n      \"2nd Highest: Tooltip\" | UI.Label(Wrap: false)\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::BottomRight\n    Order: Order::Debug\n    Contents: {\n      \"Highest: Debug\" | UI.Label(Wrap: false)\n    }\n  )\n} Looped:  true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Area(\n    Anchor: Anchor::TopLeft\n    Contents: {\n      \"TopLeft\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::Top\n    Contents: {\n      \"Top\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::TopRight\n    Contents: {\n      \"TopRight\" | UI.Label(Wrap: false)\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::Center\n    Contents: {\n      \"Center\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::Right\n    Contents: {\n      \"Right\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::BottomLeft\n    Contents: {\n      \"BottomLeft\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::Bottom\n    Contents: {\n      \"Bottom\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::BottomRight\n    Contents: {\n      \"BottomRight\" | UI.Label(Wrap: false)\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/AutoGrid/","title":"UI.AutoGrid","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Any]</code> <code>Contents</code>  No The UI contents to be generated and inserted in each column for each element in the given sequence. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Striped</code>  No Whether to alternate a subtle background color to every other row. <code>false</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>MaxGridWidth</code>  Yes Maximum grid width. <code>None</code> <code>Float</code><code>&amp;Float</code> <code>ItemWidth</code>  Yes The width of each item. <code>None</code> <code>Float</code><code>&amp;Float</code> <code>ColumnSpacing</code>  Yes Spacing between columns. <code>None</code> <code>Float</code><code>&amp;Float</code> <code>RowSpacing</code>  Yes Spacing between rows. <code>None</code> <code>Float</code><code>&amp;Float</code> <p>Works like UI.Grid, but given a Sequence, it will, it each object in the Sequence, execute the Shard provided in its Contents and automatically wrap the generated contents when it exceeds the grid's width.</p>"},{"location":"shards/shards/UI/AutoGrid/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"Greetings\"\n    Contents: {\n      [\n        \"Hello\" \"World\" \"Please\" \"Sort\" \"Me\"\n        \"Hello\" \"World\" \"Please\" \"Sort\" \"Me\"\n      ]\n      UI.AutoGrid(\n        ItemWidth: 300.0\n        MaxGridWidth: 700.0 ; Since item size is 300, max grid width is 700, only two items allowed per row\n        Contents: {\n          UI.Button(Label: \"Test\" Action: {\n            Log ; Logs the given sequence element\n          })\n        }\n      )\n      ; | Log ; Passthrough\n    }\n  )\n} Looped:  true)\n\n{ui-behavior:  ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"Greetings\"\n    Contents: {\n      [\n        \"Hello\" \"World\" \"Please\" \"Sort\" \"Me\"\n        \"Hello\" \"World\" \"Please\" \"Sort\" \"Me\"\n      ]\n      UI.AutoGrid(\n        ItemWidth: 300.0\n        MaxGridWidth: 700.0\n        ColumnSpacing: 50.0 ; Spacing between columns, not included in MaxGridWidth\n        RowSpacing: 30.0 ; Spacing between rows\n        Contents: {\n          UI.Button(Label: \"Test\" Action: {\n            Log\n          })\n        }\n      )\n    }\n  )\n} Looped:  true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"Greetings\"\n    Width: 200 ; Makes window resizable but with a minimum width of 200, allowing resizing window to manipulate number of rows in autogrid\n    Contents: {\n      [\n        \"Hello\" \"World\" \"Please\" \"Sort\" \"Me\"\n        \"Hello\" 2 \"Please\" 4 5.5\n      ]\n      UI.AutoGrid(\n        ItemWidth: 300.0\n        Contents: {\n          UI.Button(Label: \"Test\" Action: {\n            Log ; Logs the given sequence element\n          })\n        }\n      )\n      ; | Log ; Passthrough\n    }\n  )\n} Looped:  true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/BottomPanel/","title":"UI.BottomPanel","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the panel. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Resizable</code>  No Whether the panel can be resized. <code>None</code> <code>Bool</code><code>None</code> <code>DefaultSize</code>  No The initial size of the panel. <code>None</code> <code>Float</code><code>None</code> <code>MinSize</code>  No The minimum allowable size of the panel. <code>None</code> <code>Float</code><code>None</code> <code>MaxSize</code>  No The maximum allowable size of the panel. <code>None</code> <code>Float</code><code>None</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Layout UI elements into the panel.</p>"},{"location":"shards/shards/UI/BottomPanel/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire{\n  UI.BottomPanel(\n      Contents: {\"Bottom Panel\" | UI.Label})\n} Looped:  true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Button/","title":"UI.Button","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Action shards of the button. <code>Any</code> <code>Output \u27a1\ufe0f</code> Indicates whether the button was clicked during this frame. <code>Bool</code> <code>Label</code>  Yes The text label of this button. <code>None</code> <code>String</code><code>&amp;String</code> <code>Action</code>  No The shards to execute when the button is pressed. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Style</code>  Yes The text style. <code>None</code> <code>{Any}</code><code>&amp;{Any}</code> <code>Wrap</code>  No Wrap the text depending on the layout. <code>None</code> <code>Bool</code><code>None</code> <p>Clickable button with text.</p>"},{"location":"shards/shards/UI/Button/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Button(\n        Label: \"Click me!\"\n        Style: {color: @color(255 255 0)}\n        Action: Msg(\"Clicked\")\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Button(\n        Label: \"Click me!\"\n        Action: Msg(\"Clicked\")\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Canvas/","title":"UI.Canvas","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Contents</code>  No <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Rect</code>  Yes The target UI position (X/Y/W/H) <code>None</code> <code>Float4</code><code>&amp;Float4</code> <code>Order</code>  Yes The order this UI is drawn in <code>None</code> <code>Order</code> <p>A canvas to draw UI elements on</p> <p> </p>"},{"location":"shards/shards/UI/CentralPanel/","title":"UI.CentralPanel","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the panel. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Layout UI elements into the central panel.</p>"},{"location":"shards/shards/UI/CentralPanel/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.TopPanel(\n        Contents: {\n          \"Top Panel\" | UI.Label\n        }\n      )\n      UI.CentralPanel(\n        Contents: {\n          \"Central Panel\" | UI.Label\n        }\n      )\n      UI.BottomPanel(\n        Contents: {\n          \"Bottom Panel\" | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Checkbox/","title":"UI.Checkbox","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Indicates whether the checkbox state changed during this frame. <code>Bool</code> <code>Label</code>  No The text label of this checkbox. <code>None</code> <code>String</code><code>None</code> <code>Variable</code>  No The variable that holds the input value. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>Style</code>  Yes The text style. <code>None</code> <code>{Any}</code><code>&amp;{Any}</code> <p>Boolean on/off widget with text label.</p>"},{"location":"shards/shards/UI/Checkbox/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.CentralPanel(\n    UI.Checkbox(\n      Label: \"Checked\"\n      Style: {color: @color(255 0 255) italics: true}\n      Variable: checked\n    )\n  )\n} Looped:  true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.CentralPanel(\n    UI.Checkbox(\n      Label: \"Checked\"\n      Variable: checked\n    )\n  )\n} Looped: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/CloseMenu/","title":"UI.CloseMenu","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <p>Closes the currently opened menu.</p>"},{"location":"shards/shards/UI/CloseMenu/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Checkbox(\n        Label: \"Checked\"\n        Style: {color: @color(255 0 255) italics: true}\n        Variable: checked\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/CodeEditor/","title":"UI.CodeEditor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced when changed. <code>Bool</code> <code>Code</code>  Yes The variable that holds the code to edit. <code>None</code> <code>String</code><code>&amp;String</code> <code>Language</code>  Yes The name of the programming language for syntax highlighting. <code>None</code> <code>String</code><code>&amp;String</code> <p>A TextField with support for highlighting.</p>"},{"location":"shards/shards/UI/CodeEditor/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      Once({\n        \"\" &gt;= code\n      })\n      UI.TopPanel(\n        Contents:\n        UI.MenuBar(\n          Contents:\n          UI.Menu(\n            \"Edit\"\n            UI.Button(\n              \"Clear\"\n              {\"\" &gt; code (UI.CloseMenu)}\n            )\n          )\n        )\n      )\n      UI.CentralPanel(\n      Contents:\n      UI.CodeEditor(code \"Rust\"))\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Collapsing/","title":"UI.Collapsing","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the collapsing header. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Heading</code>  No The heading text or widgets for this collapsing header. <code>None</code> <code>String</code><code>Shard</code><code>[Shard]</code><code>None</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>DefaultOpen</code>  No Whether the collapsing header is opened by default. <code>false</code> <code>Bool</code> <p>A header which can be collapsed/expanded, revealing a contained UI region.</p>"},{"location":"shards/shards/UI/Collapsing/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Collapsing(\n        Heading: UI.Button(\"Heading\" Msg(\"Clicked\"))\n        DefaultOpen: true\n        Contents: {\"Content\" | UI.Label}\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Collapsing(\n        Heading: \"Heading\"\n        DefaultOpen: true\n        Contents: {\n          \"Content\" | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/ColorInput/","title":"UI.ColorInput","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The selected color. <code>Color</code> <code>Variable</code>  No The variable that holds the input value. <code>None</code> <code>Color</code><code>&amp;Color</code><code>None</code> <p>A widget where a color can be selected.</p>"},{"location":"shards/shards/UI/ColorInput/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.ColorInput(Variable: color)\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Columns/","title":"UI.Columns","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards (each column). <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No A sequence of UI contents. <code>[]</code> <code>[None Shard [Shard]]</code> <p>Splits the contents into several columns.</p>"},{"location":"shards/shards/UI/Columns/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Columns(\n        Contents:\n        [{\"Column 1\" | UI.Label}\n          {\"Column 2\" | UI.Label}]\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Combo/","title":"UI.Combo","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of values. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The selected value. <code>Any</code> <code>Label</code>  No The text label of this combobox. <code>None</code> <code>String</code><code>None</code> <code>Index</code>  No The index of the selected item. <code>None</code> <code>Int</code><code>&amp;Int</code><code>None</code> <code>Width</code>  Yes The width of the button and menu. <code>None</code> <code>Float</code><code>&amp;Float</code> <code>Style</code>  Yes The text style. <code>None</code> <code>{Any}</code><code>&amp;{Any}</code> <p>A drop-down selection menu with a label.</p>"},{"location":"shards/shards/UI/Combo/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.CentralPanel(\n    {[\"\u03b1 \u0391\" \"\u03c9 \u03a9\"]\n      UI.Combo(\n        Label: \"Greek letter\"\n        Style: {color: @color(200 10 200)}\n        Index: index\n      )\n      ExpectString &gt;= letter\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      {[\"\u03b1 \u0391\" \"\u03c9 \u03a9\"]\n        UI.Combo(\n          Label: \"Greek letter\"\n          Index: index\n        )\n        ExpectString &gt;= letter\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Console/","title":"UI.Console","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The raw logs. <code>String</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>String</code> <code>ShowFilters</code>  No Whether to display filter controls. <code>false</code> <code>Bool</code> <code>Style</code>  Yes The console style. <code>None</code> <code>{Any}</code><code>&amp;{Any}</code> <p>A console with formatted logs.</p>"},{"location":"shards/shards/UI/Console/#examples","title":"Examples","text":"Code <pre><code>@wire(capture {\n  CaptureLog(\n    Size: 24\n    MinLevel: \"info\"\n    Pattern: \"%^[%l]%$ [%Y-%m-%d %T.%e] %v\"\n    Suspend: true\n  )\n  String.Join &gt; logs\n  Math.Inc(generation)\n} Looped: true)\n\n@wire(ui-wire {\n  Once {\n    \"\" | Set(logs Global: true)\n    0 | Set(generation Global: true)\n    Detach(capture)\n  }\n\n  UI.BottomPanel(\n    Contents:\n    {Get(generation Global: true)\n      ToString | UI.Label\n    }\n  )\n  UI.CentralPanel(\n    Contents:\n    {UI.Button(\"Say Hello\" Msg(\"Hello!\"))\n      Get(logs Global: true)\n      UI.Console(ShowFilters: true)\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Button(\"Say Hello\" Msg(\"Hello!\"))\n      CaptureLog(\n        Size: 24\n        MinLevel: \"info\"\n        Pattern: \"%^[%l]%$ [%Y-%m-%d %T.%e] %v\"\n      )\n      String.Join\n      UI.Console\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Disable/","title":"UI.Disable","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the scope. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Disable</code>  No Whether the contents should be disabled. <code>true</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <p>Creates a scoped child UI.</p>"},{"location":"shards/shards/UI/Disable/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Disable\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.Disable(\n        Disable: true\n        Contents:\n        UI.Button(\"Can't be clicked\")\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/DockArea/","title":"UI.DockArea","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> TODO. <code>Any</code> <code>Output \u27a1\ufe0f</code> TODO. <code>Any</code> <code>Contents</code>  No The UI contents containing tabs. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>TODO.</p>"},{"location":"shards/shards/UI/DockArea/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI DockArea\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n   UI.DockArea(\n    Contents:\n    {\n     UI.Tab(\n      Title: \"Tab 1\"\n      Contents:\n      { \"Tab 1 contents\" | UI.Label})\n     UI.Tab(\n      Title: \"Tab 2\"\n      Contents:\n      {\"Tab 2 contents\" | UI.Label})})\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/DragAndDrop/","title":"UI.DragAndDrop","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Contents</code>  No The property to retrieve from the UI context. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Hover</code>  No Callback function for checking if this is a valid drop target. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Drop</code>  No Callback function for when something is dropped. When set, this element will act as a drop target. When unset, it will act as a drag source. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>ID</code>  No An optional ID value in case of ID conflicts. <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Visualize</code>  No Visualize valid drop targets <code>None</code> <code>Bool</code><code>None</code> <p>Drag and drop source &amp; target.</p> <p> </p>"},{"location":"shards/shards/UI/Float2Input/","title":"UI.Float2Input","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Float2</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>Float2</code><code>&amp;Float2</code> <p>A numeric input.</p>"},{"location":"shards/shards/UI/Float2Input/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Float2 Input\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.Float2Input(Variable: float2)\n        ExpectFloat2\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Float2Slider/","title":"UI.Float2Slider","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Float2</code> <code>Label</code>  No The label for this widget. <code>None</code> <code>String</code><code>None</code> <code>Style</code>  Yes The text style. <code>None</code> <code>{Any}</code><code>&amp;{Any}</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>Float2</code><code>&amp;Float2</code> <code>Min</code>  Yes The minimum value. <code>None</code> <code>Float2</code><code>&amp;Float2</code> <code>Max</code>  Yes The maximum value. <code>None</code> <code>Float2</code><code>&amp;Float2</code> <p>A numeric slider.</p>"},{"location":"shards/shards/UI/Float2Slider/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Float2Slider(\n        Variable: float2\n        Min: @f2(0.0) Max: @f2(1.0)\n      )\n      ExpectFloat2\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Float3Input/","title":"UI.Float3Input","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Float3</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>Float3</code><code>&amp;Float3</code> <p>A numeric input.</p>"},{"location":"shards/shards/UI/Float3Input/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Float3 Input\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.Float3Input(Variable: float3)\n        ExpectFloat3\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Float3Slider/","title":"UI.Float3Slider","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Float3</code> <code>Label</code>  No The label for this widget. <code>None</code> <code>String</code><code>None</code> <code>Style</code>  Yes The text style. <code>None</code> <code>{Any}</code><code>&amp;{Any}</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>Min</code>  Yes The minimum value. <code>None</code> <code>Float3</code><code>&amp;Float3</code> <code>Max</code>  Yes The maximum value. <code>None</code> <code>Float3</code><code>&amp;Float3</code> <p>A numeric slider.</p>"},{"location":"shards/shards/UI/Float3Slider/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Float3 Slider\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.Float3Slider(\n          Variable: float3\n          Min: @f3(0) Max: @f3(1)\n        )\n        ExpectFloat3\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Float4Input/","title":"UI.Float4Input","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Float4</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>Float4</code><code>&amp;Float4</code> <p>A numeric input.</p>"},{"location":"shards/shards/UI/Float4Input/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Float 4 Input\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.Float4Input(Variable: float4)\n        ExpectFloat4\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Float4Slider/","title":"UI.Float4Slider","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Float4</code> <code>Label</code>  No The label for this widget. <code>None</code> <code>String</code><code>None</code> <code>Style</code>  Yes The text style. <code>None</code> <code>{Any}</code><code>&amp;{Any}</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>Float4</code><code>&amp;Float4</code> <code>Min</code>  Yes The minimum value. <code>None</code> <code>Float4</code><code>&amp;Float4</code> <code>Max</code>  Yes The maximum value. <code>None</code> <code>Float4</code><code>&amp;Float4</code> <p>A numeric slider.</p>"},{"location":"shards/shards/UI/Float4Slider/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Float 4 Slider\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.Float4Slider(\n          Variable: float4\n          Min: @f4(0) Max: @f4(1)\n        )\n        ExpectFloat4\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/FloatInput/","title":"UI.FloatInput","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Float</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>Float</code><code>&amp;Float</code> <code>Prefix</code>  No Display a prefix before the number. <code>None</code> <code>String</code><code>None</code> <p>A numeric input.</p>"},{"location":"shards/shards/UI/FloatInput/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Float Input\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.FloatInput(Variable: float)\n        ExpectFloat\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/FloatSlider/","title":"UI.FloatSlider","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Float</code> <code>Label</code>  No The text label for this widget. <code>None</code> <code>String</code><code>None</code> <code>Style</code>  Yes The text style. <code>None</code> <code>{Any}</code><code>&amp;{Any}</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>Float</code><code>&amp;Float</code> <code>Min</code>  Yes The minimum value. <code>None</code> <code>Float</code><code>&amp;Float</code> <code>Max</code>  Yes The maximum value. <code>None</code> <code>Float</code><code>&amp;Float</code> <p>A numeric slider.</p>"},{"location":"shards/shards/UI/FloatSlider/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI FLoat Slider\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.FloatSlider(\n          Variable: float\n          Min: 0.0 Max: 1.0\n        )\n        ExpectFloat\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Frame/","title":"UI.Frame","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the frame. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>InnerMargin</code>  Yes The margin inside the frame, between the outline and the contents. <code>None</code> <code>Float4</code> <code>OuterMargin</code>  Yes The margin outside the frame. <code>None</code> <code>Float4</code> <code>Rounding</code>  Yes Rounding radiuses for the corners. <code>None</code> <code>Float4</code> <code>FillColor</code>  No The color filling the background of the frame. <code>None</code> <code>Color</code><code>&amp;Color</code><code>None</code> <code>StrokeColor</code>  No The color for the frame outline. <code>None</code> <code>Color</code><code>&amp;Color</code><code>None</code> <code>StrokeWidth</code>  Yes The width of the frame outline. <code>None</code> <code>Float</code> <p>Visually groups the contents together.</p>"},{"location":"shards/shards/UI/Frame/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Frame\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.Frame(\n          InnerMargin: @f4(10) OuterMargin: @f4(0) Rounding: @f4(5)\n          FillColor: @color(50 50 21)\n          StrokeColor: @color(250 250 32) StrokeWidth: 2.0\n          Contents:\n          {\n            \"Frame content\" | UI.Label\n          }\n        )\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/GetClipboard/","title":"UI.GetClipboard","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code>"},{"location":"shards/shards/UI/Grid/","title":"UI.Grid","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the grid. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Striped</code>  No Whether to alternate a subtle background color to every other row. <code>false</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>NumColumns</code>  No The number of columns in the grid. Setting this will allow the last column to expand to take up the rest of the space of the parent UI. <code>None</code> <code>Int</code><code>&amp;Int</code><code>None</code> <code>MinWidth</code>  Yes Minimum column width. <code>None</code> <code>Float</code><code>&amp;Float</code> <code>MaxWidth</code>  Yes Maximum column width. <code>None</code> <code>Float</code><code>&amp;Float</code> <code>Spacing</code>  Yes Spacing between columns/rows. <code>None</code> <code>Float2</code><code>&amp;Float2</code> <p>Simple grid layout.</p>"},{"location":"shards/shards/UI/Grid/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Grid\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.Grid(\n          Striped: true\n          Contents:\n          {\"Col 1\" | UI.Label\n            \"Col 2\" | UI.Label\n            \"Col 3\" | UI.Label\n            UI.NextRow\n            \"Hello\" | UI.Label\n            \"shards\" | UI.Label\n            \"!\" | UI.Label\n            UI.NextRow\n            \"Lorem ipsum dolor sit amet\" | UI.Label\n            \"consectetur adipiscing elit\" | UI.Label\n            \"sed do eiusmod tempor\" | UI.Label\n          }\n        )\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Group/","title":"UI.Group","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the group. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Visually groups the contents together.</p>"},{"location":"shards/shards/UI/Group/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Group\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.Group(\n        Contents:\n        {\"Group content\" | UI.Label})\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/HexViewer/","title":"UI.HexViewer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The data to visualize. Supports primitive types only (floats, ints, string and bytes). <code>Bytes</code><code>Enum</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>String</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Bytes</code><code>Enum</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>String</code> <p>Displays an hexadecimal viewer of data.</p>"},{"location":"shards/shards/UI/HexViewer/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Hex Viewer\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n        Once({\n          \"Hello shards!\" &gt;= text\n        })\n\n        UI.Horizontal(\n          {\n            \"Text: \" | UI.Label\n            UI.TextField(text)\n          }\n        )\n\n        text | UI.HexViewer\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Horizontal/","title":"UI.Horizontal","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the layout. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Wrap</code>  No Wrap the content once it reaches the right edge. <code>false</code> <code>Bool</code> <code>Centered</code>  No Center the contents horizontally. <code>false</code> <code>Bool</code> <p>Layout the contents horizontally.</p>"},{"location":"shards/shards/UI/Horizontal/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Horizntal\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.Horizontal({\n        \"Hello\" | UI.Label\n        UI.Separator\n        \"World\" | UI.Label\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Hyperlink/","title":"UI.Hyperlink","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The URL. <code>String</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>String</code> <code>Label</code>  No Optional label for the hyperlink. <code>None</code> <code>String</code><code>None</code> <code>Style</code>  Yes The text style. <code>None</code> <code>{Any}</code><code>&amp;{Any}</code> <p>A clickable hyperlink.</p>"},{"location":"shards/shards/UI/Hyperlink/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Hyperlink\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      \"https://docs.fragcolor.com\"\n      UI.Hyperlink(\n        Label: \"Fragcolor documentation\"\n        Style: {italics: true}\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Hyperlink\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      \"https://docs.fragcolor.com\"\n      UI.Hyperlink(Label: \"Fragcolor documentation\")\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Image/","title":"UI.Image","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The image to display. <code>Image</code><code>GFX.Texture2D</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Image</code><code>GFX.Texture2D</code> <code>Scale</code>  No Scaling to apply to the source image. <code>@f2(1 1)</code> <code>Float2</code><code>&amp;Float2</code> <code>Size</code>  Yes The size to render the image at. <code>None</code> <code>Float2</code><code>&amp;Float2</code> <code>ScalingAware</code>  No When set to true, this image's pixels will be rendered 1:1 regardless of UI context point size. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <p>Display an image in the UI.</p>"},{"location":"shards/shards/UI/Image/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Image\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      Once({\n        asset/r0| GFX.Texture = uiImage1 ;; replace with whatever image you have as references\n\n      })\n\n      uiImage1 | UI.Image\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/ImageButton/","title":"UI.ImageButton","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Action shards of the button. <code>Image</code><code>GFX.Texture2D</code> <code>Output \u27a1\ufe0f</code> Indicates whether the button was clicked during this frame. <code>Bool</code> <code>Action</code>  No The shards to execute when the button is pressed. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Scale</code>  No Scaling to apply to the source image. <code>@f2(1 1)</code> <code>Float2</code><code>&amp;Float2</code> <code>Size</code>  Yes The size to render the image at. <code>None</code> <code>Float2</code><code>&amp;Float2</code> <code>ScalingAware</code>  No When set to true, this image's pixels will be rendered 1:1 regardless of UI context point size. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>Selected</code>  No Indicates whether the button is selected. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <p>Clickable button with image.</p>"},{"location":"shards/shards/UI/ImageButton/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Image Button\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      Once({\n        asset/r0| GFX.Texture = uiImage1 ;; replace with whatever image you have as references\n\n      })\n\n      uiImage1 | UI.ImageButton(Action:{\n        Msg(\"Image Button Working\")\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Indent/","title":"UI.Indent","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Creates a child UI which is indented to the right.</p>"},{"location":"shards/shards/UI/Indent/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI indent\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      \"Part A\" | UI.Label\n     UI.Indent(\n      Contents:\n      {\n       \"1.\" | UI.Label\n       UI.Indent(\n        Contents:\n        {\n         \"1.1.\" | UI.Label\n         \"1.2.\" | UI.Label})\n       \"2.\" | UI.Label})\n     UI.Separator\n     \"Part B\" | UI.Label\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Int2Input/","title":"UI.Int2Input","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Int2</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>Int2</code><code>&amp;Int2</code> <p>A numeric input.</p>"},{"location":"shards/shards/UI/Int2Input/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Int2 Input\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.Int2Input(\n      Variable: int2)\n      ExpectInt2\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Int2Slider/","title":"UI.Int2Slider","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Int2</code> <code>Label</code>  No The label for this widget. <code>None</code> <code>String</code><code>None</code> <code>Style</code>  Yes The text style. <code>None</code> <code>{Any}</code><code>&amp;{Any}</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>Int2</code><code>&amp;Int2</code> <code>Min</code>  Yes The minimum value. <code>None</code> <code>Int2</code><code>&amp;Int2</code> <code>Max</code>  Yes The maximum value. <code>None</code> <code>Int2</code><code>&amp;Int2</code> <p>A numeric slider.</p>"},{"location":"shards/shards/UI/Int2Slider/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"Int Slider\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.Int2Slider(\n        Variable: int2\n        Min: @i2(1) Max: @i2(100)\n      )\n      ExpectInt2\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Int3Input/","title":"UI.Int3Input","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Int3</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>Int3</code><code>&amp;Int3</code> <p>A numeric input.</p>"},{"location":"shards/shards/UI/Int3Input/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Int3 Input\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.Int3Input(\n      Variable: int3)\n      ExpectInt3\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Int3Slider/","title":"UI.Int3Slider","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Int3</code> <code>Label</code>  No The label for this widget. <code>None</code> <code>String</code><code>None</code> <code>Style</code>  Yes The text style. <code>None</code> <code>{Any}</code><code>&amp;{Any}</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>Int3</code><code>&amp;Int3</code> <code>Min</code>  Yes The minimum value. <code>None</code> <code>Int3</code><code>&amp;Int3</code> <code>Max</code>  Yes The maximum value. <code>None</code> <code>Int3</code><code>&amp;Int3</code> <p>A numeric slider.</p>"},{"location":"shards/shards/UI/Int3Slider/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"Int Int3 Slider\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.Int3Slider(\n        Variable: int3\n        Min: @i3(1) Max: @i3(100)\n      )\n      ExpectInt3\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Int4Input/","title":"UI.Int4Input","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Int4</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>Int4</code><code>&amp;Int4</code> <p>A numeric input.</p>"},{"location":"shards/shards/UI/Int4Input/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Int 4 Input\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.Int4Input(\n      Variable: int4)\n      ExpectInt4\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Int4Slider/","title":"UI.Int4Slider","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Int4</code> <code>Label</code>  No The label for this widget. <code>None</code> <code>String</code><code>None</code> <code>Style</code>  Yes The text style. <code>None</code> <code>{Any}</code><code>&amp;{Any}</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>Int4</code><code>&amp;Int4</code> <code>Min</code>  Yes The minimum value. <code>None</code> <code>Int4</code><code>&amp;Int4</code> <code>Max</code>  Yes The maximum value. <code>None</code> <code>Int4</code><code>&amp;Int4</code> <p>A numeric slider.</p>"},{"location":"shards/shards/UI/Int4Slider/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"Int 4 Slider\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.Int4Slider(\n        Label: \"My Label\"\n        Style: {color: @color(255 128 64) italics: true}\n        Variable: int4\n        Min: @i4(1) Max: @i4(100)\n      )\n      ExpectInt4\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/IntInput/","title":"UI.IntInput","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Int</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>Int</code><code>&amp;Int</code> <code>Prefix</code>  No Display a prefix before the number. <code>None</code> <code>String</code><code>None</code> <p>A numeric input.</p>"},{"location":"shards/shards/UI/IntInput/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Int input\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.IntInput(\n      Variable: int)\n      ExpectInt\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/IntSlider/","title":"UI.IntSlider","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Int</code> <code>Label</code>  No The text label for this widget. <code>None</code> <code>String</code><code>None</code> <code>Style</code>  Yes The text style. <code>None</code> <code>{Any}</code><code>&amp;{Any}</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>Int</code><code>&amp;Int</code> <code>Min</code>  Yes The minimum value. <code>None</code> <code>Int</code><code>&amp;Int</code> <code>Max</code>  Yes The maximum value. <code>None</code> <code>Int</code><code>&amp;Int</code> <p>A numeric slider.</p>"},{"location":"shards/shards/UI/IntSlider/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.IntSlider(\n        Label: \"My Label\"\n        Style: {color: @color(255 128 64) italics: true}\n        Variable: int\n        Min: 1 Max: 100\n      )\n      ExpectInt\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Label/","title":"UI.Label","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The text to display. <code>String</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>String</code> <code>Wrap</code>  No Wrap the text depending on the layout. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>Style</code>  Yes The text style. <code>None</code> <code>{Any}</code><code>&amp;{Any}</code> <p>Static text.</p>"},{"location":"shards/shards/UI/Label/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Label\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n          UI.Columns(\n     [{\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\" | UI.Label(Wrap: true)}\n      none\n      {\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\" | UI.Label(Wrap: false)}])\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Label\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      \"Hello Shards!\" | UI.Label\n      \"Hello Shards!\" | UI.Label(Style: {strikethrough: true})\n      \"Hello Shards!\" | UI.Label(Style: {underline: true})\n      \"Hello Shards!\" | UI.Label(Style: {italics: true})\n      \"Hello Shards!\" | UI.Label(Style: {color: @color(96 96 12)})\n      \"Hello Shards!\" | UI.Label(Style: {color: @color(12 96 96) italics: true})\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Label\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      \"Hello Shards!\" | UI.Label\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Layout/","title":"UI.Layout","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Not used. <code>Any</code> <code>Output \u27a1\ufe0f</code> Passthrough the input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Class</code>  Yes The Layout class defining all layout options. <code>None</code> <code>&amp;Object</code> <code>MinSize</code>  No Minimum reserved space for the UI. Overridden by FillWidth and FillHeight. <code>None</code> <code>Float2</code><code>&amp;Float2</code><code>None</code> <code>MaxSize</code>  No Maximum reserved space for the UI. Overridden by FillWidth and FillHeight. <code>None</code> <code>Float2</code><code>&amp;Float2</code><code>None</code> <code>FillWidth</code>  No Whether the layout should occupy the full width. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>FillHeight</code>  No Whether the layout should occupy the full height. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <p>Versatile layout with numerous customization options.</p>"},{"location":"shards/shards/UI/Layout/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Layout\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      Once({\n        UI.LayoutClass(\n          MainDirection: LayoutDirection::BottomUp\n          MainWrap: true\n          CrossAlign: LayoutAlign::Center\n          CrossJustify: true\n        ) = bottom-up-layout-class\n        false &gt;= checked\n        1 &gt;= choice\n      })\n\n      UI.Layout(\n        Class: bottom-up-layout-class\n        Contents: {\n          \"Wrapping text followed by example widgets:\" | UI.Label\n          UI.Checkbox(\n            Label: \"checkbox\"\n            Variable: checked\n          )\n          UI.RadioButton(\n            Label: \"radio\"\n            Variable: choice\n            Value: 1\n          )\n          UI.Button(\n            Label: \"button\"\n            Action: Msg(\"Clicked\")\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Layout\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      Once({\n        UI.LayoutClass(\n          MainDirection: LayoutDirection::RightToLeft\n          MinSize: @f2(200 200)\n          ; note that some direction layouts may try to expand to max size and this max size will increase if the contents are too large\n          ; also, without max size, the layout will try to expand to max size of the window, so for shrink to fit, may want to set to (0 0)\n          MaxSize: @f2(600 600)\n          ; FillHeight: true\n          ; FillWidth: true\n          Disabled: false\n          Frame: LayoutFrame::Widgets\n          EnableHorizontalScrollBar: true\n          EnableVerticalScrollBar: true\n          ScrollAreaMinWidth: 200.0\n          ScrollAreaMaxWidth: 200.0\n        ) = scroll-frame-layout-class\n        false &gt;= checked\n        1 &gt;= choice\n      })\n\n      UI.Layout(\n        Class: scroll-frame-layout-class\n        ; individual override for size for each layout is also possible\n        ; MinSize: @f2(200 200)\n        ; MaxSize: @f2(600 600)\n        ; FillHeight: true\n        ; FillWidth: true\n        Contents: {\n          \"Wrapping text followed by example widgets:\" | UI.Label\n          UI.Checkbox(\n            Label: \"checkbox\"\n            Variable: checked\n          )\n          UI.RadioButton(\n            Label: \"radio\"\n            Variable: choice\n            Value: 1\n          )\n          UI.Button(\n            Label: \"button\"\n            Action: Msg(\"Clicked\")\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Layout\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      Once({\n        UI.LayoutClass(\n        MainDirection: LayoutDirection::LeftToRight) = left-to-right-layout-class\n        UI.LayoutClass(\n        MainDirection: LayoutDirection::TopDown) = top-down-layout-class\n      })\n\n      UI.Layout(\n        Class: left-to-right-layout-class\n        MaxSize: @f2(0 0) ; use as small area as possible, this vertical separator needs this to act like egui vertical separator\n        Contents: {\n          \"Hello\" | UI.Label\n          UI.Separator\n          \"World\" | UI.Label\n        }\n      )\n      UI.Layout(\n        Class: top-down-layout-class\n        Contents: {\n          \"Hello\" | UI.Label\n          UI.Separator\n          \"World\" | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/LayoutClass/","title":"UI.LayoutClass","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Not used. <code>Any</code> <code>Output \u27a1\ufe0f</code> A Layout class that can be used in other UI shards. <code>Object</code> <code>Parent</code>  No The parent Layout class to inherit parameters from. <code>None</code> <code>&amp;Object</code><code>None</code> <code>MainDirection</code>  No The primary direction of the UI element layout. <code>None</code> <code>LayoutDirection</code><code>None</code> <code>MainWrap</code>  No Should UI elements wrap when reaching the end of the main direction. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>MainAlign</code>  No Alignment of UI elements along the main axis. <code>None</code> <code>LayoutAlign</code><code>None</code> <code>MainJustify</code>  No Justification of UI elements along the main axis. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>CrossAlign</code>  No Alignment of UI elements along the cross axis. <code>None</code> <code>LayoutAlign</code><code>None</code> <code>CrossJustify</code>  No Justification of UI elements along the cross axis. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>MinSize</code>  No Minimum space reserved for UI contents. Overridden by FillWidth and FillHeight. <code>None</code> <code>Float2</code><code>&amp;Float2</code><code>None</code> <code>MaxSize</code>  No Maximum space reserved for UI contents. Overridden by FillWidth and FillHeight. <code>None</code> <code>Float2</code><code>&amp;Float2</code><code>None</code> <code>FillWidth</code>  No Whether the layout should occupy the full width. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>FillHeight</code>  No Whether the layout should occupy the full height. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>Disabled</code>  No Whether the layout should be disabled. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>Frame</code>  No Frame to be drawn around the layout. <code>None</code> <code>LayoutFrame</code><code>None</code> <code>EnableHorizontalScrollBar</code>  No Enable the horizontal scroll bar. Creates a ScrollArea if true. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>EnableVerticalScrollBar</code>  No Enable the vertical scroll bar. Creates a ScrollArea if true. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>ScrollBarVisibility</code>  No Visibility of the scroll bars: AlwaysVisible, VisibleWhenNeeded, or AlwaysHidden. Default: AlwaysVisible. <code>None</code> <code>ScrollVisibility</code><code>None</code> <code>ScrollAreaMinWidth</code>  No Minimum width of the scroll area. <code>None</code> <code>Float</code><code>&amp;Float</code><code>None</code> <code>ScrollAreaMinHeight</code>  No Minimum height of the scroll area. <code>None</code> <code>Float</code><code>&amp;Float</code><code>None</code> <code>ScrollAreaMaxWidth</code>  No Maximum width of the scroll area. <code>None</code> <code>Float</code><code>&amp;Float</code><code>None</code> <code>ScrollAreaMaxHeight</code>  No Maximum height of the scroll area. <code>None</code> <code>Float</code><code>&amp;Float</code><code>None</code> <code>ScrollAreaAutoShrinkWidth</code>  No Auto-shrink scroll area width to fit contents. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>ScrollAreaAutoShrinkHeight</code>  No Auto-shrink scroll area height to fit contents. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>ScrollAreaEnableScrolling</code>  No Enable scrolling in the scroll area. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <p>This shard creates a Layout class that can be used in other UI shards.</p> <p> </p>"},{"location":"shards/shards/UI/LeftPanel/","title":"UI.LeftPanel","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the panel. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Resizable</code>  No Whether the panel can be resized. <code>None</code> <code>Bool</code><code>None</code> <code>DefaultSize</code>  No The initial size of the panel. <code>None</code> <code>Float</code><code>None</code> <code>MinSize</code>  No The minimum allowable size of the panel. <code>None</code> <code>Float</code><code>None</code> <code>MaxSize</code>  No The maximum allowable size of the panel. <code>None</code> <code>Float</code><code>None</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Layout UI elements into the panel.</p>"},{"location":"shards/shards/UI/LeftPanel/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI LEftPanel\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.LeftPanel(\n      Contents:\n      {\"Left Panel\" | UI.Label})\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Link/","title":"UI.Link","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Action shards of the link. <code>Any</code> <code>Output \u27a1\ufe0f</code> Indicates whether the link was clicked during this frame. <code>Bool</code> <code>Label</code>  No Optional label for the link. <code>None</code> <code>String</code><code>None</code> <code>Action</code>  No The shards to execute when the link is clicked. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Style</code>  Yes The text style. <code>None</code> <code>{Any}</code><code>&amp;{Any}</code> <p>A clickable link.</p>"},{"location":"shards/shards/UI/Link/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Link\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel(\n        {UI.Link(\n            Label: \"Click here\"\n            Style: {italics: true}\n            Action: Msg(\"Hello\")\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Link\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel(\n      {UI.Link(\"Click here\" Msg(\"Hello\"))})\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/ListBox/","title":"UI.ListBox","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of values. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The selected value. <code>Any</code> <code>Index</code>  No The index of the selected item. <code>None</code> <code>Int</code><code>&amp;Int</code><code>None</code> <code>IsSelected</code>  No Predicate that should return selection state of an item, receives the index in the list, should return true/false. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Clicked</code>  No Action to perform if an element of the list is being clicked. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Template</code>  No Custom rendering <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>A list selection.</p>"},{"location":"shards/shards/UI/ListBox/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI List Box\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel(\n        {[1 2 3 4 5 6 7 8 9]\n          UI.ListBox(\n            Index: index\n            Template:\n            {ToString | UI.Label}\n          )\n          ExpectInt &gt;= value\n\n          UI.Horizontal(\n            {\"Selected index: \" | UI.Label\n              index | ToString | UI.Label\n            }\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI List Box\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel({\n\n        Once({\n          -1 &gt;= clicked\n          [1 2 3 4 5 6 7 8 9] = items\n        })\n\n        items\n        UI.ListBox(\n          IsSelected: {\n            = i\n            clicked | If(IsLess(0) {false}\n            {IsLessEqual(i)})\n          }\n          Clicked: {&gt; clicked}\n          Template:\n          {ToString | UI.Label}\n        )\n        ExpectInt &gt;= value\n\n        UI.Horizontal(\n          {\"Selected index: \" | UI.Label\n            clicked | ToString | UI.Label\n          }\n        )\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI List Box\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel (\n        [\"\u03b1 \u0391\" \"\u03c9 \u03a9\"]\n        UI.ListBox(Index: index)\n        ExpectString &gt;= value\n\n        UI.Horizontal(\n          {\"Selected index: \" | UI.Label\n            index | ToString | UI.Label\n          }\n        )\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/MarkdownViewer/","title":"UI.MarkdownViewer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The markdown text to render. <code>String</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>String</code> <p>Renders a markdown text.</p>"},{"location":"shards/shards/UI/MarkdownViewer/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Markdown Viewer\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.TopPanel(\n        Contents: {\n          \"# Title\n\n  ## Sub-title\n  **list:**\n  - item 1\n  - item 2\"\n          UI.MarkdownViewer\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Menu/","title":"UI.Menu","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the menu. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the menu is active. <code>Bool</code> <code>Title</code>  Yes The title of the menu. <code>None</code> <code>String</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Creates a menu button that when clicked will show the given menu.</p> <p>If called from within a menu this will instead create a button for a sub-menu.</p>"},{"location":"shards/shards/UI/Menu/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Menu\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.TopPanel(\n        Contents: {\n          UI.TopPanel(\n            Contents:\n            UI.MenuBar(\n              UI.Menu(\n                Title: \"File\"\n                Contents:\n                UI.Button(\"Exit\")\n              )\n            )\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/MenuBar/","title":"UI.MenuBar","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the menu bar. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the menu bar is active. <code>Bool</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>The menu bar goes well in a <code>UI.TopPanel</code>.</p>"},{"location":"shards/shards/UI/MenuBar/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI MenuBar\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.TopPanel(\n        Contents: {\n          UI.TopPanel(\n            Contents:\n            UI.MenuBar(\n              Contents:\n              UI.Menu(\n                \"Menu\"\n                {\"Some Text\" | UI.Label}\n              )\n            )\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/NextRow/","title":"UI.NextRow","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <p>Moves to the next row in a grid layout.</p>"},{"location":"shards/shards/UI/NextRow/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Next Row\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel(\n    UI.Grid(\n     Striped: true\n     Contents:{\n      \"Col 1\" | UI.Label\n      \"Col 2\" | UI.Label\n      \"Col 3\" | UI.Label\n      UI.NextRow\n      \"Hello\" | UI.Label\n      \"shards\" | UI.Label\n      \"!\" | UI.Label\n      UI.NextRow\n      \"Lorem ipsum dolor sit amet\" | UI.Label\n      \"consectetur adipiscing elit\" | UI.Label\n      \"sed do eiusmod tempor\" | UI.Label}))\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Overlay/","title":"UI.Overlay","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Items</code>  Yes A list of UI's to overlay on top of each other in order <code>None</code> <code>[[None Shard [Shard]]]</code> <p>Overlays multiple UI's on top of each other.</p> <p> </p>"},{"location":"shards/shards/UI/PaintCircle/","title":"UI.PaintCircle","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Center</code>  Yes Center of the circle <code>None</code> <code>Float2</code><code>&amp;Float2</code> <code>Radius</code>  Yes Radius of the circle <code>None</code> <code>Float</code><code>&amp;Float</code> <code>StrokeWidth</code>  Yes Width of circle outline <code>None</code> <code>Float</code><code>&amp;Float</code> <code>StrokeColor</code>  Yes Color of circle outline <code>None</code> <code>Color</code><code>&amp;Color</code> <p>Draw a circle on the canvas</p> <p> </p>"},{"location":"shards/shards/UI/Plot/","title":"UI.Plot","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the plot. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>ViewAspect</code>  No Width / height ratio of the plot region. <code>None</code> <code>Float</code><code>&amp;Float</code><code>None</code> <code>DataAspect</code>  No Width / height ratio of the data. <code>None</code> <code>Float</code><code>&amp;Float</code><code>None</code> <code>Legend</code>  No Whether to display the legend. <code>None</code> <code>Bool</code><code>None</code> <p>A 2D plot area.</p>"},{"location":"shards/shards/UI/Plot/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI PlotBar\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.TopPanel(\n      Contents:\n      UI.Checkbox(\"Horizontal\" horizontal))\n      UI.CentralPanel(\n        Contents: {\n          UI.Plot({\n            [] &gt;= hist\n            ForRange(\n              -40 39\n              {\n                Once({\n                  0.02 | Math.Multiply(3.1415926535) | Math.Sqrt = f\n                })\n                ToFloat | Math.Divide(10.0) | Math.Add(0.05) &gt;= x\n                x | Math.Multiply(x) | Math.Divide(-2.0) | Math.Exp | Math.Divide(f) &gt;= y\n                [x y] | ToFloat2 &gt;&gt; hist\n              }\n            )\n\n            hist | ExpectLike([@f2(0)])\n            UI.PlotBar(\n              Horizontal: horizontal\n              Width: 0.095\n              Color: @color(173 216 230)\n            )\n          })\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI PlotPoints\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      Once({\n        32.0 &gt;= n\n        [] &gt;= sin\n        n | Math.Divide(3.1415926535) = divide-factor\n      })\n\n      UI.Plot(\n        Legend: true\n        Contents: {\n          ForRange(\n            From: -32\n            To: 32\n            Action: {\n              ToFloat | Math.Divide(divide-factor) &gt;= x\n              x | Math.Sin &gt;= y\n              [x y] | ToFloat2 &gt;&gt; sin\n            }\n          )\n          sin | ExpectLike([@f2(0)])\n          UI.PlotPoints(\n            Color: @color(200 100 100)\n            Name: \"sin\"\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI PlotLine\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel({\n        UI.Plot({\n          [@f2(-1.0) @f2(0.0) @f2(1 0)] | UI.PlotLine\n        })\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/PlotBar/","title":"UI.PlotBar","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of point coordinates. <code>[Float2]</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>[Float2]</code> <code>Color</code>  No Stroke color. <code>None</code> <code>Color</code><code>&amp;Color</code><code>None</code> <code>Width</code>  Yes Width of a bar. <code>None</code> <code>Float</code> <code>Horizontal</code>  No Display the bars horizontally. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>Name</code>  No Name of this chart, displayed in the plot legend. <code>None</code> <code>String</code><code>None</code> <p>Points represented as vertical or horizontal bars on a plot.</p>"},{"location":"shards/shards/UI/PlotBar/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI PlotBar\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.TopPanel(\n      Contents:\n      UI.Checkbox(\"Horizontal\" horizontal))\n      UI.CentralPanel(\n        Contents: {\n          UI.Plot({\n            [] &gt;= hist\n            ForRange(\n              -40 39\n              {\n                Once({\n                  0.02 | Math.Multiply(3.1415926535) | Math.Sqrt = f\n                })\n                ToFloat | Math.Divide(10.0) | Math.Add(0.05) &gt;= x\n                x | Math.Multiply(x) | Math.Divide(-2.0) | Math.Exp | Math.Divide(f) &gt;= y\n                [x y] | ToFloat2 &gt;&gt; hist\n              }\n            )\n\n            hist | ExpectLike([@f2(0)])\n            UI.PlotBar(\n              Horizontal: horizontal\n              Width: 0.095\n              Color: @color(173 216 230)\n            )\n          })\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/PlotLine/","title":"UI.PlotLine","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of point coordinates. <code>[Float2]</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>[Float2]</code> <code>Color</code>  No Stroke color. <code>None</code> <code>Color</code><code>&amp;Color</code><code>None</code> <code>Name</code>  No Name of this chart, displayed in the plot legend. <code>None</code> <code>String</code><code>None</code> <p>Line-connected points on a plot.</p>"},{"location":"shards/shards/UI/PlotLine/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI PlotLine\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel(\n        UI.Plot({\n          [@f2(-1) @f2(0) @f2(1)] | UI.PlotLine\n        })\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/PlotPoints/","title":"UI.PlotPoints","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of point coordinates. <code>[Float2]</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>[Float2]</code> <code>Name</code>  No Name of this chart, displayed in the plot legend. <code>None</code> <code>String</code><code>None</code> <code>Color</code>  No Stroke color. <code>None</code> <code>Color</code><code>&amp;Color</code><code>None</code> <code>Shape</code>  Yes Shape of the marker. <code>None</code> <code>MarkerShape</code> <code>Radius</code>  Yes Radius of the marker. <code>None</code> <code>Float</code> <p>Scattered points on a plot.</p>"},{"location":"shards/shards/UI/PlotPoints/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI PlotPoints\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      Once({\n        32.0 &gt;= n\n        [] &gt;= sin\n        n | Math.Divide(3.1415926535) = divide-factor\n      })\n\n      UI.Plot(\n        Legend: true\n        Contents: {\n          ForRange(\n            From: -32\n            To: 32\n            Action: {\n              ToFloat | Math.Divide(divide-factor) &gt;= x\n              x | Math.Sin &gt;= y\n              [x y] | ToFloat2 &gt;&gt; sin\n            }\n          )\n          sin | ExpectLike([@f2(0)])\n          UI.PlotPoints(\n            Color: @color(200 100 100)\n            Name: \"sin\"\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/PopupWrapper/","title":"UI.PopupWrapper","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Widget shard(s) of the popup. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>MinWidth</code>  No The minimum width of the popup that should appear below or above the button. By default, it is always at least as wide as the button. <code>None</code> <code>Float</code><code>None</code> <code>AboveOrBelow</code>  Yes Whether the location of the popup should be above or below the button. <code>None</code> <code>PopupLocation</code> <code>ID</code>  No An optional ID value to make the popup unique if the label text collides. <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Widget</code>  No The shard(s) to execute that should contain a widget that supports having this popup generated for it upon being clicked. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Contents</code>  No The shards to execute and render inside the popup ui when the button is pressed. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Wraps a button with a popup that can act as a drop-down menu or suggestion menu.</p>"},{"location":"shards/shards/UI/PopupWrapper/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI PopupWrapper\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel({\n        Once({\n          asset/r0 | GFX.Texture = image\n        })\n        UI.PopupWrapper(\n          MinWidth: 200.0\n          Widget: {\n            image | UI.ImageButton(\n              Scale: @f2(0.1)\n              Action: {\n                \"Message sent!\" | Log\n              }\n            )\n          }\n          Contents: {\n            UI.Button(\n              Label: \"Receive message\"\n              Action: {\n                \"Message received!\" | Log\n              }\n            )\n          }\n        )\n        UI.PopupWrapper(\n          MinWidth: 300.0 ; Changes the minimum width of the popup to be 200.0 instead of the width of the button\n          AboveOrBelow: PopupLocation::Above\n          Widget: {\n            UI.Button(\n              Label: \"Send message\"\n              Action: {\n                \"Message sent!\" | Log\n              }\n            )\n          }\n          Contents: {\n            image | UI.ImageButton(\n              Scale: @f2(0.1)\n              Action: {\n                \"Message received!\" | Log\n              }\n            )\n            UI.Button(\n              Label: \"Receive message\"\n              Action: {\n                \"Message received!\" | Log\n              }\n            )\n          }\n        )\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI PlotPopup Wrapper\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel({\n        UI.PopupWrapper(\n          Widget: {\n            UI.Button(\n              Label: \"Send message\"\n              Action: {\n                \"Message sent!\" | Log\n              }\n            )\n          }\n          Contents: {\n            UI.Button(\n              Label: \"Receive message\"\n              Action: {\n                \"Message received!\" | Log\n              }\n            )\n          }\n        )\n        UI.PopupWrapper(\n          Widget: {\n            UI.Button(\n              Label: \"Send message\"\n              Action: {\n                \"Message sent!\" | Log\n              }\n            )\n          }\n          Contents: {\n            UI.Button(\n              Label: \"Receive message\"\n              Action: {\n                \"Message received!\" | Log\n              }\n            )\n          }\n        )\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/ProgressBar/","title":"UI.ProgressBar","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The progress amount ranging from 0.0 (no progress) to 1.0 (completed). <code>Float</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Float</code> <code>Overlay</code>  No The text displayed inside the progress bar. <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Width</code>  Yes The desired width of the progress bar. Will use all horizontal space if not set. <code>None</code> <code>Float</code><code>&amp;Float</code> <p>A progress bar with an optional overlay text.</p>"},{"location":"shards/shards/UI/ProgressBar/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel({\n      Once({\n        0.0 &gt;= progress\n      })\n     progress | UI.ProgressBar(Overlay: \"Progress\")\n     Math.Add(0.01) &gt; progress\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Property/","title":"UI.Property","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float4</code><code>Float2</code><code>Float</code><code>Bool</code> <code>Property</code>  Yes The property to retrieve from the UI context <code>None</code> <code>UIProperty</code> <p>Retrieves values from the current state of the UI.</p>"},{"location":"shards/shards/UI/Property/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel(\n        Contents: {\n          UI.Property(UIProperty::RemainingSpace)\n          Once({\n            Log\n          } 2.0)\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/RadioButton/","title":"UI.RadioButton","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Indicates whether the radio button was clicked during this frame. <code>Bool</code> <code>Label</code>  No The text label of this radio button. <code>None</code> <code>String</code><code>None</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>Any</code><code>&amp;Any</code> <code>Value</code>  Yes The value to compare with. <code>None</code> <code>Any</code> <code>Style</code>  Yes The text style. <code>None</code> <code>{Any}</code><code>&amp;{Any}</code> <p>A radio button for selecting a value amongst multiple choices.</p>"},{"location":"shards/shards/UI/RadioButton/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel({\n        Once({\n          2 &gt;= choice\n        })\n        UI.RadioButton(Label: \"Choice 1\" Style: {} Variable: choice Value: 1)\n        UI.RadioButton(\n          Label: \"Choice 2\"\n          Style: {underline: true}\n          Variable: choice\n          Value: 2\n        )\n        UI.RadioButton(Label: \"Choice 3\" Style: {} Variable: choice Value: 3)\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel({\n        Once({\n          2 &gt;= choice\n        })\n        UI.RadioButton(\n          Label: \"Choice 1\"\n          Variable: choice\n          Value: 1\n        )\n        UI.RadioButton(\"Choice 2\" choice 2)\n        UI.RadioButton(\"Choice 3\" choice 3)\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Render/","title":"UI.Render","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Object]</code><code>Object</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Object]</code><code>Object</code> <code>Queue</code>  Yes The draw queue. <code>None</code> <code>&amp;GFX.DrawQueue</code> <p>Render given UI</p> <p> </p>"},{"location":"shards/shards/UI/RenderTarget/","title":"UI.RenderTarget","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The image to display. <code>GFX.Texture2D</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>GFX.Texture2D</code> <code>Scale</code>  No Scaling to apply to the source texture. <code>@f2(1 1)</code> <code>Float2</code><code>&amp;Float2</code> <p>Display the contents of a render target. Consumes input on the region.</p> <p> </p>"},{"location":"shards/shards/UI/Reset/","title":"UI.Reset","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <p>Forgets UI scroll, position, size changes, etc.</p>"},{"location":"shards/shards/UI/Reset/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.TopPanel(\n    Contents:\n    UI.MenuBar(\n      UI.Menu(\n        Title: \"File\"\n        Contents:\n        UI.Tooltip(\n          Contents:\n          UI.Button (\"Reset UI memory\" UI.Reset)\n          OnHover:\n          {\n            \"Forget scroll, positions, sizes, etc.\" | UI.Label\n          }\n        )\n      )\n    )\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/RestoreState/","title":"UI.RestoreState","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code>"},{"location":"shards/shards/UI/RightPanel/","title":"UI.RightPanel","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the panel. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Resizable</code>  No Whether the panel can be resized. <code>None</code> <code>Bool</code><code>None</code> <code>DefaultSize</code>  No The initial size of the panel. <code>None</code> <code>Float</code><code>None</code> <code>MinSize</code>  No The minimum allowable size of the panel. <code>None</code> <code>Float</code><code>None</code> <code>MaxSize</code>  No The maximum allowable size of the panel. <code>None</code> <code>Float</code><code>None</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Layout UI elements into the panel.</p>"},{"location":"shards/shards/UI/RightPanel/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.RightPanel(\n    Contents:\n    {\n      \"Right Panel\" | UI.Label\n    })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/SaveState/","title":"UI.SaveState","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code>"},{"location":"shards/shards/UI/Scope/","title":"UI.Scope","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the scope. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Creates a scoped child UI.</p>"},{"location":"shards/shards/UI/Scope/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel(\n    UI.Scope(\n     Contents:\n     {\"Hello\" | UI.Label}))\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/ScrollArea/","title":"UI.ScrollArea","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the scroll area. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Horizontal</code>  No Enable horizontal scrolling. <code>false</code> <code>Bool</code> <code>Vertical</code>  No Enable vertical scrolling. <code>true</code> <code>Bool</code> <code>AlwaysShow</code>  No Always show the enabled scroll bars even if not needed. <code>false</code> <code>Bool</code> <p>Add vertical and/or horizontal scrolling to a contained UI.</p>"},{"location":"shards/shards/UI/ScrollArea/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n    UI.CentralPanel({\n      UI.ScrollArea(\n     Horizontal: true\n     AlwaysShow: true\n     Contents:{\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\" | UI.Label(Wrap: false)})\n    })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Selectable/","title":"UI.Selectable","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Contents</code>  No The UI contents to wrap, contain, and detect for selection. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>IsSelected</code>  No Callback function for checking if the contents are currently selected. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Clicked</code>  No Callback function for the contents of this shard is clicked. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>DoubleClicked</code>  No Callback function for the contents of this shard is clicked. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>ContextMenu</code>  No Callback function for the right-click context menu. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>ID</code>  No An optional ID value in case of ID conflicts. <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <p>A wrapper that detects selection over the provided contents.</p>"},{"location":"shards/shards/UI/Selectable/#examples","title":"Examples","text":"Code <pre><code>@template(is-selected [idx] {\n  currently-selected | Is(idx)\n})\n\n@template(select [idx] {\n  idx &gt; currently-selected | Log\n})\n\n@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      Once({\n        1 &gt;= currently-selected\n        \"\" &gt;= currently-selected-str\n      })\n      UI.CentralPanel(\n        Contents: {\n          UI.Selectable(\n            Contents: {UI.Button(\"Select Button 1\" {\"Select Button 1 Clicked\" | Log})}\n            IsSelected: {@is-selected(1)}\n            Clicked: {@select(1)}\n          )\n          UI.Selectable(\n            Contents: {\n              UI.Button(\"Select Button 2\" {\"Select Button 2 Clicked\" | Log})\n              \"Another part of the same selectable as Select Button 2\" | UI.Label(Wrap: true)\n            }\n            IsSelected: {@is-selected(2)}\n            Clicked: {@select(2)}\n          )\n\n          currently-selected | ToString &gt; currently-selected-str\n          [\n            \"Currently selected: \"\n            currently-selected-str\n          ] | String.Join | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Separator/","title":"UI.Separator","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <p>A visual separator. A horizontal or vertical line (depending on the layout).</p>"},{"location":"shards/shards/UI/Separator/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.CentralPanel({\n        \"Hello\" | UI.Label\n        UI.Separator\n        \"World\" | UI.Label\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/SetClipboard/","title":"UI.SetClipboard","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code>"},{"location":"shards/shards/UI/Sized/","title":"UI.Sized","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the layout. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Width</code>  No <code>-1</code> <code>Float</code> <code>Height</code>  No <code>-1</code> <code>Float</code> <code>FillWidth</code>  No <code>false</code> <code>Bool</code> <code>FillHeight</code>  No <code>false</code> <code>Bool</code> <p>Layout the contents sizedly.</p> <p> </p>"},{"location":"shards/shards/UI/Space/","title":"UI.Space","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Amount</code>  Yes The amount of space to insert. <code>None</code> <code>Float</code><code>&amp;Float</code> <p>Inserts an empty space before the next widget. The direction will depend on the layout.</p> <p> </p>"},{"location":"shards/shards/UI/Spinner/","title":"UI.Spinner","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Size</code>  Yes Overrides the size of the spinner. This sets both the height and width, as the spinner is always square. <code>None</code> <code>Float</code><code>&amp;Float</code> <p>A spinner widget used to indicate loading.</p>"},{"location":"shards/shards/UI/Spinner/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.CentralPanel(\n      UI.Spinner)\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Style/","title":"UI.Style","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>OverrideTextStyle</code>  No If set this will change the default TextStyle for all widgets. <code>None</code> <code>None</code><code>TextStyle</code><code>&amp;TextStyle</code><code>String</code><code>&amp;String</code> <code>FontId</code>  No If set this will change the font family and size for all widgets. <code>None</code> <code>None</code><code>{Any}</code><code>&amp;{Any}</code> <code>TextStyles</code>  No The FontFamily and size you want to use for a specific TextStyle. <code>None</code> <code>None</code><code>{Any}</code><code>&amp;{Any}</code> <code>DragValueTextStyle</code>  No The style to use for DragValue text. <code>None</code> <code>None</code><code>TextStyle</code><code>&amp;TextStyle</code><code>String</code><code>&amp;String</code> <code>Wrap</code>  No If set, labels buttons wtc will use this to determine whether or not to wrap the text at the right edge of the Ui they are in. <code>None</code> <code>None</code><code>Bool</code> <code>AnimationTime</code>  No How many seconds a typical animation should last. <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>ExplanationTooltips</code>  No Show tooltips explaining DragValues etc when hovered. <code>None</code> <code>None</code><code>Bool</code> <code>ResizeGrabRadiusSide</code>  No Mouse must be this close to the side of a window to resize <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>ResizeGrabRadiusCorner</code>  No Mouse must be this close to the corner of a window to resize <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>ShowTooltipsOnlyWhenStill</code>  No If <code>false</code>, tooltips will show up anytime you hover anything, even is mouse is still moving <code>None</code> <code>None</code><code>Bool</code> <code>ItemSpacing</code>  No Horizontal and vertical spacing between widgets. <code>None</code> <code>None</code><code>Float2</code><code>&amp;Float2</code> <code>WindowMargin</code>  No Horizontal and vertical margins within a window frame. <code>None</code> <code>None</code><code>Float4</code><code>&amp;Float4</code> <code>ButtonPadding</code>  No Button size is text size plus this on each side <code>None</code> <code>None</code><code>Float2</code><code>&amp;Float2</code> <code>MenuMargin</code>  No Horizontal and vertical margins within a menu frame. <code>None</code> <code>None</code><code>Float4</code><code>&amp;Float4</code> <code>Indent</code>  No Indent collapsing regions etc by this much. <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>InteractSize</code>  No Minimum size of a DragValue, color picker button, and other small widgets. interact_size.y is the default height of button, slider, etc. Anything clickable should be (at least) this size. <code>None</code> <code>None</code><code>Float2</code><code>&amp;Float2</code> <code>SliderWidth</code>  No Default width of a Slider. <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>ComboWidth</code>  No Default (minimum) width of a ComboBox. <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>TextEditWidth</code>  No Default width of a TextEdit. <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>IconWidth</code>  No Checkboxes, radio button and collapsing headers have an icon at the start. This is the width/height of the outer part of this icon (e.g. the BOX of the checkbox). <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>IconWidthInner</code>  No Checkboxes, radio button and collapsing headers have an icon at the start. This is the width/height of the inner part of this icon (e.g. the check of the checkbox). <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>IconSpacing</code>  No Checkboxes, radio button and collapsing headers have an icon at the start. This is the spacing between the icon and the text <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>TooltipWidth</code>  No Width of a tooltip (on_hover_ui, on_hover_text etc). <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>IndentEndsWithHorizontalLine</code>  No End indented regions with a horizontal line <code>None</code> <code>None</code><code>Bool</code> <code>ComboHeight</code>  No Height of a combo-box before showing scroll bars. <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>ScrollBarWidth</code>  No Width of a scroll bar. <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>ScrollHandleMinLength</code>  No Make sure the scroll handle is at least this big <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>ScrollBarInnerMargin</code>  No Margin between contents and scroll bar. <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>ScrollBarOuterMargin</code>  No Margin between scroll bar and the outer container (e.g. right of a vertical scroll bar). <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>DarkMode</code>  No If true, the visuals are overall dark with light text. If false, the visuals are overall light with dark text. <code>None</code> <code>None</code><code>Bool</code><code>&amp;Bool</code> <code>OverrideTextColor</code>  No Override default text color for all text. <code>None</code> <code>None</code><code>Color</code><code>&amp;Color</code> <code>Selection</code>  No <code>None</code> <code>None</code><code>{Any}</code><code>&amp;{Any}</code> <code>HyperlinkColor</code>  No The color used for Hyperlink <code>None</code> <code>None</code><code>Color</code><code>&amp;Color</code> <code>FaintBgColor</code>  No Something just barely different from the background color. Used for Grid::striped. <code>None</code> <code>None</code><code>Color</code><code>&amp;Color</code> <code>ExtremeBgColor</code>  No Very dark or light color (for corresponding theme). Used as the background of text edits, scroll bars and others things that needs to look different from other interactive stuff. <code>None</code> <code>None</code><code>Color</code><code>&amp;Color</code> <code>CodeBgColor</code>  No Background color behind code-styled monospaced labels. <code>None</code> <code>None</code><code>Color</code><code>&amp;Color</code> <code>WarnFgColor</code>  No A good color for warning text (e.g. orange). <code>None</code> <code>None</code><code>Color</code><code>&amp;Color</code> <code>ErrorFgColor</code>  No A good color for error text (e.g. red). <code>None</code> <code>None</code><code>Color</code><code>&amp;Color</code> <code>WindowRounding</code>  No Window corner rounding. <code>None</code> <code>None</code><code>Float4</code><code>&amp;Float4</code> <code>WindowShadow</code>  No Window shadow size. <code>None</code> <code>None</code><code>{Any}</code><code>&amp;{Any}</code> <code>WindowFill</code>  No Window background color. <code>None</code> <code>None</code><code>Color</code><code>&amp;Color</code> <code>WindowStroke</code>  No Window stroke (border) color and thickness. <code>None</code> <code>None</code><code>{Any}</code><code>&amp;{Any}</code> <code>MenuRounding</code>  No Menu corner rounding. <code>None</code> <code>None</code><code>Float4</code><code>&amp;Float4</code> <code>PanelFill</code>  No Panel background color. <code>None</code> <code>None</code><code>Color</code><code>&amp;Color</code> <code>PopupShadow</code>  No Popup shadow size. <code>None</code> <code>None</code><code>{Any}</code><code>&amp;{Any}</code> <code>ResizeCornerSize</code>  No Corner rounding for resize handle rects. <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>TextCursorWidth</code>  No Width of the line cursor when hovering over InputText etc. <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>TextCursorPreview</code>  No Show where the text cursor would be if you clicked. <code>None</code> <code>None</code><code>Bool</code><code>&amp;Bool</code> <code>ClipRectMargin</code>  No Allow child widgets to be just on the border and still have a stroke with some thickness <code>None</code> <code>None</code><code>Float</code><code>&amp;Float</code> <code>ButtonFrame</code>  No Show a background behind buttons. <code>None</code> <code>None</code><code>Bool</code><code>&amp;Bool</code> <code>CollapsingHeaderFrame</code>  No Show a background behind collapsing headers. <code>None</code> <code>None</code><code>Bool</code><code>&amp;Bool</code> <code>IndentHasLeftVLine</code>  No Draw a vertical lien left of indented region, in e.g. CollapsingHeader. <code>None</code> <code>None</code><code>Bool</code><code>&amp;Bool</code> <code>Striped</code>  No Whether or not Grids and Tables should be striped by default (have alternating rows differently colored). <code>None</code> <code>None</code><code>Bool</code><code>&amp;Bool</code> <code>SliderTrailingFill</code>  No Show trailing color behind the circle of a Slider. Default is OFF. Enabling this will affect ALL sliders, and can be enabled/disabled per slider with Slider::trailing_fill. <code>None</code> <code>None</code><code>Bool</code><code>&amp;Bool</code> <p>Apply style changes to the current UI scope.</p>"},{"location":"shards/shards/UI/Style/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.CentralPanel({\n        Once({\n          64 &gt;= hue\n          0 &gt;= r &gt;= g\n          @color(0 0 0 0) &gt;= color\n          16.0 &gt;= size\n        })\n\n        255 | Math.Subtract(hue) | Math.Multiply(2) | Min(255) &gt; r\n        hue | Math.Multiply(2) | Min(255) &gt; g\n        [r g 0 255] | ToColor &gt; color\n\n        UI.Scope({\n          UI.Style(\n            OverrideTextStyle: \"MyStyle\"\n            TextStyles: {MyStyle: {Size: size\n                                   Family: FontFamily::Monospace}}\n            OverrideTextColor: color\n          )\n          UI.IntSlider(\n            Variable: hue\n            Min: 0 Max: 255\n          )\n          UI.FloatSlider(\n            Variable: size\n            Min: 8.0 Max: 96.0\n          )\n          \"Hello Shards!\" | UI.Label\n        })\n\n        \"This text is not affected\" | UI.Label\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.CentralPanel(\n        Contents: {\n          UI.Style(\n            OverrideTextStyle: \"MyStyle\"\n            TextStyles: {MyStyle: {Size: 36.0\n                                   Family: FontFamily::Monospace}}\n          )\n          \"Hello Shards!\" | UI.Label\n\n          UI.Style(TextStyles: {MyStyle: {Size: 16.0 Family: FontFamily::Monospace}})\n          \"Hello Shards!\" | UI.Label\n\n          UI.Style(TextStyles: {MyStyle: {Size: 20.0 Family: FontFamily::Proportional}})\n          \"Hello Shards!\" | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/SubArea/","title":"UI.SubArea","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Offset</code>  Yes Relative offset. (X/Y) <code>None</code> <code>Float2</code><code>&amp;Float2</code> <code>Anchor</code>  Yes The anchor for the inner UI, relative to the available space <code>None</code> <code>Anchor</code><code>&amp;Anchor</code> <code>Pivot</code>  Yes The pivot for the inner UI <code>None</code> <code>Anchor</code><code>&amp;Anchor</code> <p>Places UI element at a specific position.</p> <p> </p>"},{"location":"shards/shards/UI/Tab/","title":"UI.Tab","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the tab. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Title</code>  Yes The title of the tab. <code>None</code> <code>String</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Experimental/unstable</p> <p>This API is experimental and might produce unexpected results or crash.</p> <p>Represents a tab inside a DockArea.</p>"},{"location":"shards/shards/UI/Tab/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.DockArea(\n    Contents:{\n      UI.Tab(\n      Title: \"Tab 1\"\n      Contents:{\n        \"Tab 1 contents\" | UI.Label\n      })\n     UI.Tab(\n      Title: \"Tab 2\"\n      Contents: {\n        \"Tab 2 contents\" | UI.Label\n      })\n    })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Table/","title":"UI.Table","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Columns and Rows shards of the table. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>[Any]</code> <code>Builder</code>  No Sequence of shards to build each column, repeated for each row. <code>[]</code> <code>[None Shard [Shard]]</code> <code>Columns</code>  No Configuration of the columns. <code>None</code> <code>[{Any}]</code><code>None</code> <code>Striped</code>  No Whether to alternate a subtle background color to every other row. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>Resizable</code>  No Whether columns can be resized within their specified range. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>RowIndex</code>  No Variable to hold the row index, to be used within Rows. <code>ContextVariable: Table.RowIndex</code> <code>Int</code><code>&amp;Int</code><code>None</code> <p>Table layout.</p>"},{"location":"shards/shards/UI/Table/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      [\n        @i2(0) @i2(0 1) @i2(1) @i2(1 0)]\n      UI.Table(\n        Columns: [\n          {Header: \"A\"}\n          {Header: \"B\"}\n          {Header: \"A xor B\"}]\n        Builder: [\n          {Take(0) | ToString | UI.Label}\n          {Take(1) | ToString | UI.Label}\n          {\n            {Take(0) &gt;= a}\n            {Take(1) &gt;= b}\n            a | Math.Xor(b) | ToString | UI.Label\n          }]\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      [\n        {Name: \"Doe\" Surname: \"John\"}\n        {Name: \"Dough\" Surname: \"Jane\"}\n        {Name: \"Smith\" Surname: \"Dick\"}]\n      UI.Table(\n        Resizable: true\n        Striped: true\n        RowIndex: index\n        Columns: [\n          {Initial: 20.0}\n          {\n            Header: \"Surname\"\n            Initial: 100.0\n            AtLeast: 60.0\n            AtMost: 160.0\n          }\n          {\n            Header: {\n              \"Name\" | UI.Label(Style: {text_style: \"Heading\"})\n              UI.Button(\"Up\" Msg(\"Clicked Up\") Style: {text_style: \"Small\"})\n              UI.Button(\"Down\" Msg(\"Clicked Down\") Style: {text_style: \"Small\"})\n            }\n            Initial: 120.0\n            AtLeast: 100.0\n            AtMost: 160.0\n          }]\n        Builder: [\n          {index | ToString | UI.Label}\n          {Take(\"Surname\") | UI.Label}\n          {Take(\"Name\") | UI.Label}]\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      [\n        {Name: \"Doe\" Surname: \"John\"}\n        {Name: \"Dough\" Surname: \"Jane\"}\n        {Name: \"Smith\" Surname: \"Dick\"}]\n      UI.Table(\n        Resizable: true\n        Striped: true\n        RowIndex: index\n        Columns: [\n          {Initial: 20.0}\n          {\n            Header: \"Surname\"\n            Initial: 100.0\n            AtLeast: 60.0\n            AtMost: 160.0\n          }\n          {\n            Header: \"Name\"\n            Initial: 80.0\n            AtLeast: 60.0\n            AtMost: 160.0\n          }]\n        Builder: [\n          {index | ToString | UI.Label}\n          {Take(\"Surname\") | UI.Label}\n          {Take(\"Name\") | UI.Label}]\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/TextField/","title":"UI.TextField","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced when changed. <code>[Any]</code> <code>Variable</code>  Yes The variable that holds the input value. <code>None</code> <code>String</code><code>&amp;String</code> <code>JustifyWidth</code>  No Whether to take up all available space for its desired width. <code>None</code> <code>Bool</code><code>&amp;Bool</code><code>None</code> <code>Multiline</code>  No Support multiple lines. <code>false</code> <code>Bool</code> <code>Password</code>  No Support multiple lines. <code>false</code> <code>Bool</code> <code>Hint</code>  No Hint to show in the text field. <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <p>A widget where text can be entered.</p>"},{"location":"shards/shards/UI/TextField/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      ; read-only\n      UI.TextField(\"Lorem ipsum dolor sit amet\")\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      ; exposing a new variable\n      UI.TextField(text)\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      Once({\n        \"Lorem ipsum dolor sit amet\" &gt;= text\n      })\n      UI.TextField(\n        Variable: text\n        Multiline: false\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Tooltip/","title":"UI.Tooltip","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to both the Contents and OnHover shards of the tooltip. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>OnHover</code>  No The tooltip contents. <code>None</code> <code>String</code><code>Shard</code><code>[Shard]</code><code>None</code> <p>Display a tooltip when the Contents is hovered over.</p>"},{"location":"shards/shards/UI/Tooltip/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Tooltip(\n        OnHover: {\n          \"Tooltip\" | UI.Label\n        }\n        Contents: {\n          \"Lorem ipsum\" | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/TopPanel/","title":"UI.TopPanel","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the panel. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Resizable</code>  No Whether the panel can be resized. <code>None</code> <code>Bool</code><code>None</code> <code>DefaultSize</code>  No The initial size of the panel. <code>None</code> <code>Float</code><code>None</code> <code>MinSize</code>  No The minimum allowable size of the panel. <code>None</code> <code>Float</code><code>None</code> <code>MaxSize</code>  No The maximum allowable size of the panel. <code>None</code> <code>Float</code><code>None</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Layout UI elements into the panel.</p>"},{"location":"shards/shards/UI/TopPanel/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.TopPanel(\n        Contents: {\n          \"Top Panel\" | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Variable/","title":"UI.Variable","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Variable</code>  Yes The variable that holds the value. <code>None</code> <code>&amp;Any</code> <code>Labeled</code>  No If the name of the variable should be visible as a label. <code>false</code> <code>Bool</code>"},{"location":"shards/shards/UI/Variable/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.CentralPanel(\n      UI.Variable(my-var))\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Vertical/","title":"UI.Vertical","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the layout. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Centered</code>  No Center the contents horizontally. <code>false</code> <code>Bool</code> <p>Layout the contents vertically.</p>"},{"location":"shards/shards/UI/Vertical/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Vertical(\n        Centered: true\n        Contents: {\n          \"Hello\" | UI.Label\n          UI.Separator\n          \"World\" | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Vertical(\n        Contents: {\n          \"Hello\" | UI.Label\n          UI.Separator\n          \"World\" | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/WidgetStyle/","title":"UI.WidgetStyle","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>NonInteractive</code>  No The style of a widget that you cannot interact with. <code>None</code> <code>None</code><code>{Any}</code><code>&amp;{Any}</code> <code>Inactive</code>  No The style of an interactive widget, such as a button, at rest. <code>None</code> <code>None</code><code>{Any}</code><code>&amp;{Any}</code> <code>Hovered</code>  No The style of an interactive widget while you hover it, or when it is highlighted. <code>None</code> <code>None</code><code>{Any}</code><code>&amp;{Any}</code> <code>Active</code>  No The style of an interactive widget as you are clicking or dragging it. <code>None</code> <code>None</code><code>{Any}</code><code>&amp;{Any}</code> <code>Open</code>  No The style of a button that has an open menu beneath it (e.g. a combo-box) <code>None</code> <code>None</code><code>{Any}</code><code>&amp;{Any}</code> <p>Apply style changes to the current UI scope.</p> <p> </p>"},{"location":"shards/shards/UI/Window/","title":"UI.Window","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the rendered window. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Title</code>  No The window title displayed on the titlebar. <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Position</code>  Yes Absolute position; or when anchor is set, relative offset. <code>None</code> <code>Float2</code><code>&amp;Float2</code> <code>Anchor</code>  Yes Corner or center of the screen. <code>None</code> <code>Anchor</code> <code>Width</code>  No The width of the rendered window. <code>None</code> <code>Int</code><code>None</code> <code>Height</code>  No The height of the rendered window. <code>None</code> <code>Int</code><code>None</code> <code>Closed</code>  No When provided with a callback, this window will have a close button and call this when pressed. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Flags</code>  Yes Window flags. <code>None</code> <code>WindowFlags</code><code>[WindowFlags]</code> <code>ID</code>  No An optional ID value to make the window unique if the title name collides. <code>None</code> <code>String</code><code>&amp;String</code><code>None</code> <code>Contents</code>  No The UI contents. <code>None</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Creates a floating window which can be dragged, closed, collapsed, and resized.</p>"},{"location":"shards/shards/UI/Window/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"Greetings\"\n    Flags: WindowFlags::NoCollapse\n    Contents: {\n      \"Hello shards!\" | UI.Label\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/WireVariable/","title":"UI.WireVariable","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>{Wire: Wire Name: String}</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code>"},{"location":"shards/shards/UUID/Convert/","title":"UUID.Convert","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int16</code> <p>Outputs a UUID (Universally Unique Identifier) as Int16.</p> <p> </p>"},{"location":"shards/shards/UUID/ToBytes/","title":"UUID.ToBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Int16</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <p>Reads an UUID and formats it into bytes.</p> <p> </p>"},{"location":"shards/shards/UUID/ToString/","title":"UUID.ToString","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Int16</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <code>Hyphenated</code>  No Whether to use hyphens in the output. <code>false</code> <code>Bool</code> <p>Reads an UUID and formats it into a readable string.</p> <p> </p>"}]}