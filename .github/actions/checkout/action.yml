name: "Checkout"
description: "Checkout the required shards & formabble repositories"
inputs:
  rust-toolchain-suffix:  # id of input
    required: false
    default: ''
  github-token:
    required: true
runs:
  using: "composite"
  steps:
    - name: Import settings
      shell: bash
      run: |
        cat .config >> $GITHUB_ENV
        echo "Current job ${{ github.job }}"

    - id: skip
      uses: actions/github-script@v6
      with:
        script: |
          var envVar = context.job.toUpperCase().replace("-", "_");
          console.log("Checking if " + envVar + " is enabled");
          if(process.env[envVar] === 1) {
            console.log("Job enabled");
          } else {
            core.setFailed("Release platform is disabled");
          }

    - name: Checkout private repository
      uses: actions/checkout@v3
      with:
        repository: fragcolor-xyz/formabble
        token: ${{ inputs.github-token }}
        path: formabble
        ref: ${{ env.FBL_REF }}
        submodules: recursive
        fetch-depth: 1

    - name: Checkout public repository
      uses: actions/checkout@v3
      with:
        repository: fragcolor-xyz/shards
        token: ${{ inputs.github-token }}
        path: shards
        ref: ${{ env.SHARDS_REF }}
        submodules: recursive
        fetch-depth: 1
        
    - name: Set up rust
      shell: bash
      env:
        RUSTUP_USE_CURL: 1
      run: |
        RUSTUP_TOOLCHAIN=`cat shards/rust.version`${{ inputs.rust-toolchain-suffix }}
        echo "RUSTUP_TOOLCHAIN=$RUSTUP_TOOLCHAIN" >> $GITHUB_ENV
        rustup toolchain install $RUSTUP_TOOLCHAIN

    - name: Set up MacOS
      shell: bash
      if: runner.os == "macOS"
      run: |
        brew install cmake ninja clang-format

    - name: Set up Windows
      shell: bash
      if: runner.os == "Windows"
      run: |
        choco install -y --force --version=18.1.6 llvm
        choco install -y cmake ninja

    - name: Set up Linux
      shell: bash
      if: runner.os == "Linux"
      run: |
        sudo apt-get -y update
        sudo apt-get -y install build-essential git cmake wget ninja-build